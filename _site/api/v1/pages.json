{"entries":[{"title":"","url":"//404.html","tags":[],"body":"404 Page not found :( The requested page could not be found."},{"title":"","url":"//404.html","tags":[],"body":"Sorry, but the page you were trying to view does not exist --- perhaps you can try searching for it below."},{"title":"About","url":"//about/poo","tags":[],"body":"This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for Minima at GitHub: jekyll / minima You can find the source code for Jekyll at GitHub: jekyll / jekyll"},{"title":"Posts by Category","url":"//categories/","tags":[],"body":""},{"title":"cheatsheets","url":"//cheat-sheet-archive/","tags":[],"body":""},{"title":"Posts by Collection","url":"//collection-archive/","tags":[],"body":"cheatsheets C# 7 Out Variables Firebase Authenticating Firefox Firefox 31 (July 2014) Fish shell Keys Flashlight Commands Flow Getting started Flux architecture Architecture Flynn General workflow Freenode irc.freenode.net Frequency separation retouching Frequency separation retouching in Photoshop GitHub pages Custom domains Git branches Working with branches Git extras Git-flow Git log format string Log format git log Revision ranges Git revisions Example usages Git tricks Refs Jest Testing jQuery CDN Google jQuery jQuery Traversing fetch() Fetch JavaScript lazy shortcuts Shortcuts js-model Example JavaScript speech synthesis SpeechSynthesisUtterance jscoverage Install Jshint Relaxing Linux Mounting a RAM drive npm Package management Controllers Common stuff Rails features Page caching Form helpers Form builder Rails gems Rico’s preferred rails gems Helpers Date i18n ```rb t(‘my.messages.hello’) Migrations Automatically make migrations Rails models Generating Rails plugins Generate a plugin Routes Multiple resources (resources) Rails tricks in config/environments/development.rb: React-router React.js resources"},{"title":"","url":"//","tags":[],"body":""},{"title":"News","url":"//news/","tags":[],"body":"News Select a providor"},{"title":"Search","url":"//search/","tags":[],"body":""},{"title":"Sitemap","url":"//sitemap/","tags":[],"body":"A list of all the posts and pages found on the site. For you robots out there is an XML version available for digesting as well. Pages About Posts by Category cheatsheets Posts by Collection News Search Sitemap Splash Page Bacon ipsum dolor sit amet salami ham hock ham, hamburger corned beef short ribs kielbasa biltong t-bone drumstick tri-tip tail sirloin pork chop. Posts by Tag Terms and Privacy Policy Posts by Year Posts Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 cheatsheets C# 7 Out Variables Firebase Authenticating Firefox Firefox 31 (July 2014) Fish shell Keys Flashlight Commands Flow Getting started Flux architecture Architecture Flynn General workflow Freenode irc.freenode.net Frequency separation retouching Frequency separation retouching in Photoshop GitHub pages Custom domains Git branches Working with branches Git extras Git-flow Git log format string Log format git log Revision ranges Git revisions Example usages Git tricks Refs Jest Testing jQuery CDN Google jQuery jQuery Traversing fetch() Fetch JavaScript lazy shortcuts Shortcuts js-model Example JavaScript speech synthesis SpeechSynthesisUtterance jscoverage Install Jshint Relaxing Linux Mounting a RAM drive npm Package management Controllers Common stuff Rails features Page caching Form helpers Form builder Rails gems Rico’s preferred rails gems Helpers Date i18n ```rb t(‘my.messages.hello’) Migrations Automatically make migrations Rails models Generating Rails plugins Generate a plugin Routes Multiple resources (resources) Rails tricks in config/environments/development.rb: React-router React.js resources"},{"title":"Splash Page","url":"//splash-page/","tags":[],"body":"Nullam suscipit et nam, tellus velit pellentesque at malesuada, enim eaque. Quis nulla, netus tempor in diam gravida tincidunt, proin faucibus voluptate felis id sollicitudin. Centered with type=\"center\" Image courtesy of Unsplash Placeholder 1 This is some sample content that goes here with Markdown formatting. Placeholder 2 This is some sample content that goes here with Markdown formatting. Read More Placeholder 3 This is some sample content that goes here with Markdown formatting. Placeholder Image Left Aligned This is some sample content that goes here with Markdown formatting. Left aligned with type=\"left\" Read More Placeholder Image Right Aligned This is some sample content that goes here with Markdown formatting. Right aligned with type=\"right\" Read More Placeholder Image Center Aligned This is some sample content that goes here with Markdown formatting. Centered with type=\"center\" Read More"},{"title":"Posts by Tag","url":"//tags/","tags":[],"body":""},{"title":"Terms and Privacy Policy","url":"//terms/","tags":[],"body":"## Privacy Policy The privacy of my visitors is extremely important. This Privacy Policy outlines the types of personal information that is received and collected and how it is used. First and foremost, I will never share your email address or any other personal information to anyone without your direct consent. ### Log Files Like many other websites, this site uses log files to help learn about when, from where, and how often traffic flows to this site. The information in these log files include: * Internet Protocol addresses (IP) * Types of browser * Internet Service Provider (ISP) * Date and time stamp * Referring and exit pages * Number of clicks All of this information is not linked to anything that is personally identifiable. ### Cookies and Web Beacons When you visit this site \"convenience\" cookies are stored on your computer when you submit a comment to help you log in faster to [Disqus](http://disqus.com) the next time you leave a comment. Third-party advertisers may also place and read cookies on your browser and/or use web beacons to collect information. This site has no access or control over these cookies. You should review the respective privacy policies on any and all third-party ad servers for more information regarding their practices and how to opt-out. If you wish to disable cookies, you may do so through your web browser options. Instructions for doing so can be found on the specific web browsers' websites. #### Google Analytics Google Analytics is a web analytics tool I use to help understand how visitors engage with this website. It reports website trends using cookies and web beacons without identifying individual visitors. You can read [Google Analytics Privacy Policy](http://www.google.com/analytics/learn/privacy.html). #### Google Adsense Google Adsense, a third party affiliate marketing network, uses cookies to help make sure I get a commission when you buy a product after clicking on a link or ad banner that takes you to the site of one of their merchants. You can read [Google Adsense Privacy Policy](http://support.google.com/adsense/bin/answer.py?hl=en&answer=48182). ## Disclosure Policy I make money on this website through affiliate programs. If you click an affiliate link or ad banner and buy the product, you help support this website because I'll get a percentage of that sale. Currently I'm an affiliate for Amazon and Google Adsense. What this means for you: * I became an affiliate to earn revenue towards the costs of running and maintaining this website. Where I have direct control over which ads are served on this website I offer only products that are directly related to the topic of this website and products that a reader/subscriber would have a genuine interest in or need of. * I do not and will not recommend a product just for the sake of making money. * I do not let the compensation I receive influence the content, topics, posts, or opinions expressed on this website. * I respect and value my readers too much to write anything other than my own genuine and objective opinions and advice. Just like this website, my Disclosure Policy is a work in progress. As the revenue streams evolve, so will this page."},{"title":"Posts by Year","url":"//year-archive/","tags":[],"body":""},{"title":"","url":"//tag/html/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/html/page2/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/beginner/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/beginner/page2/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/html-attributes/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/head-elements/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/html-elements/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/hyperlinks/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/nesting-elements/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/empty-elements/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/html/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/fundamentals/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/fundamentals/page2/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/css/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/css/page2/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/css/page3/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/display/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/flex-box/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/fonts/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/forms/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/grid/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/images/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/media/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/organization/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/overflow/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/rtl/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/ltr/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/sass/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/jekyll/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/quickstart/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"","url":"//tag/web-componants/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements 🗿 HEAD HTML Attributes Attributes What is html What is HTML Command Line CPNT 260: Day 0 Back to top ↑"},{"title":"Command Line","url":"//command-line/","tags":[],"body":"# CPNT 260: Day 0 ## Command Line: Navigating the file system [CLI (command line interface) Cheat Sheet](https://www.git-tower.com/blog/command-line-cheat-sheet/) ### CLI Anatomy ### The 3 commands you will use 80% of the time - `pwd`: displays your 'present working directory'. This will usually default to your home folder when you first open your terminal. - `ls`: lists the contents of your current directory. The `-l` flag lists extra information and `-a` lists hidden files. `-la` will list extra information and also all hidden files. - `cd`: changes your directory based on the path you provide after the command (separated by a space). Examples: - `$ cd Documents/fast-track` - `$ cd /h/sait/fast-track` - `$ cd ../..` Quality of life cli tips - tab: auto-completes file names and directories - up arrow: browse through command history ## URIs, URLs, and file paths ### Naming conventions - Files should be named consistently - File names should be short but descriptive (<25 characters) - Avoid special characters or spaces in a file name - Underscores or hyphens instead of spaces - Use lower case characters when possible - Default file name for html: index.html - Default file name for css: styles.css or main.css - Default file name for js: app.js or index.js - Default file name for documentation README (located in the root directory of a project; extension can vary but is usually .txt. or .md) ## Activity: [Configuring Git](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup) - Setting your name - Setting your email - Setting up your keys (optional) - [Why does GitHub recommend HTTPS over SSH?](https://stackoverflow.com/questions/11041729/why-does-github-recommend-https-over-ssh) - [Generating a new SSH key and adding it to the ssh-agent](https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) ## Cloning a repo ### Option 1: Upload files and clone 1. Create empty GH repo with initialized README.md 2. Drag and drop files into your repo 3. Clone repo to your file system with `git clone` ### Option 2: Push from existing local repo 1. Create empty GH repo WITHOUT initialized README.md 2. Follow listed instructions for \"*…or push an existing repository from the command line*\" **Important: Do not create a repo inside another repo** ### Activity: Fork and clone the course repo to your system 1. Clone repo to your filesystem ### Top Git commands - `$ git status` - `$ git add` - `$ git commit` - `$ git push` - `$ git pull` ## Dobbie ## Anatomy of a webpage - doctype - head - body - styles - scripts ## Web Analogues and horizontal components - Docs - Photoshop - Illustrator ### Activity: Creating a web page from Codepen Create a single webpage from the HTML, CSS and JS listed in a Codepen of your choice. All styles and script should be embedded in the index.html page itself. ## CSS Colour Overview of positive and negative colour models. - Poisitve: RBG - Negative: CMYK Overview of the four colour modes of CSS - colour names - hexcode - RBG - HSL ## Prep for Tomorrow - Homework: Bring in a magazine or newspaper from the outside world. - [Resilient CSS: Part 1 of 7](https://youtu.be/u00FY9vADfQ) - [Resilient CSS: Part 2 of 7](https://youtu.be/WM_cKHH7bZ0)"},{"title":"What is html","url":"//html/what-is-html/","tags":["HTML","beginner"],"body":"What is HTML The Basics Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document. The HTML Document The standard lay out of the HTML Doc. This is a title Hello world! The text between  and  describes the web page, and the text between  and  is the visible page content. The markup text This is a title defines the browser page title. The Document Type Declaration  is for HTML5. If a declaration is not included, various browsers will revert to “quirks mode” for rendering HTML Elements HTML documents imply a structure of nested HTML elements. These are indicated in the document by HTML tags, enclosed in angle brackets thus:  In the simple, general case, the extent of an element is indicated by a pair of tags: a “start tag”  and “end tag” . The text content of the element, if any, is placed between these tags. Tags may also enclose further tag markup between the start and end, including a mixture of tags and text. This indicates further (nested) elements, as children of the parent element. The start tag may also include attributes within the tag. These indicate other information, such as identifiers for sections within the document, identifiers used to bind style information to the presentation of the document, and for some tags such as the  used to embed images, the reference to the image resource. Some elements, such as the line break , do not permit any embedded content, either text or further tags. These require only a single empty tag (akin to a start tag) and do not use an end tag. Many tags, particularly the closing end tag for the very commonly used paragraph element , are optional. An HTML browser or other agent can infer the closure for the end of an element from the context and the structural rules defined by the HTML standard. These rules are complex and not widely understood by most HTML coders. The general form of an HTML element is therefore: ''content''. Some HTML elements are defined as empty elements and take the form . Empty elements may enclose no content, for instance, the  tag or the inline  tag. The name of an HTML element is the name used in the tags. Note that the end tag’s name is preceded by a slash character, /, and that in empty elements the end tag is neither required nor allowed. If attributes are not mentioned, default values are used in each case."},{"title":"HTML Attributes","url":"//html/html-attributes/","tags":["html Attributes","beginner"],"body":"Attributes Elements can also have attributes, which look like this: Attributes contain extra information about the element that you don’t want to appear in the actual content. In this case, the class attribute allows you to give the element an identifying name, that can be used later to target the element with style information and other things. An attribute should have: A space between it and the element name (or the previous attribute, if the element already has one or more attributes). The attribute name, followed by an equal sign. An attribute value, with opening and closing quote marks wrapped around it. Adding attributes to an element Another example of an element is [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) — this stands for “anchor” and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows: href: This attribute’s value specifies the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, href=\"https://www.mozilla.org/\". title: The title attribute specifies extra information about the link, such as what page is being linked to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when the element is hovered over. target: The target attribute specifies the browsing context that will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab, just omit this attribute. Edit the line below in the Input area to turn it into a link to your favorite website. First, add the  element. Second, add the href attribute and the title attribute. Lastly, specify the target attribute to open the link in the new tab. You’ll be able to see your changes update live in the Output area. You should see a link that when hovered over displays the value of the title attribute, and when clicked, navigates to the web address in the href attribute. Remember that you need to include a space between the element name, and each attribute. If you make a mistake, you can always reset it using the Reset button. If you get really stuck, press the Show solution button to see the answer. Boolean attributes You’ll sometimes see attributes written without values — this is perfectly allowed. These are called Boolean attributes, and they can only have one value, which is generally the same as the attribute name. As an example, take the [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-disabled) attribute, which you can assign to form input elements, if you want them to be disabled (greyed out) so the user can’t enter any data in them. As shorthand, it is perfectly allowable to write this as follows (we’ve also included a non-disabled form input element for reference, to give you more of an idea what is going on): Omitting quotes around attribute values When you look around the World Wide Web, you’ll come across a number of strange markup styles, including attribute values without quotes. This is allowable in certain circumstances, but will break your markup in others. For example, if we revisit our link example from earlier, we could write a basic version with only the href attribute, like this: favorite website However, as soon as we add the title attribute in this style, things will go wrong: favorite website At this point the browser will misinterpret your markup, thinking that the title attribute is actually three attributes — a title attribute with the value “The”, and two Boolean attributes, Mozilla and homepage. This is obviously not what was intended, and will cause errors or unexpected behavior in the code, as seen in the live example below. Try hovering over the link to see what the title text is! Our advice is to always include the attribute quotes — it avoids such problems, and results in more readable code too. Single or double quotes In this article you’ll notice that the attributes are all wrapped in double quotes. You might however see single quotes in some people’s HTML code. This is purely a matter of style, and you can feel free to choose which one you prefer. Both the following lines are equivalent: A link to my example.A link to my example. You should however make sure you don’t mix them together. The following will go wrong! A link to my example. If you’ve used one type of quote in your HTML, you can include the other type of quote inside your attribute values without causing any problems: A link to my example. However if you want to include a quote, within the quotes where both the quotes are of the same type (single quote or double quote), you’ll have to use HTML entities for the quotes. For example, this will break: A link to my example. So you need to do this: A link to my example."},{"title":"All Head Elements","url":"//html/all-head-elements/","tags":["HTML","beginner","Head Elements","HTML Elements"],"body":"🗿 HEAD From Josh Buchea’s Github A list of everything that *could* go in the of your document Table of Contents Recommended Minimum Elements Meta Link Icons Social Facebook Open Graph Twitter Card Twitter Privacy Schema.org Pinterest Facebook Instant Articles OEmbed QQ/Wechat Browsers / Platforms Apple iOS Google Android Google Chrome Microsoft Internet Explorer Browsers (Chinese) 360 Browser QQ Mobile Browser UC Mobile Browser App Links Other Resources Related Projects Other Formats Translations Contributing Contributors Author License Recommended Minimum Below are the essential elements for any web document (websites/apps): Page Title meta charset - defines the encoding of the website, utf-8 is the standard meta name=”viewport” - viewport settings related to mobile responsiveness width=device-width means that it will use the physical width of the device (instead of zooming out) which is good with mobile friendly pages initial-scale=1 is the initial zoom, 1 means no zoom ⬆ back to top Elements Valid elements include meta, link, title, style, script, noscript, and base. These elements provide information for how a document should be perceived, and rendered, by web technologies. e.g. browsers, search engines, bots, etc. Page Title ⬆ back to top Meta 📖 Meta tags that Google understands 📖 WHATWG Wiki: MetaExtensions 📖 ICBM on Wikipedia 📖 Geotagging on Wikipedia ⬆ back to top Link 📖 Link Relations ⬆ back to top Icons 📖 All About Favicons (And Touch Icons) 📖 Creating Pinned Tab Icons 📖 Favicon Cheat Sheet 📖 Icons & Browser Colors ⬆ back to top Social Facebook Open Graph Most content is shared to Facebook as a URL, so it’s important that you mark up your website with Open Graph tags to take control over how your content appears on Facebook. More about Facebook Open Graph Markup 📖 Open Graph protocol 🛠 Test your page with the Facebook Sharing Debugger Twitter Card With Twitter Cards, you can attach rich photos, videos and media experiences to Tweets, helping to drive traffic to your website. More about Twitter Cards 📖 Getting started with cards — Twitter Developers 🛠 Test your page with the Twitter Card Validator Twitter Privacy If you embed tweets in your website, Twitter can use information from your site to tailor content and suggestions to Twitter users. More about Twitter privacy options. Schema.org Note: These meta tags require the itemscope and itemtype attributes to be added to the tag. 🛠 Test your page with the Structured Data Testing Tool Pinterest Pinterest lets you prevent people from saving things from your website, according to their help center. The description is optional. Facebook Instant Articles 📖 Creating Articles - Instant Articles 📖 Code Samples - Instant Articles OEmbed 📖 oEmbed format QQ/Wechat Users share web pages to qq wechat will have a formatted message 📖 Code Format Docs ⬆ back to top Browsers / Platforms Apple iOS 📖 Configuring Web Applications Google Android Google Chrome Microsoft Internet Explorer Minimum required xml markup for browserconfig.xml: 📖 Browser configuration schema reference ⬆ back to top Browsers (Chinese) 360 Browser QQ Mobile Browser UC Mobile Browser 📖 UC Browser Docs ⬆ back to top App Links 📖 App Links ⬆ back to top Other Resources 📖 HTML5 Boilerplate Docs: The HTML 📖 HTML5 Boilerplate Docs: Extend and customize ⬆ back to top Related Projects Atom HTML Head Snippets - Atom package for HEAD snippets Sublime Text HTML Head Snippets - Sublime Text package for HEAD snippets head-it - CLI interface for HEAD snippets vue-head - Manipulating the meta information of the HEAD tag for Vue.js ⬆ back to top Other Formats 📄 PDF ⬆ back to top 🌐 Translations 🇮🇩 Bahasa 🇧🇷 Brazilian Portuguese 🇨🇳 Chinese (Simplified) 🇩🇪 German 🇮🇹 Italian 🇯🇵 Japanese 🇰🇷 Korean 🇷🇺 Russian/Русский 🇪🇸 Spanish 🇹🇷 Turkish/Türkçe ⬆ back to top 🤝 Contributing Open an issue or a pull request to suggest changes or additions. Guide The HEAD repository consists of two branches: 1. master This branch consists of the README.md file that is automatically reflected on the htmlhead.dev website. All changes to the content of the cheat sheet as such should be directed to this file. Please follow these steps for pull requests: Modify only one tag, or one related set of tags at a time Use double quotes on attributes Don’t include a trailing slash in self-closing elements — the HTML5 spec says they’re optional Consider including a link to documentation that supports your change 2. gh-pages This branch is responsible for the htmlhead.dev website. We use Jekyll to deploy the README.md Markdown file through GitHub Pages. All website related modifications must be directed here. You may want to go through the Jekyll Docs and understand how Jekyll works before working on this branch. Contributors Check out all the super awesome contributors. 👤 Author Josh Buchea Twitter: @joshbuchea Github: @joshbuchea Show your support Please ⭐️ this repository if this project helped you! 📝 License ⬆ back to top"},{"title":"The Anatomy of an HTML element","url":"//html/the-anatomy-of-an-html-element/","tags":["HTML","beginner","HTML Elements"],"body":"The Anatomy of an HTML element The main parts of our element are: The opening tag: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins or starts to take effect — in this case where the start of the paragraph is. The closing tag: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results. The content: This is the content of the element, which in this case is just text. The element: The opening tag plus the closing tag plus the content equals the element."},{"title":"Hyperlinks","url":"//html/hyperlinks/","tags":["HTML","beginner","Hyperlinks","HTML Elements"],"body":"Hyperlinks Anatomy of a link A basic link is created by wrapping the text (or other content, see Block level links) you want to turn into a link inside an [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) element, and giving it an [href](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) attribute (also known as a Hypertext Reference , or target) that will contain the web address you want the link to point to. I'm creating a link to the Mozilla homepage. This gives us the following result: I’m creating a link to the Mozilla homepage. Adding supporting information with the title attribute Another attribute you may want to add to your links is title; this is intended to contain supplementary useful information about the link, such as what kind of information the page contains, or things to be aware of. For example: I'm creating a link to the Mozilla homepage. This gives us the following result (the title will come up as a tooltip when the link is hovered over): I’m creating a link to the Mozilla homepage. Note: A link title is only revealed on mouse hover, which means that people relying on keyboard controls to navigate web pages will have difficulty accessing title information. If a title’s information is truly important to the usability of page, then you should present it in a manner that will be accessible to all users, for example by putting it in the regular text. Active learning: creating your own example link Active learning time: we’d like you to create an HTML document using your local code editor (our getting started template would do just fine.) Inside the HTML body, try adding one or more paragraphs or other types of content you already know about. Turn some of the content into links. Include title attributes. Block level links As mentioned before, you can turn just about any content into a link, even block level elements. If you had an image you wanted to turn into a link, you could just put the image between  tags. Note: You’ll find out a lot more about using images on the Web in a future article. A quick primer on URLs and paths To fully understand link targets, you need to understand URLs and file paths. This section gives you the information you need to achieve this. A URL, or Uniform Resource Locator is simply a string of text that defines where something is located on the Web. For example Mozilla’s English homepage is located at https://www.mozilla.org/en-US/. URLs use paths to find files. Paths specify where in the filesystem the file you are interested in is located. Let’s look at a simple example of a directory structure (see the creating-hyperlinks directory.) The root of this directory structure is called creating-hyperlinks. When working locally with a web site, you will have one directory that the whole site goes inside. Inside the root, we have an index.html file and a contacts.html. In a real website, index.html would be our home page or landing page (a web page that serves as the entry point for a website or a particular section of a website.). There are also two directories inside our root — pdfs and projects. These each have a single file inside them — a PDF (project-brief.pdf) and an index.html file, respectively. Note how you can quite happily have two index.html files in one project as long as they are in different locations in the filesystem. Many web sites do. The second index.html would perhaps be the main landing page for project-related information. Same directory: If you wanted to include a hyperlink inside index.html (the top level index.html) pointing to contacts.html, you would just need to specify the filename of the file you want to link to, as it is in the same directory as the current file. So the URL you would use is contacts.html: Want to contact a specific staff member? Find details on our contacts page. Moving down into subdirectories: If you wanted to include a hyperlink inside index.html (the top level index.html) pointing to projects/index.html, you would need to go down into the projects directory before indicating the file you want to link to. This is done by specifying the directory’s name, then a forward slash, then the name of the file. so the URL you would use is projects/index.html: Visit my project homepage. Moving back up into parent directories: If you wanted to include a hyperlink inside projects/index.html pointing to pdfs/project-brief.pdf, you’d have to go up a directory level, then back down into the pdf directory. “Go up a directory” is indicated using two dots — .. — so the URL you would use is ../pdfs/project-brief.pdf: A link to my project brief. Note: You can combine multiple instances of these features into complex URLs, if needed, e.g. ../../../complex/path/to/my/file.html. Document fragments It is possible to link to a specific part of an HTML document (known as a document fragment), rather than just to the top of the document. To do this you first have to assign an [id](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id) attribute to the element you want to link to. It normally makes sense to link to a specific heading, so this would look something like the following: Mailing address Then to link to that specific id, you’d include it at the end of the URL, preceded by a hash/pound symbol, for example: Want to write us a letter? Use our mailing address. You can even use the document fragment reference on its own to link to another part of the same document: The company mailing address can be found at the bottom of this page. Absolute versus relative URLs Two terms you’ll come across on the Web are absolute URL and relative URL: absolute URL: Points to a location defined by its absolute location on the web, including protocol and domain name. So for example, if an index.html page is uploaded to a directory called projects that sits inside the root of a web server, and the web site’s domain is http://www.example.com, the page would be available at http://www.example.com/projects/index.html (or even just http://www.example.com/projects/, as most web servers just look for a landing page such as index.html to load if it is not specified in the URL.) An absolute URL will always point to the same location, no matter where it is used. relative URL: Points to a location that is relative to the file you are linking from, more like what we looked at in the previous section. For example, if we wanted to link from our example file at http://www.example.com/projects/index.html to a PDF file in the same directory, the URL would just be the filename — e.g. project-brief.pdf — no extra information needed. If the PDF was available in a subdirectory inside projects called pdfs, the relative link would be pdfs/project-brief.pdf (the equivalent absolute URL would be http://www.example.com/projects/pdfs/project-brief.pdf.) A relative URL will point to different places depending on the actual location of the file you refer from — for example if we moved our index.html file out of the projects directory and into the root of the web site (the top level, not in any directories), the pdfs/project-brief.pdf relative URL link inside it would now point to a file located at http://www.example.com/pdfs/project-brief.pdf, not a file located at http://www.example.com/projects/pdfs/project-brief.pdf. Of course, the location of the project-brief.pdf file and pdfs folder won’t suddenly change because you moved the index.html file — this would make your link point to the wrong place, so it wouldn’t work if clicked on. You need to be careful! Link best practices There are some best practices to follow when writing links. Let’s look at these now. Use clear link wording It’s easy to throw links up on your page. That’s not enough. We need to make our links accessible to all readers, regardless of their current context and which tools they prefer. For example: Screenreader users like jumping around from link to link on the page, and reading links out of context. Search engines use link text to index target files, so it is a good idea to include keywords in your link text to effectively describe what is being linked to. Visual readers skim over the page rather than reading every word, and their eyes will be drawn to page features that stand out, like links. They will find descriptive link text useful. Let’s look at a specific example: Good link text: Download Firefox Download Firefox Bad link text: Click here to download Firefox Click here to download Firefox Other tips: Don’t repeat the URL as part of the link text — URLs look ugly, and sound even uglier when a screen reader reads them out letter by letter. Don’t say “link” or “links to” in the link text — it’s just noise. Screen readers tell people there’s a link. Visual users will also know there’s a link, because links are generally styled in a different colour and underlined (this convention generally shouldn’t be broken, as users are so used to it.) Keep your link label as short as possible — long links especially annoy screen reader users, who have to hear the whole thing read out. Minimize instances where multiple copies of the same text are linked to different places. This can cause problems for screenreader users, who will often bring up a list of the links out of context — several links all labelled “click here”, “click here”, “click here” would be confusing. Use relative links wherever possible From the description above, you might think that it is a good idea to just use absolute links all the time; after all, they don’t break when a page is moved like relative links. However, you should use relative links wherever possible when linking to other locations within the same website (when linking to another website, you will need to use an absolute link): For a start, it is a lot easier to scan your code — relative URLs are generally a lot shorter than absolute URLs, which makes reading code much easier. Second, it is more efficient to use relative URLs wherever possible. When you use an absolute URL, the browser starts by looking up the real location of the server on the Domain Name System (DNS; see How the web works for more information), then it goes to that server and finds the file that is being requested. With a relative URL on the other hand, the browser just looks up the file that is being requested, on the same server. So if you use absolute URLs where relative URLs would do, you are constantly making your browser do extra work, meaning that it will perform less efficiently. Linking to non-HTML resources — leave clear signposts When linking to a resource that will be downloaded (like a PDF or Word document) or streamed (like video or audio) or has another potentially unexpected effect (opens a popup window, or loads a Flash movie), you should add clear wording to reduce any confusion. It can be quite annoying for example: If you are on a low bandwidth connection, click a link and then a multiple megabyte download starts unexpectedly. If you haven’t got the Flash player installed, click a link and then suddenly get taken to a page that requires Flash. Let’s look at some examples, to see what kind of text can be used here: Download the sales report (PDF, 10MB) Watch the video (stream opens in separate tab, HD quality) Play the car game (requires Flash) Use the download attribute when linking to a download When you are linking to a resource that is to be downloaded rather than opened in the browser, you can use the download attribute to provide a default save filename. Here’s an example with a download link to the latest Windows version of Firefox: Download Latest Firefox for Windows (64-bit) (English, US) Active learning: creating a navigation menu For this exercise, we’d like you to link some pages together with a navigation menu to create a multi-page website. This is one common way in which a website is created — the same page structure is used on every page, including the same navigation menu, so when links are clicked it gives the impression that you are staying in the same place, and different content is being brought up. You’ll need to make local copies of the following four pages, all in the same directory (see also the navigation-menu-start directory for a full file listing): index.html projects.html pictures.html social.html You should: Add an unordered list in the indicated place on one page, containing the names of the pages to link to. A navigation menu is usually just a list of links, so this is semantically ok. Turn each page name into a link to that page. Copy the navigation menu across to each page. On each page, remove just the link to that same page — it is confusing and pointless for a page to include a link to itself, and the lack of a link acts a good visual reminder of what page you are currently on. The finished example should end up looking something like this: Note: If you get stuck, or are not sure if you have got it right, you can check the navigation-menu-marked-up directory to see the correct answer. E-mail links It is possible to create links or buttons that, when clicked, open a new outgoing email message rather than linking to a resource or page. This is done using the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) element and the mailto: URL scheme. In its most basic and commonly used form, a mailto: link simply indicates the email address of the intended recipient. For example: Send email to nowhere This results in a link that looks like this: Send email to nowhere. In fact, the email address is even optional. If you leave it out (that is, your [href](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) is simply “mailto:”), a new outgoing email window will be opened by the user’s mail client that has no destination address specified yet. This is often useful as “Share” links that users can click to send an email to an address of their choosing. Specifying details In addition to the email address, you can provide other information. In fact, any standard mail header fields can be added to the mailto URL you provide. The most commonly used of these are “subject”, “cc”, and “body” (which is not a true header field, but allows you to specify a short content message for the new email). Each field and its value is specified as a query term. Here’s an example that includes a cc, bcc, subject and body: Send mail with cc, bcc, subject and body Note: The values of each field must be URL-encoded, that is with non-printing characters (invisible characters like tabs, carriage returns, and page breaks) and spaces percent-escaped. Also note the use of the question mark (?) to separate the main URL from the field values, and ampersands (&) to separate each field in the mailto: URL. This is standard URL query notation. Read The GET method to understand what URL query notation is more comonly used for. Here are a few other sample mailto URLs: mailto: mailto:nowhere@mozilla.org mailto:nowhere@mozilla.org,nobody@mozilla.org mailto:nowhere@mozilla.org?cc=nobody@mozilla.org mailto:nowhere@mozilla.org?cc=nobody@mozilla.org&subject=This%20is%20the%20subject"},{"title":"Nesting HTML Elements","url":"//html/nesting-html-elements/","tags":["HTML","beginner","Nesting Elements","HTML Elements"],"body":"Nesting elements Elements can be placed within other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word “very” in a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong) element, which means that the word is to be strongly emphasized: My cat is very grumpy. You do however need to make sure that your elements are properly nested: in the example above, we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect: My cat is very grumpy. The elements have to open and close correctly, so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don’t do it! Block versus inline elements There are two important categories of elements in HTML which you should know about. They are block-level elements and inline elements. Block-level elements form a visible block on a page — they will appear on a new line from whatever content went before it, and any content that goes after it will also appear on a new line. Block-level elements tend to be structural elements on the page that represent, for example, paragraphs, lists, navigation menus, footers, and so on. A block-level element wouldn’t be nested inside an inline element, but it might be nested inside another block-level element. Inline elements are those that are contained within block-level elements and surround only small parts of the document’s content, not entire paragraphs and groupings of content. An inline element will not cause a new line to appear in the document; they would normally appear inside a paragraph of text, for example an [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) element (hyperlink) or emphasis elements such as [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em) or [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong). Take the following example: firstsecondthirdfourthfifthsixth [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em) is an inline element, so as you can see below, the first three elements sit on the same line as one another with no space in between. On the other hand, [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p) is a block-level element, so each element appears on a new line, with space above and below each (the spacing is due to default CSS styling that the browser applies to paragraphs). Note: HTML5 redefined the element categories in HTML5: see Element content categories. While these definitions are more accurate and less ambiguous than the ones that went before, they are a lot more complicated to understand than “block” and “inline”, so we will stick with these throughout this topic. Note: The terms “block” and “inline”, as used in this topic, should not be confused with the types of CSS boxes with the same names. While they correlate by default, changing the CSS display type doesn’t change the category of the element and doesn’t affect which elements it can contain and which elements it can be contained in. One of the reasons why HTML5 dropped these terms was to prevent this rather common confusion. Note: You can find useful reference pages that include lists of block and inline elements — see Block-level elements and Inline elements."},{"title":"Empty Elements","url":"//html/empty-elements/","tags":["HTML","beginner","HTML Elements","Empty Elements"],"body":"Empty Elements Empty elements Not all elements follow the above pattern of an opening tag, content, and a closing tag. Some elements consist only of a single tag, which is usually used to insert/embed something in the document at the place it is included. For example, the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) element embeds an image file onto a page in the position it is included in: Note: Empty elements are also sometimes called void elements."},{"title":"HTML Text Fundamentals ","url":"//html/html-text-fundamentals/","tags":["html","beginner","Fundamentals"],"body":"HTML text fundamentals The basics: Headings and Paragraphs Most structured text consists of headings and paragraphs, whether you are reading a story, a newspaper, a college textbook, a magazine, etc. Structured content makes the reading experience easier and more enjoyable. In HTML, each paragraph has to be wrapped in a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p) element, like so: I am a paragraph, oh yes I am. Each heading has to be wrapped in a heading element: I am the title of the story. There are six heading elements — [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1), [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2), [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3), [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4), [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5), and [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6). Each element represents a different level of content in the document;  represents the main heading,  represents subheadings,  represents sub-subheadings, and so on. Implementing structural hierarchy As an example, in a story the  element would represent the title of the story,  elements would represent the title of each chapter,  elements would represent sub-sections of each chapter, and so on. The Crushing BoreBy Chris MillsChapter 1: The dark nightIt was a dark night. Somewhere, an owl hooted. The rain lashed down on the ...Chapter 2: The eternal silenceOur protagonist could not so much as a whisper out of the shadowy figure ...The specter speaksSeveral more hours had passed, when all of a sudden the specter sat bolt upright and exclaimed, \"Please have mercy on my soul!\" It’s really up to you what exactly the elements involved represent, as long as the hierarchy makes sense. You just need to bear in mind a few best practices as you create such structures: Preferably you should just use a single  per page — this is the top level heading, and all others sit below this in the hierarchy. Make sure you use the headings in the correct order in the hierarchy. Don’t use  elements to represent subheadings, followed by  elements to represent sub-subheadings — that doesn’t make sense and will lead to weird results. Of the six heading levels available, you should aim to use no more than three per page, unless you feel it is necessary. Documents with many levels (i.e., a deep heading hierarchy) become unwieldy and difficult to navigate. On such occasions, it is advisable to spread the content over multiple pages if possible. Why do we need structure? To answer this question, let’s take a look at text-start.html — the starting point of our running example for this article (a nice hummus recipe). You should save a copy of this file on your local machine, as you’ll need it for the exercises later on. This document’s body currently contains multiple pieces of content — they aren’t marked up in any way, but they are separated with linebreaks (Enter/Return pressed to go onto the next line). However, when you open the document in your browser, you’ll see that the text appears as a big chunk! This is because there are no elements to give the content structure, so the browser does not know what is a heading and what is a paragraph. Furthermore: Users looking at a web page tend to scan quickly to find relevant content, often just reading the headings to begin with (we usually spend a very short time on a web page). If they can’t see anything useful within a few seconds, they’ll likely get frustrated and go somewhere else. Search engines indexing your page consider the contents of headings as important keywords for influencing the page’s search rankings. Without headings, your page will perform poorly in terms of SEO (Search Engine Optimization). Severely visually impaired people often don’t read web pages; they listen to them instead. This is done with software called a screen reader. This software provides ways to get fast access to given text content. Among the various techniques used, they provide an outline of the document by reading out the headings, allowing their users to find the information they need quickly. If headings are not available, they will be forced to listen to the whole document read out loud. To style content with CSS, or make it do interesting things with JavaScript, you need to have elements wrapping the relevant content, so CSS/JavaScript can effectively target it. We therefore need to give our content structural markup. Why do we need semantics? Semantics are relied on everywhere around us — we rely on previous experience to tell us what the function of an everyday object is; when we see something, we know what its function will be. So, for example, we expect a red traffic light to mean “stop”, and a green traffic light to mean “go”. Things can get tricky very quickly if the wrong semantics are applied (Do any countries use red to mean “go”? I hope not.) In a similar vein, we need to make sure we are using the correct elements, giving our content the correct meaning, function, or appearance. In this context the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1) element is also a semantic element, which gives the text it wraps around the role (or meaning) of “a top level heading on your page.” This is a top level heading By default, the browser will give it a large font size to make it look like a heading (although you could style it to look like anything you wanted using CSS). More importantly, its semantic value will be used in multiple ways, for example by search engines and screen readers (as mentioned above). On the other hand, you could make any element look like a top level heading. Consider the following: Is this a top level heading? This is a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span) element. It has no semantics. You use it to wrap content when you want to apply CSS to it (or do something to it with JavaScript) without giving it any extra meaning (you’ll find out more about these later on in the course). We’ve applied some CSS to it to make it look like a top level heading, but since it has no semantic value, it will not get any of the extra benefits described above. It is a good idea to use the relevant HTML element for the job. Lists Now let’s turn our attention to lists. Lists are everywhere in life — from your shopping list to the list of directions you subconsciously follow to get to your house every day, to the lists of instructions you are following in these tutorials! Lists are everywhere on the Web too, and we’ve got three different types to worry about. Unordered Unordered lists are used to mark up lists of items for which the order of the items doesn’t matter — let’s take a shopping list as an example. milk eggs bread hummus Every unordered list starts off with a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) element — this wraps around all the list items: milk eggs bread hummus The last step is to wrap each list item in a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li) (list item) element: milkeggsbreadhummus Active learning: Marking up an unordered list Try editing the live sample below to create your very own HTML unordered list. Ordered Ordered lists are lists in which the order of the items does matter — let’s take a set of directions as an example: Drive to the end of the road Turn right Go straight across the first two roundabouts Turn left at the third roundabout The school is on your right, 300 meters up the road The markup structure is the same as for unordered lists, except that you have to wrap the list items in an [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol) element, rather than : Drive to the end of the roadTurn rightGo straight across the first two roundaboutsTurn left at the third roundaboutThe school is on your right, 300 meters up the road Active learning: Marking up an ordered list Try editing the live sample below to create your very own HTML ordered list. Active learning: Marking up our recipe page So at this point in the article, you have all the information you need to mark up our recipe page example. You can choose to either save a local copy of our text-start.html starting file and do the work there, or do it in the editable example below. Doing it locally will probably be better, as then you’ll get to save the work you are doing, whereas if you fill it in to the editable example, it will be lost the next time you open the page. Both have pros and cons. If you get stuck, you can always press the Show solution button, or check out our text-complete.html example on our github repo. Nesting lists It is perfectly ok to nest one list inside another one. You might want to have some sub-bullets sitting below a top level bullet. Let’s take the second list from our recipe example: Remove the skin from the garlic, and chop coarsely.Remove all the seeds and stalk from the pepper, and chop coarsely.Add all the ingredients into a food processor.Process all the ingredients into a paste.If you want a coarse \"chunky\" hummus, process it for a short time.If you want a smooth hummus, process it for a longer time. Since the last two bullets are very closely related to the one before them (they read like sub-instructions or choices that fit below that bullet), it might make sense to nest them inside their own unordered list, and put that list inside the current fourth bullet. This would look like so: Remove the skin from the garlic, and chop coarsely.Remove all the seeds and stalk from the pepper, and chop coarsely.Add all the ingredients into a food processor.Process all the ingredients into a paste. If you want a coarse \"chunky\" hummus, process it for a short time.If you want a smooth hummus, process it for a longer time. Try going back to the previous active learning example and updating the second list like this. Emphasis and importance In human language, we often emphasise certain words to alter the meaning of a sentence, and we often want to mark certain words as important or different in some way. HTML provides various semantic elements to allow us to mark up textual content with such effects, and in this section, we’ll look at a few of the most common ones. Emphasis When we want to add emphasis in spoken language, we stress certain words, subtly altering the meaning of what we are saying. Similarly, in written language we tend to stress words by putting them in italics. For example, the following two sentences have different meanings. I am glad you weren’t late. I am glad you weren’t late. The first sentence sounds genuinely relieved that the person wasn’t late. In contrast, the second one sounds sarcastic or passive-aggressive, expressing annoyance that the person arrived a bit late. In HTML we use the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em) (emphasis) element to mark up such instances. As well as making the document more interesting to read, these are recognised by screen readers and spoken out in a different tone of voice. Browsers style this as italic by default, but you shouldn’t use this tag purely to get italic styling. To do that, you’d use a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span) element and some CSS, or perhaps an [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i) element (see below). I am glad you weren't late. Strong importance To emphasize important words, we tend to stress them in spoken language and bold them in written language. For example: This liquid is highly toxic. I am counting on you. Do not be late! In HTML we use the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong) (strong importance) element to mark up such instances. As well as making the document more useful, again these are recognized by screen readers and spoken in a different tone of voice. Browsers style this as bold text by default, but you shouldn’t use this tag purely to get bold styling. To do that, you’d use a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span) element and some CSS, or perhaps a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b) element (see below). This liquid is highly toxic.I am counting on you. Do not be late! You can nest strong and emphasis inside one another if desired: This liquid is highly toxic — if you drink it, you may die. Active learning: Let’s be important! In this active learning section, we have provided an editable example. Inside it, we’d like you to try adding emphasis and strong importance to the words you think need them, just to have some practice. Italic, bold, underline… The elements we’ve discussed so far have clearcut associated semantics. The situation with [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b), [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i), and [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u) is somewhat more complicated. They came about so people could write bold, italics, or underlined text in an era when CSS was still supported poorly or not at all. Elements like this, which only affect presentation and not semantics, are known as presentational elements and should no longer be used, because as we’ve seen before, semantics is so important to accessibility, SEO, etc. HTML5 redefined ,  and  with new, somewhat confusing, semantic roles. Here’s the best rule of thumb: it’s likely appropriate to use , , or  to convey a meaning traditionally conveyed with bold, italics, or underline, provided there is no more suitable element. However, it always remains critical to keep an accessibility mindset. The concept of italics isn’t very helpful to people using screen readers, or to people using a writing system other than the Latin alphabet. [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i) is used to convey a meaning traditionally conveyed by italic: Foreign words, taxonomic designation, technical terms, a thought… [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b) is used to convey a meaning traditionally conveyed by bold: Key words, product names, lead sentence… [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u) is used to convey a meaning traditionally conveyed by underline: Proper name, misspelling… A kind warning about underline: People strongly associate underlining with hyperlinks. Therefore, on the Web, it’s best to underline only links. Use the  element when it’s semantically appropriate, but consider using CSS to change the default underline to something more appropriate on the Web. The example below illustrates how it can be done. The Ruby-throated Hummingbird (Archilochus colubris) is the most common hummingbird in Eastern North America. The menu was a sea of exotic words like vatrushka, nasi goreng and soupe à l'oignon. Someday I'll learn how to spel better. Slice two pieces of bread off the loaf. Insert a tomato slice and a leaf of lettuce between the slices of bread. Comments In HTML, as with most programming languages, there is a mechanism available to write comments in the code — comments are ignored by the browser and are invisible to the user, and their purpose is to allow you to include comments in the code to say how your code works, what the different parts of the code do, and so on. This can be very useful if you return to a code base that you’ve not worked on for a long time, and can’t remember what you did — or if you hand your code over for someone else to work on. To turn a section of HTML content into a comment, you need to wrap it in the special markers , for example: Special Characters In HTML, the characters ,\",' and & are special characters. They are parts of the HTML syntax itself, so how do you include one of these characters in your text? For example, if you really want to use an ampersand or less-than sign, and not have it interpreted as code. We have to use character references — special codes that represent characters, and can be used in these exact circumstances. Each character reference is started with an ampersand (&), and ended by a semicolon (;). Copy of Untitled The character reference equivalent could be easily remembered because the words it uses can be seen as less than for ‘In HTML, you define a paragraph using the element.In HTML, you define a paragraph using the &lt;p&gt; element. In the live output below, you can see that the first paragraph has gone wrong, because the browser thinks that the second instance of  is starting a new paragraph. The second paragraph looks fine, because we have replaced the angle brackets with character references. Note: A chart of all the available HTML character entity references can be found on Wikipedia: List of XML and HTML character entity references. Note that you don’t need to use entity references for any other symbols, as modern browsers will handle the actual symbols just fine as long, as your HTML’s character encoding is set to UTF-8."},{"title":"Display ","url":"//css/display/","tags":["css","display","Fundamentals"],"body":"Display The display CSS property sets whether an element is treated as a block or inline elementand the layout used for its children, such as flow layout, grid or flex. Formally, the display property sets an element’s inner and outer display types. The outer type sets an element’s participation in flow layout; the inner type sets the layout of children. Some values of display are fully defined in their own individual specifications; for example the detail of what happens when display: flex is declared is defined in the CSS Flexible Box Model specification. See the table at the end of this document for all of the individual specifications. Syntax The CSS display property is specified using keyword values. Keyword values are grouped into six value categories: .container { display: [ || ] | | | ; } Outside [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-outside)These keywords specify the element’s outer display type, which is essentially its role in flow layout. Valid  values: blockThe element generates a block element box, generating line breaks both before and after the element when in the normal flow.inlineThe element generates one or more inline element boxes that do not generate line breaks before or after themselves. In normal flow, the next element will be on the same line if there is spacerun-in The element generates a run-in box. If the adjacent sibling of the element defined as display: run-in box is a block box, the run-in box becomes the first inline box of the block box that follows it. Run-in elements act like inlines or blocks, depending on the surrounding elements. That is: If the run-in box contains a block box, same as block. If a block box follows the run-in box, the run-in box becomes the first inline box of the block box. If an inline box follows, the run-in box becomes a block box. Note: Browsers that support the two value syntax, on finding the outer value only, such as when display: block or display: inline is specified, will set the inner value to flow. This will result in expected behavior; for example if you specify an element to be block, you would expect that the children of that element would participate in block and inline normal flow layout. Inside [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-inside)These keywords specify the element’s inner display type, which defines the type of formatting context that its contents are laid out in (assuming it is a non-replaced element). Valid  values: flow The element lays out its contents using flow layout (block-and-inline layout).If its outer display type is inline or run-in, and it is participating in a block or inline formatting context, then it generates an inline box. Otherwise it generates a block container box.Depending on the value of other properties (such as [position](https://developer.mozilla.org/en-US/docs/Web/CSS/position), [float](https://developer.mozilla.org/en-US/docs/Web/CSS/float), or [overflow](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow)) and whether it is itself participating in a block or inline formatting context, it either establishes a new block formatting context (BFC) for its contents or integrates its contents into its parent formatting context.flow-rootThe element generates a block element box that establishes a new block formatting context, defining where the formatting root lies.tableThese elements behave like HTML [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) elements. It defines a block-level box.flexThe element behaves like a block element and lays out its content according to the flexbox model.gridThe element behaves like a block element and lays out its content according to the grid model.ruby The element behaves like an inline element and lays out its content according to the ruby formatting model. It behaves like the corresponding HTML [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby) elements. Note: Browsers that support the two value syntax, on finding the inner value only, such as when display: flex or display: grid is specified, will set their outer value to block. This will result in expected behavior; for example if you specify an element to be display: grid, you would expect that the box created on the grid container would be a block level box. List Item [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-listitem)The element generates a block box for the content and a separate list-item inline box. A single value of list-item will cause the element to behave like a list item. This can be used together with [list-style-type](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type) and [list-style-position](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position). list-item can also be combined with any [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-outside) keyword and the flow or flow-root [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-inside) keywords. Note: In browsers that support the two-value syntax, if no inner value is specified it will default to flow. If no outer value is specified, the principal box will have an outer display type of block. Internal [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-internal)Some layout models such as table and ruby have a complex internal structure, with several different roles that their children and descendants can fill. This section defines those “internal” display values, which only have meaning within that particular layout mode. Valid  values: table-row-groupThese elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody) HTML elements.table-header-groupThese elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead) HTML elements.table-footer-groupThese elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot) HTML elements.table-rowThese elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr) HTML elements.table-cellThese elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td) HTML elements.table-column-groupThese elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup) HTML elements.table-columnThese elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col) HTML elements.table-captionThese elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption) HTML elements.ruby-base These elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb) HTML elements.ruby-text These elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt) HTML elements.ruby-base-container These elements behave like  HTML elements generated as anonymous boxes.ruby-text-container These elements behave like [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc) HTML elements. Box [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-box)These values define whether an element generates display boxes at all. Valid  values: contents  These elements don’t produce a specific box by themselves. They are replaced by their pseudo-box and their child boxes. Please note that the CSS Display Level 3 spec defines how the contents value should affect “unusual elements” — elements that aren’t rendered purely by CSS box concepts such as replaced elements. See Appendix B: Effects of display: contents on Unusual Elements for more details.Due to a bug in browsers this will currently remove the element from the accessibility tree — screen readers will not look at what’s inside. See the Accessibility concerns section below for more details.noneTurns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off.To have an element take up the space that it would normally take, but without actually rendering anything, use the [visibility](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility) property instead. Legacy [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-legacy)CSS 2 used a single-keyword syntax for the display property, requiring separate keywords for block-level and inline-level variants of the same layout mode. Valid  values: inline-blockThe element generates a block element box that will be flowed with surrounding content as if it were a single inline box (behaving much like a replaced element would).It is equivalent to inline flow-root.inline-tableThe inline-table value does not have a direct mapping in HTML. It behaves like an HTML [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) element, but as an inline box, rather than a block-level box. Inside the table box is a block-level context.It is equivalent to inline table.inline-flexThe element behaves like an inline element and lays out its content according to the flexbox model.It is equivalent to inline flex.inline-gridThe element behaves like an inline element and lays out its content according to the grid model.It is equivalent to inline grid. Which syntax should you use now? The Level 3 specification details two values for the display property — enabling the specification of the outer and inner display type explicitly — but this is not yet well-supported by browsers. The  methods allow the same results with single keyword values, and should be favoured by developers until the two keyword values are better supported. For example, using two values you might specify an inline flex container as follows: .container { display: inline flex; } This can currently be specified using a single value. .container { display: inline-flex; } For more information on these changes to the specification, see the article Adapting to the new two-value syntax of display. Global /* Global values */ display: inherit; display: initial; display: unset; Guides and Examples The individual pages for the different types of value that display can have set on it feature multiple examples of those values in action — see the Syntax section. In addition, see the following material, which covers the various values of display in depth. Adapting to the new two-value syntax of display CSS Flow Layout (display: block, display: inline) Block and Inline Layout in Normal Flow Flow Layout and Overflow Flow Layout and Writing Modes Formatting Contexts Explained In Flow and Out of Flow display: flex Basic concepts of flexbox Aligning Items in a Flex Container Controlling Ratios of Flex Items Along the Main Axis Cross-browser Flexbox mixins Mastering Wrapping of Flex Items Ordering Flex Items Relationship of flexbox to other layout methods Backwards Compatibility of Flexbox Typical use cases of Flexbox display: grid Basic Concepts of Grid Layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes CSS Grid Layout and Accessibility CSS Grid Layout and Progressive Enhancement Realizing common layouts using grids Accessibility concerns display: none Using a display value of none on an element will remove it from the accessibility tree. This will cause the element and all its descendant elements to no longer be announced by screen reading technology. If you want to visually hide the element, a more accessible alternative is to use a combination of properties to remove it visually from the screen but keep it parseable by assistive technology such as screen readers. display: contents Current implementations in most browsers will remove from the accessibility tree any element with a display value of contents (but descendants will remain). This will cause the element itself to no longer be announced by screen reading technology. This is incorrect behavior according to the CSS specification. [More accessible markup with display: contents Hidde de Vries](https://hiddedevries.nl/en/blog/2018-04-21-more-accessible-markup-with-display-contents) [Display: Contents Is Not a CSS Reset Adrian Roselli](http://adrianroselli.com/2018/05/display-contents-is-not-a-css-reset.html) Tables Changing the display value of a [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) element to block, grid, or flex will alter its representation in the accessibility tree. This will cause the table to no longer be announced properly by screen reading technology. Short note on what CSS display properties do to table semantics — The Paciello Group [Hidden content for better a11y Go Make Things](https://gomakethings.com/hidden-content-for-better-a11y/) MDN Understanding WCAG, Guideline 1.3 explanations [Understanding Success Criterion 1.3.1 W3C Understanding WCAG 2.0](https://www.w3.org/TR/UNDERSTANDING-WCAG20/content-structure-separation-programmatic.html) Specifications Untitled Untitled Browser compatibility Update compatibility data on GitHub Untitled # # ### ### # ### What are we missing? LegendFull support Full supportPartial support Partial supportNo support No supportExperimental. Expect behavior to change in the future.Experimental. Expect behavior to change in the future.Non-standard. Expect poor cross-browser support.Non-standard. Expect poor cross-browser support.Deprecated. Not for use in new websites.Deprecated. Not for use in new websites.See implementation notes.See implementation notes.User must explicitly enable this feature.User must explicitly enable this feature.Uses a non-standard name.Uses a non-standard name.Requires a vendor prefix or different name for use.Requires a vendor prefix or different name for use."},{"title":"Flex Box","url":"//css/flex-box/","tags":["css","flex box"],"body":"Flex Box Since flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”). If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end). main axis - The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the flex-direction property (see below). **main-start main-end** - The flex items are placed within the container starting from main-start and going to main-end. main size - A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension. cross axis - The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction. **cross-start cross-end** - Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side. cross size - The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension. Properties for the Parent(flex container) display This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. /* or inline-flex */ Note that CSS columns have no effect on a flex container. flex-direction This establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns. .container { flex-direction: row | row-reverse | column | column-reverse; } row (default): left to right in ltr; right to left in rtl row-reverse: right to left in ltr; left to right in rtl column: same as row but top to bottom column-reverse: same as row-reverse but bottom to top flex-wrap By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. .container{ flex-wrap: nowrap | wrap | wrap-reverse; } nowrap (default): all flex items will be on one line wrap: flex items will wrap onto multiple lines, from top to bottom. wrap-reverse: flex items will wrap onto multiple lines from bottom to top. There are some visual demos of flex-wrap here. flex-flow (Applies to: parent flex container element) This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container’s main and cross axes. The default value is row nowrap. flex-flow: || justify-content This defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line. .container { justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe; } flex-start (default): items are packed toward the start of the flex-direction. flex-end: items are packed toward the end of the flex-direction. start: items are packed toward the start of the writing-mode direction. end: items are packed toward the end of the writing-mode direction. left: items are packed toward left edge of the container, unless that doesn’t make sense with the flex-direction, then it behaves like start. right: items are packed toward right edge of the container, unless that doesn’t make sense with the flex-direction, then it behaves like start. center: items are centered along the line space-between: items are evenly distributed in the line; first item is on the start line, last item on the end line space-around: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies. space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example, space-between never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts. The safest values are flex-start, flex-end, and center. There are also two additional keywords you can pair with these values: safe and unsafe. Using safe ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). align-items This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross axis (perpendicular to the main-axis). .container { align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe; } stretch (default): stretch to fill the container (still respect min-width/max-width) flex-start / start / self-start: items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the flex-direction rules or the writing-mode rules. flex-end / end / self-end: items are placed at the end of the cross axis. The difference again is subtle and is about respecting flex-direction rules vs. writing-mode rules. center: items are centered in the cross-axis baseline: items are aligned such as their baselines align The safe and unsafe modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. align-content This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis. Note: this property has no effect when there is only one line of flex items. .container { align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe; } flex-start / start: items packed to the start of the container. The (more supported) flex-start honors the flex-direction while start honors the writing-mode direction. flex-end / end: items packed to the end of the container. The (more support) flex-end honors the flex-direction while end honors the writing-mode direction. center: items centered in the container space-between: items evenly distributed; the first line is at the start of the container while the last one is at the end space-around: items evenly distributed with equal space around each line space-evenly: items are evenly distributed with equal space around them stretch (default): lines stretch to take up the remaining space The safe and unsafe modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. Properties for the Children(flex items) order By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. /* default is 0 */ flex-grow This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least). /* default 0 */ Negative numbers are invalid. flex-shrink This defines the ability for a flex item to shrink if necessary. /* default 1 */ Negative numbers are invalid. flex-basis This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means “look at my width or height property” (which was temporarily done by the main-size keyword until deprecated). The content keyword means “size it based on the item’s content” - this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren max-content, min-content, and fit-content do. /* default auto */ If set to 0, the extra space around content isn’t factored in. If set to auto, the extra space is distributed based on its flex-grow value. See this graphic. flex This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The second and third parameters (flex-shrink and flex-basis) are optional. Default is 0 1 auto. .item { flex: none | [ ? || ] } It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently. align-self This allows the default alignment (or the one specified by align-items ) to be overridden for individual flex items. Please see the align-items explanation to understand the available values. .item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } Note that float, clear and vertical-align have no effect on a flex item. Examples Let’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox. /* Or whatever *//* Or whatever *//* Or whatever *//* Magic! */ This relies on the fact a margin set to auto in a flex container absorb extra space. So setting a vertical margin of auto will make the item perfectly centered in both axes. Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. /* We first create a flex layout context *//* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; *//* Then we define how is distributed the remaining space */ Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large *//* This aligns items to the end line on main-axis *//* Medium screens *//* When on medium sized screens, we center it by evenly distributing empty space around items *//* Small screens *//* On small screens, we are no longer using row direction but column */ Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. /* We tell all items to be 100% width, via flex-basis *//* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer *//* Medium screens *//* We tell both sidebars to share a row *//* Large screens *//* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ Flexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an “old”, “tweener”, and “new” versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through Autoprefixer, which handles the fallbacks very well. Alternatively, here’s a Sass @mixin to help with some of the prefixing, which also gives you an idea of what kind of things need to be done: @mixin flexbox() { display: -webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex; } @mixin flex($values) { -webkit-box-flex: $values; -moz-box-flex: $values; -webkit-flex: $values; -ms-flex: $values; flex: $values; } @mixin order($val) { -webkit-box-ordinal-group: $val; -moz-box-ordinal-group: $val; -ms-flex-order: $val; -webkit-order: $val; order: $val; } .wrapper { @include flexbox();} .item { @include flex(1 200px);@include order(2);}"},{"title":"How CSS Works","url":"//css/how-css-works/","tags":["css","Fundamentals"],"body":"How CSS works How does CSS actually work? When a browser displays a document, it must combine the document’s content with its style information. It processes the document in a number of stages, which we’ve listed below. Bear in mind that this is a very simplified version of what happens when a browser loads a webpage, and that different browsers will handle the process in different ways. But this is roughly what happens. The browser loads the HTML (e.g. receives it from the network). It converts the HTML into a DOM (Document Object Model). The DOM represents the document in the computer’s memory. The DOM is explained in a bit more detail in the next section. The browser then fetches most of the resources that are linked to by the HTML document, such as embedded images and videos … and linked CSS! JavaScript is handled a bit later on in the process, and we won’t talk about it here to keep things simpler. The browser parses the fetched CSS, and sorts the different rules by their selector types into different “buckets”, e.g. element, class, ID, and so on. Based on the selectors it finds, it works out which rules should be applied to which nodes in the DOM, and attaches style to them as required (this intermediate step is called a render tree). The render tree is laid out in the structure it should appear in after the rules have been applied to it. The visual display of the page is shown on the screen (this stage is called painting). The following diagram also offers a simple view of the process. About the DOM A DOM has a tree-like structure. Each element, attribute, and piece of text in the markup language becomes a DOM node in the tree structure. The nodes are defined by their relationship to other DOM nodes. Some elements are parents of child nodes, and child nodes have siblings. Understanding the DOM helps you design, debug and maintain your CSS because the DOM is where your CSS and the document’s content meet up. When you start working with browser DevTools you will be navigating the DOM as you select items in order to see which rules apply. A real DOM representation Rather than a long, boring explanation, let’s look at an example to see how a real HTML snippet is converted into a DOM. Take the following HTML code: Let's use: CascadingStyleSheets In the DOM, the node corresponding to our  element is a parent. Its children are a text node and the three nodes corresponding to our  elements. The SPAN nodes are also parents, with text nodes as their children: P ├─ \"Let's use:\" ├─ SPAN | └─ \"Cascading\" ├─ SPAN | └─ \"Style\" └─ SPAN └─ \"Sheets\" This is how a browser interprets the previous HTML snippet —it renders the above DOM tree and then outputs it in the browser like so: Applying CSS to the DOM Let’s say we added some CSS to our document, to style it. Again, the HTML is as follows: Let's use: CascadingStyleSheets Let’s suppose we apply the following CSS to it: span { border: 1px solid black; background-color: lime; } The browser will parse the HTML and create a DOM from it, then parse the CSS. Since the only rule available in the CSS has a span selector, the browser will be able to sort the CSS very quickly! It will apply that rule to each one of the three s, then paint the final visual representation to the screen. The updated output is as follows: In our Debugging CSS article in the next module we will be using browser DevTools to debug CSS problems, and will learn more about how the browser interprets CSS. What happens if a browser encounters CSS it doesn’t understand? In an earlier lesson I mentioned that browsers do not all implement new CSS at the same time. In addition, many people are not using the latest version of a browser. Given that CSS is being developed all the time, and is therefore ahead of what browsers can recognise, you might wonder what happens if a browser encounters a CSS selector or declaration it doesn’t recognise. The answer is that it does nothing, and just moves on to the next bit of CSS! If a browser is parsing your rules, and encounters a property or value that it doesn’t understand, it ignores it and moves on to the next declaration. It will do this if you have made an error and misspelled a property or value, or if the property or value is just too new and the browser doesn’t yet support it. Similarly, if a browser encounters a selector that it doesn’t understand, it will just ignore the whole rule and move on to the next one. In the example below I have used the British English spelling for color, which makes that property invalid as it is not recognised. So my paragraph has not been colored blue. All of the other CSS have been applied however; only the invalid line is ignored. I want this text to be large, bold and blue.p { font-weight: bold; colour: blue; /* incorrect spelling of the color property */ font-size: 200%; } Open in CodePenOpen in JSFiddle This behavior is very useful. It means that you can use new CSS as an enhancement, knowing that no error will occur if it is not understood — the browser will either get the new feature or not. Coupled with the way that the cascade works, and the fact that browsers will use the last CSS they come across in a stylesheet when you have two rules with the same specificity you can also offer alternatives for browsers that don’t support new CSS. This works particularly well when you want to use a value that is quite new and not supported everywhere. For example, some older browsers do not support calc() as a value. I might give a fallback width for a box in pixels, then go on to give a width with a calc() value of 100% - 50px. Old browsers will use the pixel version, ignoring the line about calc() as they don’t understand it. New browsers will interpret the line using pixels, but then override it with the line using calc() as that line appears later in the cascade. .box { width: 500px; width: calc(100% - 50px); } We will look at many more ways to support varying browsers in later lessons."},{"title":"How CSS Works","url":"//css/fonts-and-text/","tags":["css","Fundamentals","Fonts"],"body":"Fonts and Text"},{"title":"How CSS Works","url":"//css/forms/","tags":["css","Forms"],"body":"Forms"},{"title":"Getting Started with CSS","url":"//css/gettingstarted-with-css/","tags":["css","Fundamentals"],"body":"Getting Started with CSS Adding CSS to the document The very first thing we need to do is to tell the HTML document that we have some CSS rules we want it to use. There are three different ways to apply CSS to an HTML document that you’ll commonly come across, however, for now, we will look at the most usual and useful way of doing so — linking CSS from the head of your document. Create a file in the same folder as your HTML document and save it as styles.css. The .css extension shows that this is a CSS file. To link styles.css to index.html add the following line somewhere inside the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head) of the HTML document: This [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) element tells the browser that we have a stylesheet, using the rel attribute, and the location of that stylesheet as the value of the href attribute. You can test that the CSS works by adding a rule to styles.css. Using your code editor add the following to your CSS file: h1 { color: red; } Save your HTML and CSS files and reload the page in a web browser. The level one heading at the top of the document should now be red. If that happens, congratulations — you have successfully applied some CSS to an HTML document. If that doesn’t happen, carefully check that you’ve typed everything correctly. You can continue to work in styles.css locally, or you can use our interactive editor below to continue with this tutorial. The interactive editor acts as if the CSS in the first panel is linked to the HTML document, just as we have with our document above. Styling HTML elements By making our heading red we have already demonstrated that we can target and style an HTML element. We do this by targeting an element selector — this is a selector that directly matches an HTML element name. To target all paragraphs in the document you would use the selector p. To turn all paragraphs green you would use: p { color: green; } You can target multiple selectors at once, by separating the selectors with a comma. If I want all paragraphs and all list items to be green my rule looks like this: p, li { color: green; } Try this out in the interactive editor below (edit the code boxes), or in your local CSS document. Changing the default behavior of elements When we look at a well-marked up HTML document, even something as simple as our example, we can see how the browser is making the HTML readable by adding some default styling. Headings are large and bold and our list has bullets. This happens because browsers have internal stylesheets containing default styles, which they apply to all pages by default; without them all of the text would run together in a clump and we would have to style everything from scratch. All modern browsers display HTML content by default in pretty much the same way. However, you will often want something other than the choice the browser has made. This can be done by simply choosing the HTML element that you want to change, and using a CSS rule to change the way it looks. A good example is our , an unordered list. It has list bullets, and if I decide I don’t want those bullets I can remove them like so: li { list-style-type: none; } Try adding this to your CSS now. The list-style-type property is a good property to look at on MDN to see which values are supported. Take a look at the page for [list-style-type](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type) and you will find an interactive example at the top of the page to try some different values in, then all allowable values are detailed further down the page. Looking at that page you will discover that in addition to removing the list bullets you can change them — try changing them to square bullets by using a value of square. Adding a class So far we have styled elements based on their HTML element names. This works as long as you want all of the elements of that type in your document to look the same. Most of the time that isn’t the case and so you will need to find a way to select a subset of the elements without changing the others. The most common way to do this is to add a class to your HTML element and target that class. In your HTML document, add a class attribute to the second list item. Your list will now look like this: class=\"special\" In your CSS you can target the class of special by creating a selector that starts with a full stop character. Add the following to your CSS file: .special { color: orange; font-weight: bold; } Save and refresh to see what the result is. You can apply the class of special to any element on your page that you want to have the same look as this list item. For example, you might want the  in the paragraph to also be orange and bold. Try adding a class of special to it, then reload your page and see what happens. Sometimes you will see rules with a selector that lists the HTML element selector along with the class: li.special { color: orange; font-weight: bold; } This syntax means “target any li element that has a class of special”. If you were to do this then you would no longer be able to apply the class to a  or another element by simply adding the class to it; you would have to add that element to the list of selectors: li.special, span.special { color: orange; font-weight: bold; } As you can imagine, some classes might be applied to many elements and you don’t want to have to keep editing your CSS every time something new needs to take on that style. Therefore it is sometimes best to bypass the element and simply refer to the class, unless you know that you want to create some special rules for one element alone, and perhaps want to make sure they are not applied to other things. Styling things based on their location in a document There are times when you will want something to look different based on where it is in the document. There are a number of selectors that can help you here, but for now we will look at just a couple. In our document are two  elements — one inside a paragraph and the other inside a list item. To select only an  that is nested inside an  element I can use a selector called the descendant combinator, which simply takes the form of a space between two other selectors. Add the following rule to your stylesheet. li em { color: rebeccapurple; } This selector will select any  element that is inside (a descendant of) an . So in your example document, you should find that the  in the third list item is now purple, but the one inside the paragraph is unchanged. Something else you might like to try is styling a paragraph when it comes directly after a heading at the same hierarchy level in the HTML. To do so place a + (an adjacent sibling combinator) between the selectors. Try adding this rule to your stylesheet as well: h1 + p { font-size: 200%; } The live example below includes the two rules above. Try adding a rule to make a span red, if it is inside a paragraph. You will know if you have it right as the span in the first paragraph will be red, but the one in the first list item will not change color. Styling things based on state The final type of styling we shall take a look at in this tutorial is the ability to style things based on their state. A straightforward example of this is when styling links. When we style a link we need to target the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) (anchor) element. This has different states depending on whether it is unvisited, visited, being hovered over, focused via the keyboard, or in the process of being clicked (activated). You can use CSS to target these different states — the CSS below styles unvisited links pink and visited links green. a:link { color: pink; } a:visited { color: green; } You can change the way the link looks when the user hovers over it, for example removing the underline, which is achieved by in the next rule: a:hover { text-decoration: none; } In the live example below, you can play with different values for the various states of a link. I have added the rules above to it, and now realise that the pink color is quite light and hard to read — why not change that to a better color? Can you make the links bold? We have removed the underline on our link on hover. You could remove the underline from all states of a link. It is worth remembering however that in a real site, you want to ensure that visitors know that a link is a link. Leaving the underline in place, can be an important clue for people to realize that some text inside a paragraph can be clicked on — this is the behavior they are used to. As with everything in CSS, there is the potential to make the document less accessible with your changes — we will aim to highlight potential pitfalls in appropriate places."},{"title":"Grid","url":"//css/css-grid/","tags":["css","Grid"],"body":"Grid"},{"title":"Images Media and Form Elements","url":"//css/Images-media-and-form-elements/","tags":["css","Forms","Images","Media"],"body":"Images, media, and form elements Replaced elements Images and video are described as replaced elements. This means that CSS cannot affect the internal layout of these elements — only their position on the page amongst other elements. As we will see however, there are various things that CSS can do with an image. Certain replaced elements, such as images and video, are also described as having an aspect ratio. This means that it has a size in both the horizontal (x) and vertical (y) dimensions, and will be displayed using the intrinsic dimensions of the file by default. Sizing images As you already know from following these lessons, everything in CSS generates a box. If you place an image inside a box that is smaller or larger than the intrinsic dimensions of the image file in either direction, it will either appear smaller than the box, or overflow the box. You need to make a decision about what happens with the overflow. In the example below we have two boxes, both 200 pixels in size: One contains an image which is smaller than 200 pixels — it is smaller than the box and doesn’t stretch to fill it. The other is larger than 200 pixels and overflows the box. So what can we do about the overflowing issue? As we learned our previous lesson, a common technique is to make the [max-width](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width) of an image 100%. This will enable the image to become smaller in size than the box but not larger. This technique will work with other replaced elements such as [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video)s, or [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)s. Try adding max-width: 100% to the  element in the example above. You will see that the smaller image remains unchanged, but the larger one becomes smaller to fit into the box. You can make other choices about images inside containers. For example, you may want to size an image so it completely covers a box. The [object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property can help you here. When using object-fit the replaced element can be sized to fit a box in a variety of ways. Below we have used the value cover, which sizes the image down, maintaining the aspect ratio so that it neatly fills the box. As the aspect ratio is maintained some parts of the image will be cropped by the box. If we use contain as a value the image will be scaled down until it is small enough to fit inside the box. This will result in “letterboxing” if it is not the same aspect ratio as the box. You could also try the value of fill, which will fill the box but not maintain the aspect ratio. Replaced elements in layout When using various CSS layout techniques on replaced elements, you may well find that they behave slightly differently to other elements. For example, in a flex or grid layout elements are stretched by default to fill the entire area. Images will not stretch, and instead will be aligned to the start of the grid area or flex container. You can see this happening in the example below where we have a two column, two row grid container, which has four items in it. All of the  elements have a background color and stretch to fill the row and column. The image, however, does not stretch. If you are following these lessons in order then you may not have looked at layout yet. Just keep in mind that replaced elements, when they become part of a grid or flex layout, have different default behaviors, essentially to avoid them being stretched strangely by the layout. To force the image to stretch to fill the grid cell it is in, you’d have to do something like following: img { width: 100%; height: 100%; } This would however stretch the image, so probably isn’t what you’d want to do. Form elements Form elements are a tricky issue when it comes to styling with CSS, and the HTML Forms module contains detailed guides to styling form elements, which I will not fully reproduce here. There are a few key things worth highlighting in this section of the article. Many form controls are added to your page by way of the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) element — this defines simple form fields such as text inputs, through to more complex fields added in HTML5 such as color and date pickers. There are some additional elements, such as [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) for multiline text input, and also elements used to contain and label parts of forms such as [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset)and [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend). HTML5 also contains attributes that enable web developers to indicate which fields are required, and even the type of content that needs to be entered. If the user enters something unexpected, or leaves a required field blank, the browser can show an error message. Different browsers are inconsistent in how much styling and customization they allow for such items. Styling text input elements Elements that allow for text input, such as , specific types such as , and the  element are quite easy to style and tend to behave just like other boxes on your page. The default styling of these elements will differ however based on the operating system and browser that your user visits the site with. In the example below we have styled some text inputs using CSS — you can see that things such as borders, margins and padding all apply as you would expect. We are using attribute selectors to target the different input types. Try changing how this form looks by adjusting the borders, adding background colors to the fields, and changing fonts and padding. Important: You should take care when changing the styling of form elements to make sure it is still obvious to the user they are form elements. You could create a form input with no borders and background that is almost indistinguishable from the content around it, but this would make it very hard to recognise and fill in. As explained in the lessons on form styling in the HTML part of this course, many of the more complex input types are rendered by the operating system and are inaccessible to styling. You should therefore always assume that forms are going to look quite different for different visitors and test complex forms in a number of browsers. Inheritance and form elements In some browsers, form elements do not inherit font styling by default. Therefore if you want to be sure that your form fields use the font defined on the body, or on a parent element, you should add this rule to your CSS. button, input, select, textarea { font-family : inherit; font-size : 100%; } Form elements and box-sizing Across browsers form elements use different box sizing rules for different widgets. You learned about the box-sizing property in our box model lesson and you can use this knowledge when styling forms to ensure a consistent experience when setting widths and heights on form elements. For consistency it is a good idea to set margins and padding to 0 on all elements, then add these back in when styling particular controls button, input, select, textarea { box-sizing: border-box; padding: 0; margin: 0; } Other useful settings In addition to the rules mentioned above, you should also set overflow: auto on s to stop IE showing a scrollbar when there is no need for one: textarea { overflow: auto; } Putting it all together into a “reset” As a final step, we can wrap up the various properties discussed above into the following “form reset” to provide a consistent base to work from. This includes all the items mentioned in the last three sections: button, input, select, textarea { font-family: inherit; font-size: 100%; box-sizing: border-box; padding: 0; margin: 0; } textarea { overflow: auto; } Note: Normalizing stylesheets are used by many developers to create a set of baseline styles to use on all projects. Typically these do similar things to those described above, making sure that anything different across browsers is set to a consistent default before you do your own work on the CSS. They are not as important as they once were, as browsers are typically more consistent than in the past. However if you want to take a look at one example, check out Normalize.css, which is a very popular stylesheet used as a base by many projects. For further information on styling forms, take a look at the two articles in the HTML section of these guides. Styling HTML Forms Advanced Styling for HTML Forms"},{"title":"How CSS is structered","url":"//css/how-css-is-structered/","tags":["css","Fundamentals"],"body":"How CSS is structered Applying CSS to your HTML The first thing we will look at are the three methods of applying CSS to a document. External stylesheet In the Getting started with CSS we linked an external stylesheet to our page. This is the most common and useful method of attaching CSS to a document as you can link the CSS to multiple pages, allowing you to style them all with the same stylesheet. In most cases, the different pages of a site will all look pretty much the same, therefore you can use the same set of rules for the basic look and feel. An external stylesheet is when you have your CSS written in a separate file with a .cssextension, and you reference it from an HTML  element: My CSS experimentHello World!This is my first CSS example The CSS file might look something like this: h1 { color: blue; background-color: yellow; border: 1px solid black; } p { color: red; } The href attribute of the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) element needs to reference a file on your filesystem. In the example above, the CSS file is in the same folder as the HTML document, but you could place it somewhere else and adjust the specified path to suit, for example: Internal stylesheet An internal stylesheet is where you don’t have an external CSS file, but instead place your CSS inside a [Hello World!This is my first CSS example This can be useful in some circumstances (maybe you’re working with a content management system where you can’t modify the CSS files directly), but it isn’t quite as efficient as external stylesheets — in a website, the CSS would need to be repeated across every page, and updated in multiple places if changes were required. Inline styles Inline styles are CSS declarations that affect one element only, contained within a styleattribute: My CSS experimentHello World!This is my first CSS example Please don’t do this, unless you really have to! It is really bad for maintenance (you might have to update the same information multiple times per document), and it also mixes your presentational CSS information with your HTML structural information, making the code harder to read and understand. Keeping different types of code separated makes for a much easier job for all who work on the code. There are a few places where inline styles are more common, or even advisable. You might have to resort to using them if your working environment is really restrictive (perhaps your CMS only allows you to edit the HTML body). You will also see them used a lot in HTML email in order to get compatibility with as many email clients as possible. Playing with the CSS in this article There is a lot of CSS to play with in this article. To do so, we’d recommend creating a new directory/folder on your computer, and inside it creating a copy of the following two files: index.html: My CSS experimentsCreate your test HTML here styles.css: /* Create your test CSS here */ p { color: red; } Then, when you come across some CSS you want to experiment with, replace the HTML  contents with some HTML to style, and start adding CSS to style it inside your CSS file. If you are not using a system where you can easily create files, you can instead use the interactive editor below to experiment. Read on, and have fun! Selectors You can’t talk about CSS without meeting selectors, and we have already discovered several different types in the Getting started with CSS tutorial. A selector is how we target something in our HTML document in order to apply styles to it. If your styles are not applying then it is likely that your selector does not match the thing you think it should match. Each CSS rule starts with a selector or a list of selectors in order to tell the browser which element or elements the rules should apply to. All of the following are examples of valid selectors, or lists of selectors. h1 a:link .manythings #onething * .box p .box p:first-child h1, h2, .intro Try creating some CSS rules that use the above selectors, and some HTML to be styled by them. If you don’t know what some of the above syntax means, try searching for it on MDN! Note: You will learn a lot more about selectors in our CSS selectors tutorials, in the next module. Specificity There will often be scenarios where two selectors could select the same HTML element. Consider the stylesheet below where I have a rule with a p selector that will set paragraphs to blue, and also a class that will set selected elements red. .special { color: red; } p { color: blue; } Let’s say that in our HTML document we have a paragraph with a class of special. Both rules could apply, so which one wins? What color do you think our paragraph will become? What color am I? The CSS language has rules to control which rule will win in the event of a collision — these are called cascade and specificity. In the below code block we have defined two rules for the p selector, but the paragraph ends up being colored blue. This is because the declaration that sets it to blue appears later in the stylesheet, and later styles override earlier ones. This is the cascade in action. p { color: red; } p { color: blue; } However, in the case of our earlier block with the class selector and the element selector, the class will win, making the paragraph red — even thought it appears earlier in the stylesheet. A class is described as being more specific, or having more specificity than the element selector, so it wins. Try the above experiment for yourself — add the HTML to your experiment, then add the two p { ... } rules to your stylesheet. Next, change the first p selector to .specialto see how it changes the styling. The rules of specificity and the cascade can seem a little complicated at first and are easier to understand once you have built up further CSS knowledge. In our Cascade and inheritancearticle, which you’ll get to in the next module, I’ll explain this in detail, including how to calculate specificity. For now, remember that this exists, and that sometimes CSS might not apply like you expect it to because something else in your stylesheet has a higher specificity. Identifying that more than one rule could apply to an element is the first step in fixing such issues. Properties and values At its most basic level, CSS consists of two building blocks: Properties: Human-readable identifiers that indicate which stylistic features (e.g. [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size), [width](https://developer.mozilla.org/en-US/docs/Web/CSS/width), [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)) you want to change. Values: Each specified property is given a value, which indicates how you want to change those stylistic features (e.g. what you want to change the font, width or background color to.) The below image highlights a single property and value. The property name is color, and the value blue. A property paired with a value is called a CSS declaration. CSS declarations are put within CSS Declaration Blocks. This next image shows our CSS with the declaration block highlighted. Finally, CSS declaration blocks are paired with selectors to produce CSS Rulesets (or CSS Rules). Our image contains two rules, one for the h1 selector and one for the p selector. The rule for h1 is highlighted. Setting CSS properties to specific values is the core function of the CSS language. The CSS engine calculates which declarations apply to every single element of a page in order to appropriately lay it out and style it. What is important to remember is that both properties and values are case-sensitive in CSS. The property and value in each pair is separated by a colon (:). Try looking up different values of the following properties, and writing CSS rules that apply them to different HTML elements: [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) [width](https://developer.mozilla.org/en-US/docs/Web/CSS/width) [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) [border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) Important: If a property is unknown or if a value is not valid for a given property, the declaration is deemed invalid and is completely ignored by the browser’s CSS engine. Important: In CSS (and other web standards), US spelling has been agreed on as the standard to stick to where language uncertainty arises. For example, color should alwaysbe spelled color. colour won’t work. Functions While most values are relatively simple keywords or numeric values, there are some possible values which take the form of a function. An example would be the calc() function. This function allows you to do simple math from within your CSS, for example: The inner box is 90% - 30px..outer { border: 5px solid black; } .box { padding: 10px; width: calc(90% - 30px); background-color: rebeccapurple; color: white; } This renders like so: Open in CodePenOpen in JSFiddle A function consists of the function name, and then some brackets into which the allowed values for that function are placed. In the case of the calc() example above I am asking for the width of this box to be 90% of the containing block width, minus 30 pixels. This isn’t something I can calculate ahead of time and just enter the value into the CSS, as I don’t know what 90% will be. As with all values, the relevant page on MDN will have usage examples so you can see how the function works. Another example would be the various values for [transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform), such as rotate(). .box { margin: 30px; width: 100px; height: 100px; background-color: rebeccapurple; transform: rotate(0.8turn) } The output from the above code looks like this: Open in CodePenOpen in JSFiddle Try looking up different values of the following properties, and writing CSS rules that apply them to different HTML elements: [transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) [background-image](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image), in particular gradient values [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color), in particular rgb/rgba/hsl/hsla values @rules As yet, we have not encountered [@rules](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule) (pronounced “at-rules”). These are special rules giving CSS some instruction on how to behave. Some @rules are simple with the rule name and a value. For example, to import an additional stylesheet into your main CSS stylesheet you can use @import: @import 'styles2.css'; One of the most common @rules you will come across is @media, which allows you to use media queries to apply CSS only when certain conditions are true (e.g. when the screen resolution is above a certain amount, or the screen is wider than a certain width). In the below CSS, we have a stylesheet that gives the  element a pink background color. However, we then use @media to create a section of our stylesheet that will only be applied in browsers with a viewport wider than 30em. If the browser is wider than 30em then the background color will be blue. body { background-color: pink; } @media (min-width: 30em) { body { background-color: blue; } } You will encounter other @rules throughout these tutorials. See if you can add a media query to your CSS that changes styles based on the viewport width. Change the width of your browser window to see the result. Shorthands Some properties like [font](https://developer.mozilla.org/en-US/docs/Web/CSS/font), [background](https://developer.mozilla.org/en-US/docs/Web/CSS/background), [padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding), [border](https://developer.mozilla.org/en-US/docs/Web/CSS/border), and [margin](https://developer.mozilla.org/en-US/docs/Web/CSS/margin) are called shorthand properties — this is because they allow you to set several property values in a single line, saving time and making your code neater in the process. For example, this line: /* In 4-value shorthands like padding and margin, the values are applied in the order top, right, bottom, left (clockwise from the top). There are also other shorthand types, for example 2-value shorthands, which set padding/margin for top/bottom, then left/right */ padding: 10px 15px 15px 5px; Does the same thing as all these together: padding-top: 10px; padding-right: 15px; padding-bottom: 15px; padding-left: 5px; Whereas this line: background: red url(bg-graphic.png) 10px 10px repeat-x fixed; Does the same thing as all these together: background-color: red; background-image: url(bg-graphic.png); background-position: 10px 10px; background-repeat: repeat-x; background-scroll: fixed; We won’t attempt to teach these exhaustively now — you’ll come across many examples later on in the course, and you are advised to look up the shorthand property names in our CSS reference to find out more. Try adding the above declarations to your CSS to see how it affects the styling of your HTML. Try experimenting with some different values. Warning: While shorthands often allow you to miss out values, they will then reset any values that you do not include to their initial values. This ensures that a sensible set of values are used. However, this might be confusing if you were expecting the shorthand to only change the values you passed in. Comments As with HTML, you are encouraged to make comments in your CSS, to help you understand how your code works when coming back to it after several months, and to help others coming to the code to work on it understand it. Comments in CSS begin with /* and end with */. In the below code block I have used comments to mark the start of different distinct code sections. This is useful to help you navigate your codebase as it gets larger — you can search for the comments in your code editor. /* Handle basic element styling */ /* -------------------------------------------------------------------------------------------- */ body { font: 1em/150% Helvetica, Arial, sans-serif; padding: 1em; margin: 0 auto; max-width: 33em; } @media (min-width: 70em) { /* Let's special case the global font size. On large screen or window, we increase the font size for better readability */ body { font-size: 130%; } } h1 {font-size: 1.5em;} /* Handle specific elements nested in the DOM */ /* -------------------------------------------------------------------------------------------- */ div p, #id:first-line { background-color: red; border-radius: 3px; } div p { margin: 0; padding: 1em; } div p + p { padding-top: 0; } Comments are also useful for temporarily commenting out certain parts of the code for testing purposes, for example if you are trying to find which part of your code is causing an error. In the next example I have commented out the rules for the .special selector. /*.special { color: red; }*/ p { color: blue; } Add some comments to your CSS, to get used to using them. Whitespace White space means actual spaces, tabs and new lines. In the same manner as HTML, the browser tends to ignore much of the whitespace inside your CSS; a lot of the whitespace is just there to aid readability. In our first example below we have each declaration (and rule start/end) on its own line — this is arguably a good way to write CSS, as it makes it easy to maintain and understand: body { font: 1em/150% Helvetica, Arial, sans-serif; padding: 1em; margin: 0 auto; max-width: 33em; } @media (min-width: 70em) { body { font-size: 130%; } } h1 { font-size: 1.5em; } div p, #id:first-line { background-color: red; border-radius: 3px; } div p { margin: 0; padding: 1em; } div p + p { padding-top: 0; } You could write exactly the same CSS like so, with most of the whitespace removed — this is functionally identical to the first example, but I’m sure you’ll agree that it is somewhat harder to read: body {font: 1em/150% Helvetica, Arial, sans-serif; padding: 1em; margin: 0 auto; max-width: 33em;} @media (min-width: 70em) { body {font-size: 130%;} } h1 {font-size: 1.5em;} div p, #id:first-line {background-color: red; border-radius: 3px;} div p {margin: 0; padding: 1em;} div p + p {padding-top: 0;} The code layout you choose is usually a personal preference, although when you start to work in teams, you may find that the existing team has its own styleguide that specifies an agreed convention to follow. The whitespace between the properties and their values you need to be careful of in CSS. For example, the following declarations are valid CSS: margin: 0 auto; padding-left: 10px; But the following are invalid: margin: 0auto; padding- left: 10px;"},{"title":"Organizing your CSS","url":"//css/organizing-your-css/","tags":["css","Organization","Fundamentals"],"body":"Organizing your CSS Tips to keep your CSS tidy Here are some general suggestions for ways to keep your stylesheets organised and tidy. Does your project have a coding style guide? If you are working with a team on an existing project, the first thing to check is whether the project has an existing style guide for CSS. The team style guide should always win over your own personal preferences. There often isn’t a right or wrong way to do things, but consistency is important. For example, have a look at the CSS guidelines for MDN code examples. Keep it consistent If you get to set the rules for the project or are working alone, then the most important thing to do is to keep things consistent. Consistency can be applied in all sorts of ways, such as using the same naming conventions for classes, choosing one method of describing color, or maintaining consistent formatting (for example will you use tabs or spaces to indent your code? If spaces, how many spaces?) Having a set of rules you always follow reduces the amount of mental overhead needed when writing CSS, as some of the decisions are already made. Formatting readable CSS There are a couple of ways you will see CSS formatted. Some developers put all of the rules onto a single line, like so: .box { background-color: #567895; } h2 { background-color: black; color: white; } Other developers prefer to break everything onto a new line: .box { background-color: #567895; } h2 { background-color: black; color: white; } CSS doesn’t mind which one you use. We personally find it is more readable to have each property and value pair on a new line. Comment your CSS Adding comments to your CSS will help any future developer work with your CSS file, but will also help you when you come back to the project after a break. /* This is a CSS comment It can be broken onto multiple lines. */ A good tip is to add a block of comments between logical sections in your stylesheet too, to help locate different sections quickly when scanning through, or even give you something to search for to jump right into that part of the CSS. If you use a string which won’t appear in the code you can jump from section to section by searching for it — below we have used ||. /* || General styles */ ... /* || Typography */ ... /* || Header and Main Navigtion */ ... You don’t need to comment every single thing in your CSS, as much of it will be self-explanatory. What you should comment are the things where you made a particular decision for a reason. You may have used a CSS property in a specific way to get around older browser incompatibilities, for example: .box { background-color: red; /* fallback for older browsers that don't support gradients */ background-image: linear-gradient(to right, #ff0000, #aa0000); } Perhaps you followed a tutorial to achieve something, and the CSS is a little non-obvious. In that case you could add the URL of the tutorial to the comments. You will thank yourself when you come back to this project in a year or so, and can vaguely remember there was a great tutorial about that thing, but where is it? Create logical sections in your stylesheet It is a good idea to have all of the common styling first in the stylesheet. This means all of the styles which will generally apply unless you do something special with that element. You will typically have rules set up for: body p h1, h2, h3, h4, h5 ul and ol The table properties Links In this section of the stylesheet we are providing default styling for the type on the site, setting up a default style for data tables and lists and so on. /* || GENERAL STYLES */ body { ... } h1, h2, h3, h4 { ... } ul { ... } blockquote { ... } After this section we could define a few utility classes, for example a class that removes the default list style for lists we’re going to display as flex items or in some other way. If you have a few things you know you will want to apply to lots of different elements, they can come in this section. /* || UTILITIES */ .nobullets { list-style: none; margin: 0; padding: 0; } ... Then we can add everything that is used sitewide. That might be things like the basic page layout, the header, navigation styling, and so on. /* || SITEWIDE */ .main-nav { ... } .logo { ... } Finally we will include CSS for specific things, broken down by the context, page or even component in which they are used. /* || STORE PAGES */ .product-listing { ... } .product-box { ... } By ordering things in this way, we at least have an idea in which part of the stylesheet we will be looking for something that we want to change. Avoid overly-specific selectors If you create very specific selectors you will often find that you need to duplicate chunks of your CSS to apply the same rules to another element. For example, you might have something like the below selector, which applies the rule to a  with a class of box inside an with a class of main. article.main p.box { border: 1px solid #ccc; } If you then wanted to apply the same rules to something outside of main, or to something other than a , you would have to add another selector to these rules or create a whole new ruleset. Instead, you could create a class called box and apply that anywhere. .box { border: 1px solid #ccc; } There will be times when making something more specific makes sense, however this will generally be an exception rather than usual practice. Break large stylesheets into multiple smaller ones In particular in cases where you have very different styles for distinct parts of the site, you might want to have a stylesheet that includes all the global rules and then smaller ones that include the specific rules needed for those sections. You can link to multiple stylesheets from one page, and the normal rules of the cascade apply, with rules in stylesheets linked later coming after rules in stylesheets linked earlier. For example, we might have an online store as part of the site, with a lot of CSS used only for styling the product listings and forms needed for the store. It would make sense to have those things in a different stylesheet, only linked to on store pages. This can make it easier to keep your CSS organised, and also means that if multiple people are working on the CSS you will have fewer situations where two people need to work on the same stylesheet at once, leading to conflicts in source control. Other tools that can help CSS itself doesn’t have much in the way of in-built organisation, therefore you need to do the work to create consistency and rules around how you write CSS. The web community has also developed various tools and approaches that can help you to manage larger CSS projects. As they may be helpful for you to investigate, and you are likely to come across these things when working with other people, we’ve included a short guide to some of these. CSS methodologies Instead of needing to come up with your own rules for writing CSS, you may benefit from adopting one of the approaches already designed by the community and tested across many projects. These methodologies are essentially CSS coding guides that take a very structured approach to writing and organising CSS. Typically they tend to result in more verbose use of CSS than you might have if you wrote and optimised every selector to a custom set of rules for that project. However, you do gain a lot of structure by adopting one and, as many of these systems are very widely used, other developers are more likely to understand the approach you are using and be able to write their CSS in the same way, rather than having to work out your own personal methodology from scratch. OOCSS Most of the approaches that you will encounter owe something to the concept of Object Oriented CSS (OOCSS), an approach made popular by the work of Nicole Sullivan. The basic idea of OOCSS is to separate your CSS into reusable objects, which can be used anywhere you need on your site. The standard example of OOCSS is the pattern described as The Media Object. This is a pattern with a fixed size image, video or other element on one side, and flexible content on the other. It’s a pattern we see all over websites for comments, listings, and so on. If you are not taking an OOCSS approach you might create custom CSS for the different places this pattern is used, for example creating a class called comment with a bunch of rules for the component parts, then a class called list-item with almost the same rules as the commentclass except for some tiny differences. The differences between these two components is that the list-item has a bottom border, and images in comments have a border whereas list-item images do not. .comment { display: grid; grid-template-columns: 1fr 3fr; } .comment img { border: 1px solid grey; } .comment .content { font-size: .8rem; } .list-item { display: grid; grid-template-columns: 1fr 3fr; border-bottom: 1px solid grey; } .list-item .content { font-size: .8rem; } In OOCSS, you would create one pattern called media that would have all of the common CSS for both patterns — a base class for things that are generally the shape of the media object. Then we’d add an additional class to deal with those tiny differences, thus extending that styling in specific ways. .media { display: grid; grid-template-columns: 1fr 3fr; } .media .content { font-size: .8rem; } .comment img { border: 1px solid grey; } .list-item { border-bottom: 1px solid grey; } In your HTML the comment would need both the media and comment classes applied: The list-item would have media and list-item applied: The work that Nicole Sullivan did in describing this approach and promoting it means that even people who are not strictly following an OOCSS approach today will generally be reusing CSS in this way — it has entered our understanding as a good way to approach things in general. BEM BEM stands for Block Element Modifier. In BEM a block is a standalone entity such as a button, menu, or logo. An element is something like a list item or a title that is tied to the block it is in. A modifier is a flag on a block or element that changes the styling or behavior. You will be able to recognise code that uses BEM due to the extensive use of dashes and underscores in the CSS classes. For example, look at the classes applied to this HTML from the page about BEM Naming conventions: The additional classes are similar to those used in the OOCSS example, however they use the strict naming conventions of BEM. BEM is widely used in larger web projects and many people write their CSS in this way. It is likely that you will come across examples, even in tutorials, that use BEM syntax, without mentioning why the CSS is structured in such a way. To read more about the system read BEM 101 on CSS Tricks. Other common systems There are a large number of these systems in use. Other popular approaches include Scalable and Modular Architecture for CSS (SMACSS), created by Jonathan Snook, ITCSS from Harry Roberts, and Atomic CSS (ACSS), originally created by Yahoo!. If you come across a project that uses one of these approaches then the advantage is that you will be able to search and find many articles and guides to help you understand how to code in the same style. The disadvantage of using such a system is that they can seem overly complex, especially for smaller projects. Build systems for CSS Another way to organise CSS is to take advantage of some of the tooling that is available for front-end developers, which allows you to take a slightly more programmatic approach to writing CSS. There are a number of tools which we refer to as pre-processors and post-processors. A pre-processor runs over your raw files and turns them into a stylesheet, whereas a post-processor takes your finished stylesheet and does something to it — perhaps to optimize it in order that it will load faster. Using any of these tools will require that your development environment can run the scripts that do the pre and post-processing. Many code editors can do this for you, or you can install command line tools to help. The most popular pre-processor is Sass. This is not a Sass tutorial, so I will briefly explain a couple of the things that Sass can do, which are really helpful in terms of organisation, even if you don’t use any of the other Sass features. Defining variables CSS now has native custom properties, making this feature increasingly less important, however one of the reasons you might use Sass is to be able to define all of the colors and fonts used in a project as settings, then use that variable around the project. This means that if you realise you have used the wrong shade of blue, you only need change it in one place. If we created a variable called $base-color as in the first line below, we could then use it through the stylesheet anywhere that required that color. $base-color: #c6538c; .alert { border: 1px solid $base-color; } Once compiled to CSS, you would end up with the following CSS in the final stylesheet. .alert {   border: 1px solid #c6538c; } Compiling component stylesheets I mentioned above that one way to organise CSS is to break down stylesheets into smaller stylesheets. When using Sass you can take this to another level and have lots of very small stylesheets — even going as far as having a separate stylesheet for each component. By using the include functionality in Sass these can then all be compiled together into one, or a small number of stylesheets to actually link into your website. You can see how one developer approaches the problem in this blog post. Note: A simple way to try out Sass is to use CodePen — you can enable Sass for your CSS in the Settings for a Pen, and CodePen will then run the Sass parser for you, in order that you can see the resulting webpage with regular CSS applied. Sometimes you will find that CSS tutorials have used Sass rather than plain CSS in their CodePen demos, so it is handy to know a little bit about it. Post-processing for optimization If you are concerned about adding size to your stylesheets by adding a lot of additional comments and whitespace for example, then a post-processing step could be to optimize the CSS by stripping out anything unneccessary in the production version. An example of a post-processor solution for doing this would be cssnano."},{"title":"Overflowing content","url":"//css/overflowing-content/","tags":["css","overflow"],"body":"Overflowing content What is overflow? We already know that everything in CSS is a box, and that we can constrain the size of these boxes by giving them values of [width](https://developer.mozilla.org/en-US/docs/Web/CSS/width) and [height](https://developer.mozilla.org/en-US/docs/Web/CSS/height) (or [inline-size](https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size) and [block-size](https://developer.mozilla.org/en-US/docs/Web/CSS/block-size)). Overflow is what happens when you have too much content in a box, so it won’t fit inside it comfortably. CSS gives you various tools to manage this overflow, and it is also a useful concept to understand at this early stage. You will come across overflow situations quite often when writing CSS, especially when you get deeper into CSS layout. CSS tries to avoid “data loss” Let’s start off by looking at two examples that demonstrate how CSS behaves by default when you have overflow. The first is a box that has been restricted in the block dimension by giving it a height. We have then added more content than there is space for in this box. The content is overflowing the box and laying itself rather messily over the paragraph below the box. The second is a word in a box that is restricted in the inline dimension. The box has been made too small for that word to fit and so it breaks out of the box. You might wonder why CSS has by default taken the rather untidy approach of causing the content to overflow messily? Why not hide the additional content, or cause the box to grow? Wherever possible CSS does not hide your content; to do so would cause data loss, which is usually a problem. In CSS terms, this means some content vanishing. The problem with content vanishing is that you might not notice it has vanished. Your visitors may not notice it has vanished. If it is the submit button on a form that disappears, and no-one can complete the form, that’s a big problem! So instead, CSS tends to overflow in a visible way. It is likely you will see the mess, or at worst a visitor to your site will let you know that some content is overlapping so it needs fixing. If you have restricted a box with a width or a height, CSS assumes you know what you are doing, and that you are managing the potential for overflow. In general, restricting the block dimension is problematic when text is going to be put in a box, as there may be more text than you expected when designing the site or the text may be bigger — for example if the user has increased their font size. In the next couple of lessons we will look at different ways to control sizing that might be less prone to overflow. However, if you need a fixed size you can also control how the overflow behaves. Let’s read on! The overflow property The [overflow](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow) property is how you take control of an element’s overflow and tell the browser how you want it to behave. The default value of overflow is visible, which is why by default we can see our content when it overflows. If you want to crop the content when it overflows you can set overflow: hidden on your box. This will do exactly what it says — hide the overflow. This may well cause things to vanish so you should only ever do this if hiding content is not going to cause a problem. Perhaps you would instead like to add scrollbars when content overflows? If you use overflow: scroll then your browser will always display scrollbars — even if there is not enough content to overflow. You may want this, as it prevents scrollbars appearing and disappearing depending on content. If you remove some of the content from the box below, you’ll see that the scrollbars still remain even with nothing to scroll (or at least just the scrollbar tracks). In the above example we only need to scroll on the y axis, however we get scrollbars in both axes. You could instead use the [overflow-y](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y) property, setting overflow-y: scroll to only scroll on the y axis. You could also scroll on the x axis using [overflow-x](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x), although this is not a recommended way to deal with long words! If you do need to deal with a long word in a small box then you could look at the [word-break](https://developer.mozilla.org/en-US/docs/Web/CSS/word-break) or [overflow-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap) properties. In addition some of the methods discussed in the Sizing items in CSS lesson may help you to create boxes that cope better with varying amounts of content. As with scroll, you will get a scrollbar in the scrolling dimension whether or not there is enough content to cause a scrollbar. Note: that you can specify x and y scrolling using the overflow property and passing in two values. If two keywords are specified, the first applies to overflow-x and the second to overflow-y. Otherwise, both overflow-x and overflow-y are set to the same value. For example, overflow: scroll hidden would set overflow-x to scrolland overflow-y to hidden. If you only want scrollbars to appear if there is more content than can fit in the box, then use overflow: auto. In this case it is left up to the browser to decide whether to display scrollbars. Desktop browsers will typically only do so once there is enough content to cause overflow. In the below example, remove some of the content until it fits into the box and you should see the scrollbars disappear. Overflow establishes a Block Formatting Context There is a concept in CSS of the Block Formatting Context (BFC). This isn’t something you need to worry too much about right now, but it is useful to know that when you use a value of overflow such as scroll or auto you create a BFC. The result is that the content of the box you have changed the value of overflow for becomes a mini layout of its own. Things outside the container cannot poke into the container, and nothing can poke out of that box into the surrounding layout. This is to enable the scrolling behavior, as all content of your box will need to be contained and not overlap other items on the page, in order to create a consistent scrolling experience. Unwanted overflow in web design Modern layout methods (as covered in the CSS layout module) manage overflow very well. They have been designed to cope with the fact that we tend not to be able to predict how much content we have on the web. In the past however, developers would often use fixed heights to try to line up the bottoms of boxes that really had no relationship to each other. This was fragile, and in a legacy application you may occasionally come across a box where the content is overlaying other content on the page. If you see this you now know that what is happening is overflow; ideally you would refactor the layout to not rely on fixing the box size. When developing a site you should always keep overflow issues in mind. You should test designs with large and small amounts of content, increase the font size of text and ensure that your CSS can cope in a robust way. Changing the value of overflow to hide content or add scrollbars is likely to be something you reserve only for a few special cases — where you really do want a scrolling box for example."},{"title":"Handling different text directions","url":"//css/handling-different-text-directions/","tags":["css","rtl","ltr"],"body":"Handling different text directions What are writing modes? A writing mode in CSS refers to whether the text is running horizontally or vertically. The [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode) property lets us switch from one writing mode to another. You don’t need to be working in a language which uses a vertical writing mode to want to do this — you could also change the writing mode of parts of your layout for creative purposes. In the example below we have a heading displayed using writing-mode: vertical-rl. The text now runs vertically. Vertical text is common in graphic design, and can be a way to add a more interesting look and feel to your web design. The three possible values for the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode) property are: horizontal-tb: Top-to-bottom block flow direction. Sentences run horizontally. vertical-rl: Right-to-left block flow direction. Sentences run vertically. vertical-lr: Left-to-right block flow direction. Sentences run vertically. So the writing-mode property is in reality setting the direction in which block-level elements are displayed on the page — either from top-to-bottom, right-to-left, or left-to-right. This then dictates the direction text flows in sentences. Writing modes and block and inline layout We have already discussed block and inline layout, and the fact that some things display as block elements and others as inline elements. As we have seen described above, block and inline is tied to the writing mode of the document, and not the physical screen. Blocks are only displayed from the top to the bottom of the page if you are using a writing mode that displays text horizontally, such as English. If we look at an example this will become clearer. In this next example I have two boxes that contain a heading and a paragraph. The first uses writing-mode: horizontal-tb, a writing mode that is written horizontally and from the top of the page to the bottom. The second uses writing-mode: vertical-rl; this is a writing mode that is written vertically and from right to left. When we switch the writing mode, we are changing which direction is block and which is inline. In a horizontal-tb writing mode the block direction runs from top to bottom; in a vertical-rl writing mode the block direction runs right-to-left horizontally. So the block dimension is always the direction blocks are displayed on the page in the writing mode in use. The inline dimension is always the direction a sentence flows. This figure shows the two dimensions when in a horizontal writing mode. This figure shows the two dimensions in a vertical writing mode. Once you start to look at CSS layout, and in particular the newer layout methods, this idea of block and inline becomes very important. We will revisit it later on. Direction In addition to writing mode we also have text direction. As mentioned above, some languages such as Arabic are written horizontally, but right-to-left. This is not something you are likely to use in a creative sense — if you simply want to line something up on the right there are other ways to do so — however it is important to understand this as part of the nature of CSS. The web is not just for languages that are displayed left-to-right! Due to the fact that writing mode and direction of text can change, newer CSS layout methods do not refer to left and right, and top and bottom. Instead they will talk about start and endalong with this idea of inline and block. Don’t worry too much about that right now, but keep these ideas in mind as you start to look at layout; you will find it really helpful in your understanding of CSS. Logical properties and values The reason to talk about writing modes and direction at this point in your learning however, is because of the fact we have already looked at a lot of properties which are tied to the physical dimensions of the screen, and make most sense when in a horizontal writing mode. Let’s take a look at our two boxes again — one with a horizontal-tb writing mode and one with vertical-rl. I have given both of these boxes a [width](https://developer.mozilla.org/en-US/docs/Web/CSS/width). You can see that when the box is in the vertical writing mode, it still has a width, and this is causing the text to overflow. What we really want in this scenario, is to essentially swap height and width along with the writing mode. When we’re in a vertical writing mode we want the box to expand in the block dimension just like it does in the horizontal mode. To make this easier, CSS has recently developed a set of mapped properties. These essentially replace physical properties — things like width and height — with logical, or flow relativeversions. The property mapped to width when in a horizontal writing mode is called [inline-size](https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size) — it refers to the size in the inline dimension. The property for height is named [block-size](https://developer.mozilla.org/en-US/docs/Web/CSS/block-size)and is the size in the block dimension. You can see how this works in the example below where we have replaced width with inline-size. Logical margin, border, and padding properties In the last two lessons we have learned about the CSS box model, and CSS borders. In the margin, border, and padding properties you will find many instances of physical properties, for example [margin-top](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top), [padding-left](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left), and [border-bottom](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom). In the same way that we have mappings for width and height there are mappings for these properties. The margin-top property is mapped to [margin-block-start](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start) — this will always refer to the margin at the start of the block dimension. The [padding-left](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left) property maps to [padding-inline-start](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start), the padding that is applied to the start of the inline direction. This will be where sentences start in that writing mode. The [border-bottom](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom) property maps to [border-block-end](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end), which is the border at the end of the block dimension. You can see a comparison between physical and logical properties below. If you change the writing mode of the boxes by switching the writing-mode property on .box to vertical-rl, you will see how the physical properties stay tied to their physical direction, whereas the logical properties switch with the writing mode. You can also see that the [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2) has a black border-bottom. Can you work out how to make that bottom border always go below the text in both writing modes? There are a huge number of properties when you consider all of the individual border longhands, and you can see all of the mapped properties on the MDN page for Logical Properties and Values. Logical values We have so far looked at logical property names. There are also some properties that take physical values of top, right, bottom, and left. These values also have mappings, to logical values — block-start, inline-end, block-end, and inline-start. For example, you can float an image left to cause text to wrap round the image. You could replace left with inline-start as shown in the example below. Change the writing mode on this example to vertical-rl to see what happens to the image. Change inline-start to inline-end to change the float. Here we are also using logical margin values to ensure the margin is in the correct place no matter what the writing mode is. Should you use physical or logical properties? The logical properties and values are newer than their physical equivalents, and therefore have only recently been implemented in browsers. You can check any property page on MDN to see how far back the browser support goes. If you are not using multiple writing modes then for now you might prefer to use the physical versions. However, ultimately we expect that people will transition to the logical versions for most things, as they make a lot of sense once you start also dealing with layout methods such as flexbox and grid."},{"title":"Getting Started with SASS","url":"//sass/getting-started-with-sass/","tags":["css","sass"],"body":"Getting Started with SASS Before you can use Sass, you need to set it up on your project. If you want to just browse here, go ahead, but we recommend you go install Sass first. Go here if you want to learn how to get everything setup. Preprocessing CSS on its own can be fun, but stylesheets are getting larger, more complex, and harder to maintain. This is where a preprocessor can help. Sass lets you use features that don’t exist in CSS yet like variables, nesting, mixins, inheritance and other nifty goodies that make writing CSS fun again. Once you start tinkering with Sass, it will take your preprocessed Sass file and save it as a normal CSS file that you can use in your website. The most direct way to make this happen is in your terminal. Once Sass is installed, you can compile your Sass to CSS using the sass command. You’ll need to tell Sass which file to build from, and where to output CSS to. For example, running sass input.scss output.css from your terminal would take a single Sass file, input.scss, and compile that file to output.css. You can also watch individual files or directories with the –watch flag. The watch flag tells Sass to watch your source files for changes, and re-compile CSS each time you save your Sass. If you wanted to watch (instead of manually build) your input.scss file, you’d just add the watch flag to your command, like so: sass –watch input.scss output.css You can watch and output to directories by using folder paths as your input and output, and separating them with a colon. In this example: sass –watch app/sass:public/stylesheets Sass would watch all files in the app/sass folder for changes, and compile CSS to the public/stylesheets folder. Variables Think of variables as a way to store information that you want to reuse throughout your stylesheet. You can store things like colors, font stacks, or any CSS value you think you’ll want to reuse. Sass uses the $ symbol to make something a variable. Here’s an example: SCSSSassCSS SCSS SYNTAX $font-stack: Helvetica, sans-serif; $primary-color: #333; body { font: 100% $font-stack; color: $primary-color; } CSS OUTPUT body { font: 100% Helvetica, sans-serif; color: #333; } When the Sass is processed, it takes the variables we define for the $font-stack and $primary-color and outputs normal CSS with our variable values placed in the CSS. This can be extremely powerful when working with brand colors and keeping them consistent throughout the site. Nesting When writing HTML you’ve probably noticed that it has a clear nested and visual hierarchy. CSS, on the other hand, doesn’t. Sass will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. Be aware that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice. With that in mind, here’s an example of some typical styles for a site’s navigation: SCSSSassCSS SCSS SYNTAX nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } CSS OUTPUT nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } You’ll notice that the ul, li, and a selectors are nested inside the nav selector. This is a great way to organize your CSS and make it more readable. Partials You can create partial Sass files that contain little snippets of CSS that you can include in other Sass files. This is a great way to modularize your CSS and help keep things easier to maintain. A partial is a Sass file named with a leading underscore. You might name it something like _partial.scss. The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file. Sass partials are used with the @use rule. Modules Compatibility: Dart Sass since 1.23.0 LibSass ✗ Ruby Sass ✗ ▶ You don’t have to write all your Sass in a single file. You can split it up however you want with the @use rule. This rule loads another Sass file as a module, which means you can refer to its variables, mixins, and functions in your Sass file with a namespace based on the filename. Using a file will also include the CSS it generates in your compiled output! SCSSSassCSS SCSS SYNTAX // _base.scss $font-stack: Helvetica, sans-serif; $primary-color: #333; body { font: 100% $font-stack; color: $primary-color; } // styles.scss @use 'base'; .inverse { background-color: base.$primary-color; color: white; } CSS OUTPUT body { font: 100% Helvetica, sans-serif; color: #333; } .inverse { background-color: #333; color: white; } Notice we’re using @use ‘base’; in the styles.scss file. When you use a file you don’t need to include the file extension. Sass is smart and will figure it out for you. Mixins Some things in CSS are a bit tedious to write, especially with CSS3 and the many vendor prefixes that exist. A mixin lets you make groups of CSS declarations that you want to reuse throughout your site. You can even pass in values to make your mixin more flexible. A good use of a mixin is for vendor prefixes. Here’s an example for transform. SCSSSassCSS SCSS SYNTAX @mixin transform($property) { -webkit-transform: $property; -ms-transform: $property; transform: $property; } .box { @include transform(rotate(30deg)); } CSS OUTPUT .box { -webkit-transform: rotate(30deg); -ms-transform: rotate(30deg); transform: rotate(30deg); } To create a mixin you use the @mixin directive and give it a name. We’ve named our mixin transform. We’re also using the variable $property inside the parentheses so we can pass in a transform of whatever we want. After you create your mixin, you can then use it as a CSS declaration starting with @include followed by the name of the mixin. Extend/Inheritance This is one of the most useful features of Sass. Using @extend lets you share a set of CSS properties from one selector to another. It helps keep your Sass very DRY. In our example we’re going to create a simple series of messaging for errors, warnings and successes using another feature which goes hand in hand with extend, placeholder classes. A placeholder class is a special type of class that only prints when it is extended, and can help keep your compiled CSS neat and clean. SCSSSassCSS SCSS SYNTAX /* This CSS will print because %message-shared is extended. */ %message-shared { border: 1px solid #ccc; padding: 10px; color: #333; } // This CSS won't print because %equal-heights is never extended. %equal-heights { display: flex; flex-wrap: wrap; } .message { @extend %message-shared; } .success { @extend %message-shared; border-color: green; } .error { @extend %message-shared; border-color: red; } .warning { @extend %message-shared; border-color: yellow; } What the above code does is tells .message, .success, .error, and .warning to behave just like %message-shared. That means anywhere that %message-shared shows up, .message, .success, .error, & .warning will too. The magic happens in the generated CSS, where each of these classes will get the same CSS properties as %message-shared. This helps you avoid having to write multiple class names on HTML elements. You can extend most simple CSS selectors in addition to placeholder classes in Sass, but using placeholders is the easiest way to make sure you aren’t extending a class that’s nested elsewhere in your styles, which can result in unintended selectors in your CSS. Note that the CSS in %equal-heights isn’t generated, because %equal-heights is never extended. Operators Doing math in your CSS is very helpful. Sass has a handful of standard math operators like +, -, *, /, and %. In our example we’re going to do some simple math to calculate widths for an aside & article. SCSSSassCSS SCSS SYNTAX .container { width: 100%; } article[role=\"main\"] { float: left; width: 600px / 960px * 100%; } aside[role=\"complementary\"] { float: right; width: 300px / 960px * 100%; } CSS OUTPUT .container { width: 100%; } article[role=\"main\"] { float: left; width: 62.5%; } aside[role=\"complementary\"] { float: right; width: 31.25%; } We’ve created a very simple fluid grid, based on 960px. Operations in Sass let us do something like take pixel values and convert them to percentages without much hassle."},{"title":"Content Management with Jekyll","url":"//cpnt200/jekyll/intro-to-dev-biz/","tags":[],"body":"Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For People Who Can’t Draw Article: Agile philosophy: A summary Video: AARRR Video: Design Sprint Introduction Article: Lean Methodology Video: Lean Canvas Tool Time: Git and Cmder Install Git and Commandr onto your system if you already haven’t. We’ll need these tomorrow. Search Tips Reviewed convergent searches Be brief: try to reduce your search query to four words or less. Note: there are many times you will break this rule such as when you search an error (you’re searching errors, right?) or when you need extra terms to make your query domain-specific (see next step!). Make your search domain-specific (aka industry specific). “heading” could mean a number of different things, depending on context. “html heading” focuses your search to the web design domain. Qualify your search with terms specific to your needs and skill level. These terms are often reused for many searches. Examples: tutorial cheatsheet checklist review documentation divergent searches Access your engine’s suggestion results by appending “vs” the end of your query. This is handy for finding alternatives to a specific tool/technique/philosophy. If suggestions exist (ie you’re using Google) but the results disappear for a search, you probably used too many words; Google seems to only index simple phrases. Waterfall The article Web design workflow: What to expect when starting a website project is one of maaaany that breakdown the steps in a waterfall development workflow: First contact Discovery Are we supporting IE? Do you have analytics? Content design content inventory Information Architecture Site map Wireframing Two methods: full page wireframe storyboard wireframe (wireframing only what’s in the viewport). See Designing for a Viewport for the inspiration behind this method. Mockups Prototyping Development Testing Launch Fires Long-term support The 3 Elephants in the Room Budget Timeline Milestones Assignment 2: Homepage wireframes See the Assignment 2 readme for details. Due Friday @ 8PM Tool Time: Wireframe editor Assignment 2 is a research and self-learning assignment. This course is mostly tool agnostic. For example, you don’t have to use VS Code; there are many professional alternatives available. The current industry-standard wireframe and mockup software package is Sketch (which as only recently had a Windows version, kinda) BUT there are two or three signifcant competitors. Using your razor-sharp search skills, find the top three free-ish Sketch alternatives. Find system requirements, reviews and comparison articles to decide which you’ll install and play around with (all of them?). Top Alternatives Figma Adobe XD Framer X agile A professional alternative to waterfall development workflows. Core Principles Individuals and Interactions over processes and tools Working Software over comprehensive documentation Customer Collaboration over contract negotiation Responding to Change over following a plan Agile comes in many flavours but here are three we’ll talk about: Scrum Core Principles Transparency Inspection Adaptation In practice Cycles are sprints Standup meetings Product Ownership Kanban Core Principles Understanding Agreement Respect Leadership Flow Customer Focus Transparency Balance Collaboration In practice: Each process issues requests (kanban) to its suppliers when it consumes its supplies. Each process produces according to the quantity and sequence of incoming requests. No items are made or transported without a request. The request associated with an item is always attached to it. Processes must not send out defective items, to ensure that the finished products will be defect-free. Limiting the number of pending requests makes the process more sensitive and reveals inefficiencies. Lean Core Principles Define Learn Experiment In practice: Document your Plan A Identify the riskiest parts of your plan Systematically test your plan Prep for Tomorrow Article: Git: forking vs cloning Article: The CSS Box Model Video: Reading Colour Hexcodes"},{"title":"Content Management with Jekyll","url":"//cpnt200/jekyll/content-management-with-jekyll/","tags":[],"body":"Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Ruby DevOps Ruby/Jekyll terms: see Setup Ruby Gem and RubyGem Gemfile Bundler/bundle Options for installing bare metal rbv: Ruby version manager docker Questions to ask How often do you use Ruby? Do you have multiple Ruby projects to maintain? Is your laptop close to death? installation Mac Windows CRUD of content Hagrid and Hermoine Hagrid CRUD Creating and Retrieve: Request comes in Hagrid will assemble index.html using views and db info Respond with finished HTML Hermoine CRUD Create: parse markdown of the site from file database create every possible static page of the site ONCE Retrieve: finds index.html in the file system returns it. differences between WP and Jekyll (there are lots more) database WP -> mysql Jekyll -> file database Live code: vanilla jekyll Jekyll Documentation Basic jekyll structure Great Jekyll Summary YAML [20 min break] Live code: try a couple Top 10 installs pagination headaches localization skins Afternoon Check-in How far did we get installing Jekyll? Update from Kim/Karen meeting Overview of minimal mistakes theme Anything else? Q&A Q: A: Jekyll Requirements Ruby version 2.4.0 or above, including all development headers (ruby version can be checked by running ruby -v) RubyGems (which you can check by running gem -v) GCC and Make (in case your system doesn’t have them installed, which you can check by running gcc -v,g++ -v and make -v in your system’s command line interface) Installation macOS Ubuntu Linux Other Linux distros Windows Docker README.md Getting Started Jekyll Documentation Step-by-step Tutorial Great Jekyll Summary Jekyll Example Sites Jekyll on GitHub Pages GitHub Setting up a GitHub Pages site with Jekyll Remote Themes on GitHub Pages Search: github pages jekyll Activity 1: Jekyll Setup Install Ruby, RubyGems (and possibly GCC and Make) on your system (See Installation Guide) Install Jekyll Create Hello World site Optional: Continue with Jekyll Step-by-step Activity 2: Try installing one or more 3rd party themes Search: top jekyll themes Top 10 Free Themes on Jekyll Themes Pick a theme that speaks to you as a person. Install theme according to the theme’s instructions (sometimes a bumpy road). Customize site as needed (hint: Assignment 1). Activity 3: Install Jekyll Using the GitHub Pages Theme Chooser Theme Chooser Step-by-Step List of all default GH Jekyll Themes"},{"title":"Introduction to E-commerce","url":"//jekyll/intro-to-ecommerce/","tags":[],"body":"Relevant Resources Articles by Steve Chou Private Label vs Retail Arbitrage vs Dropshipping vs Wholesale – 8 Ecommerce Business Models Compared by Steve Chou AliExpress Dropshipping & Oberlo Are Officially Dead – Here’s Why Shopify dropshipping Wholesale Ted Create a Dropshipping Store with Shopify & Aliexpress (UPDATED Shopify Tutorial for 2019) Sebastian Ghiorghiu [Dropshipping In 2019 - 2020 Everything You Should Know](https://www.youtube.com/watch?v=7hpIRP8Nph8) Justin Painter shortcut: Meme page and Influencer MArketing print on demand Shortcut: T-shirt dropship breakdown by Joe Roberts cost of FB ads: $10/sale (very anecdotal stat) 10 Things To Do BEFORE You Start A Print On Demand Store… (Beginner Mistakes to AVOID) 120: Amazon Merch - darker shades (t-shirts) usually perform better with black being top selling colour 645: Placeit - lifestyle photo generator 750: Don’t just opt for selling t-shirts 795: Principle of price anchoring 1095: Principle of illusory superiority digital downloads SHOPIFY - How To Make $1,000 A DAY With Digital Products Keder Cormier 195: Hire a designer (and get yourself out of the picture) 490: e-books Etsy [Etsy vs Shopify Pros and Cons Which is right for you?](https://www.youtube.com/watch?v=_nMrGWkchgs) by Merch Lifestyle Buying and selling products or services online Web Email Mobile applications Products include physical or digital products, or services Can involve complex chain of inventory control, warehouses, shipping, receiving, couriers, etc. Or can be as simple as online payment and download of digital files. E-commerce vs E-business Ecommerce is the sales subset of Ebusiness Ebusiness covers all aspects of using electronic systems to conduct business Purchasing Receiving Shipping Order processing Customer service Accounting more Brick and Mortar Businesses Existing business starting online sales Has physical locations, infrastructure, customer, and supplier relationships Questions to Ask Will it improve customer support, or get good publicity? Will it bring more customers or sales? Does the site support business goals or hurt them? Online Entrepreneur New venture, strictly online Doesn’t need store-front locations and most infrastructure What is needed depends on type of product/service Questions to Ask How can we differentiate from competitors? How should we handle orders, payments, returns, warranties, service, support? Will suppliers be up to the job? Is product easy/economical to deliver? How will we build it? What size site? What will it cost? Advantages of Ecommerce Market research indicates that it is needed Customers want it! Makes businesses more efficient, profitable, etc. Makes the customer experience better Helps to provide information/support to customers Products and services can reach a wider audience Disadvantages of Ecommerce Not all business plans support it Products can be too difficult or expensive to ship globally Customers may prefer physical interaction with the product when shopping Not useful for businesses that are locally focused Need the staff, resources, and knowledge to do Ecommerce properly Not useful for a customer demographic that isn’t online Site Essentials You can’t just open an online store and expect customers to flock to it. You must have: Products and services that customers need and want a solid delivery infrastructure Order tracking Customer service Customer loyalty rewards Relationship management Support (files, technical help, information, etc.) Ecommerce Models There are 8 basic ecommerce models. Many websites combine several models. Each of the 8 basic models has unique characteristics that distinguish it from the other models. Brochureware Site a marketing site that electronically aids in the buying and selling process Sometimes provides additional information to support customers online documentation software downloads FAQ Generates revenue indirectly by creating awareness of the business’ products and services Transactions occur offline. Online Store A website where customers can buy products or services. Customers browse an online catalog You can add products to an online shopping cart Checkout process Payment processing Inventory update Shipping notification Capture customer information Subscription Site Targets a specific niche market that places a value on expert information, service, or a digital product delivered in a timely manner. Technical newsletters Access to research information Graphics Music Computer game downloads, etc. Removing ads Selling for a monthly fee, an annual subscription, or a small per transation fee An account login is important Advertising Site Content-heavy site that gets revenue from banners, sponsorships, ads, and other advertising methods. Traffic to the site is the measure of its value. Very few sites can be supported entirely through advertising dollars. Google and Facebook use an advertising model Online Store Ecosystem Etsy, for example. Simple and easy way to sell products/services online, especially when you’re starting out Offers turnkey solutions for store creation, payment processing, and site management. The platform handles the marketing and all the technical requirements Business-to-Business Built to serve other businesses Selling directly to other businesses (wholesale operations) Integrating systems with vendors/suppliers for automated ordering Auction Sites Person offers an item for sale and potential buyers bid on the item. Bidder willing to pay the highest price for the item wins. Can create your own auction site or use another to build a business If you use an established auction site, they provide the site infrastructure, reputation tracking, notifications, etc. Blogging Provides a news/editorial service to draw in customers May be integrated with other models as a “value added” service May have advertising revenue Could have a Patreon (or similar) component Implementing Your Website Ecommerce Details We’ve already covered designing websites, but lets talk about features needed for ecommerce Domain Name Digital Certificates Merchant Account Domain Name Catchy easy-to-remember name that makes people remember your business Make sure it’s actually available Register your domain Domain Name Registry Governed by Internet Corporation for Assigned Names and Numbers (ICANN) Registration conducted by registrars for an annual fee (1 to 10 years at a time) For business use, choose a .com domain but also register the other top-level domains Prevents competitors or disreputable parties from hijacking your company name Digital Certificates aka SSL certificates Key to providing customer transaction security Obtain a digital certificate from a “Certificate Authority” SSL Secure Socket Layer Standardizes the way web browsers and web servers communicate with each other using encrypted data Digital certificate is used to authenticate the server and initiate the encryption process You can get certificates through your web hosting or obtain one directly through a certification authority Must be installed on your server Options include Verisign (paid) and Let’s Encrypt (free) Merchant Account Allows you to process a credit card A business account at a financial institution that functions as a clearing account for credit card transactions. Transfers money to business bank account May involve physical credit-card readers (Point-of-Sale – POS) and/or online payment gateway Online Merchant Account Requires: Application for account Proof of the establishment of your company Setup fee Transaction fees (depends on volume) Monthly and possibly annual fees Paypal offers some services that avoid the need for a merchant account as they are accepting the CC payment (however, you need a PayPal Business account instead) Issues to watch for: Authorization fees Transaction fees Monthly fees Annual fees Equipment rental fees Chargeback or Bill Backs Customer cancels credit card transaction Customer claims goods or service not provided Merchant account provider takes money back from vendor Six months in U.S., 3 months in Canada"},{"title":"Jekyll from Scratch","url":"//cpnt200/jekyll/jekyll-from-scratch/","tags":[],"body":"Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website Live code: What happens if we jekyll build inside a vanilla html web directory? Pages Stack Overflow: posts vs pages We’ll be covering posts tomorrow. Live code: Converting index.html to index.md using Jekyll Layouts Front Matter and Liquid See Resources below We’ll be looking for at liquid tomorrow. Recommended Practice: Installing Jekyll with Bundler Live code: Generate base scaffolded boilerplate, using this tutorial: Using Jekyll with Bundler Pro tip: use the --blank flag with bundle exec jekyll new . to generate an empty jekyll site with all the directories and minimal content. Afternoon Check-in Recap Show and Tell 5 minutes for you to show off Anything else? Jekyll Best Practices READ THIS: An opinionated style guide by Ben Balter Using Jekyll with Bundler FAQ: Working with Github Pages Jekyll Deep Dive See: Day 1 README for basic tutorials and reference links Command Line Usage Configuration Resources Official Tutorials Front Matter and Liquid Front Matter Docs Official Liquid Docs Activity 1: Finish converting the other Character Classes in the hello-jekyll example Using the finished index.md and _layouts code, convert the other pages to Jekyll pages. Activity 2: Read this article beginning to end An opinionated style guide by Ben Balter Activity 3: Includes Using the finished index.md and _layouts code, further separate repeated page elements into individual includes. See: Official Include Docs “Includes” tutorial on the official Video Tutorials list"},{"title":"Jekyll Quickstart","url":"//jekyll/jekyllquick/","tags":["jekyll","quickstart"],"body":"Jekyll Quickstart Jekyll is a static site generator. You give it text written in your favorite markup language and it uses layouts to create a static website. You can tweak how you want the site URLs to look, what data gets displayed on the site, and more. PrerequisitesPermalink See requirements. Instructions Permalink Install a full Ruby development environment. Install Jekyll and bundler gems. gem install jekyll bundler Create a new Jekyll site at ./myblog. jekyll new myblog Change into your new directory. cd myblog Build the site and make it available on a local server. bundle exec jekyll serve Browse to http://localhost:4000 If you encounter any errors during this process, see the troubleshooting page. Also, make sure you’ve installed the development headers and other prerequisites as mentioned on the requirements page."},{"title":"README","url":"//readme/","tags":[],"body":"The Dev Bible The dev bible is a Jekyll powered knowledge base and API for web developers. I came up with the idea when learning web dev and trying to find resources all over the internet. I started by creating my own database in notion. This soon became my idea for my final project while taking the Web Developer prgoram at SAIT Features A dedicated blog with notes from SAIT Everything I’ve learned about web dev so far Cheat sheets Quick reference search Coming Soon The API! The page is created with most recent JAMSTACK principles and uses Jekyll and serverless technology to deliver information quickly and efficiantly. Dependencies Jekyll Minimal Mistakes Theme Installation This App is still in development"},{"title":"Middleman Quickstart","url":"//middleman-quickstart/","tags":[],"body":"Middle Man Getting Started Installing Ruby and Middle Man macOS comes prepackaged with both Ruby and RubyGems, however, some of the Middleman’s dependencies need to be compiled during installation and on macOS that requires Xcode Command Line Tools. Xcode can be installed from the terminal: xcode-select --install Once you have Ruby and RubyGems up and running, execute the following from the command line: gem install middleman This will install Middleman, its dependencies and the command-line tools for using Middleman. The installation process will add one new command to your environment, with three useful features: $ middleman init $ middleman server middleman build The uses of each of these commands will be covered in the next section, Start a New Site. Setting up a new file To get started we will need to create a project folder for Middleman to work out of. You can do this using an existing folder or have Middleman create one for you using the middleman init command. middleman init builds a Middleman skeleton project in your current folder. middleman init my_new_project creates a subfolder my_new_project with the Middleman skeleton project. The Skeleton Every new project creates a basic web development skeleton for you. This automates the construction of a standard hierarchy of folders and files that you can use in all of your projects. A brand-new project will contain a source folder and a config.rb file. The source folder is where you will build your website. The skeleton project contains folders for JavaScript, CSS and images, but you can change these to match your own personal preferences. The config.rb file contains settings for Middleman. Gemfile Middleman will respect a Bundler Gemfile for specifying and controlling your gem dependencies. When creating a new project, Middleman will generate a Gemfile for you which specifies the same version of Middleman you are using. This will lock Middleman to this specific release series (the 4.0.x series, for example). All plugins and extra libraries you use in your project should be listed in your Gemfile, and Middleman will automatically require all of them when it starts. config.ru A config.ru file describes how the site should be loaded by a Rack-enabled web server. If you’d like to host your Middleman site in development mode on a Rack-based host such as Heroku, you can add a config.ru file at the root of your project with the following contents: require 'middleman/rack' run Middleman.server Remember that Middleman is built to generate static sites, though. This scenario is not a primary use-case. Directory Structure The default Middleman installation consists of a directory structure which looks like this: mymiddlemansite/ +– .gitignore +– Gemfile +– Gemfile.lock +– config.rb +– source +– images ¦ +– background.png ¦ +– middleman.png +– index.html.erb +– javascripts ¦ +– all.js +– layouts ¦ +– layout.erb +– stylesheets +– all.css +– normalize.css Main Directories Middleman makes use of the source, build, data and lib directories for specific purposes. Each of these directories are children of the main Middleman directory. source Directory The source directory contains your main website source files to be built, including your templates JavaScript, CSS and images. build Directory The build directory is where your static website files will be compiled and exported to. data Directory Local Data allows you to create YAML or JSON files in a folder called data and makes this information available in your templates. The data folder should be placed in the root of your project (i.e. in the same folder as your project’s source folder). See the Data Files docs for more information. lib Directory The lib directory enables you to include external Ruby modules which contain helpers for building your application. If you use Rails then you will be familiar with this layout. For more information check out the middle man cheatsheet Make sure you watch THESE if you want to master this super fun framework"},{"title":"Intro to web componants","url":"//html/intro-to-web-componants/","tags":["Web Componants","HTML"],"body":"TL;DR With Custom Elements, web developers can create new HTML tags, beef-up existing HTML tags, or extend the components other developers have authored. The API is the foundation of web components. It brings a web standards-based way to create reusable components using nothing more than vanilla JS/HTML/CSS. The result is less code, modular code, and more reuse in our apps. Introduction The browser gives us an excellent tool for structuring web applications. It’s called HTML. You may have heard of it! It’s declarative, portable, well supported, and easy to work with. Great as HTML may be, its vocabulary and extensibility are limited. The HTML living standard has always lacked a way to automatically associate JS behavior with your markup… until now. Custom elements are the answer to modernizing HTML, filling in the missing pieces, and bundling structure with behavior. If HTML doesn’t provide the solution to a problem, we can create a custom element that does. Custom elements teach the browser new tricks while preserving the benefits of HTML. Defining a new element To define a new HTML element we need the power of JavaScript! The customElements global is used for defining a custom element and teaching the browser about a new tag. Call customElements.define() with the tag name you want to create and a JavaScript class that extends the base HTMLElement. Example - defining a mobile drawer panel, : class AppDrawer extends HTMLElement {...} window.customElements.define('app-drawer', AppDrawer); // Or use an anonymous class if you don't want a named constructor in current scope. window.customElements.define('app-drawer', class extends HTMLElement {...}); Example usage: It’s important to remember that using a custom element is no different than using a or any other element. Instances can be declared on the page, created dynamically in JavaScript, event listeners can be attached, etc. Keep reading for more examples. Defining an element’s JavaScript API The functionality of a custom element is defined using an ES2015 class which extends HTMLElement. Extending HTMLElement ensures the custom element inherits the entire DOM API and means any properties/methods that you add to the class become part of the element’s DOM interface. Essentially, use the class to create a public JavaScript API for your tag. Example - defining the DOM interface of : class AppDrawer extends HTMLElement { // A getter/setter for an open property. get open() { return this.hasAttribute('open'); } set open(val) { // Reflect the value of the open property as an HTML attribute. if (val) { this.setAttribute('open', ''); } else { this.removeAttribute('open'); } this.toggleDrawer(); } // A getter/setter for a disabled property. get disabled() { return this.hasAttribute('disabled'); } set disabled(val) { // Reflect the value of the disabled property as an HTML attribute. if (val) { this.setAttribute('disabled', ''); } else { this.removeAttribute('disabled'); } } // Can define constructor arguments if you wish. constructor() { // If you define a constructor, always call super() first! // This is specific to CE and required by the spec. super(); // Setup a click listener on itself. this.addEventListener('click', e => { // Don't toggle the drawer if it's disabled. if (this.disabled) { return; } this.toggleDrawer(); }); } toggleDrawer() { ... } } customElements.define('app-drawer', AppDrawer); In this example, we’re creating a drawer that has an open property, disabled property, and a toggleDrawer() method. It also reflects properties as HTML attributes. A neat feature of custom elements is that this inside a class definition refers to the DOM element itself i.e. the instance of the class. In our example, this refers to . This (😉) is how the element can attach a click listener to itself! And you're not limited to event listeners. The entire DOM API is available inside element code. Use this to access the element's properties, inspect its children (this.children), query nodes (this.querySelectorAll('.items')), etc. Rules on creating custom elements The name of a custom element must contain a dash (-). So , , and are all valid names, while and are not. This requirement is so the HTML parser can distinguish custom elements from regular elements. It also ensures forward compatibility when new tags are added to HTML. You can't register the same tag more than once. Attempting to do so will throw a DOMException. Once you've told the browser about a new tag, that's it. No take backs. Custom elements cannot be self-closing because HTML only allows a few elements to be self-closing. Always write a closing tag (). Custom element reactions A custom element can define special lifecycle hooks for running code during interesting times of its existence. These are called custom element reactions. https://www.webcomponents.org/element/vanillawc/wc-social-link"},{"title":"C# 7","url":"//cheatsheets/csharp7/","tags":[],"body":"### Out Variables ```csharp public void PrintCoordinates(Point p) { p.GetCoordinates(out int x, out int y); WriteLine($\"({x}, {y})\"); } ``` `out` is used to declare a variable at the point where it is passed as an argument. ### Pattern Matching #### Is-expressions with patterns ```csharp public void PrintStars(object o) { if (o is null) return; // constant pattern \"null\" if (!(o is int i)) return; // type pattern \"int i\" WriteLine(new string('*', i)); } ``` #### Switch statements with patterns ```csharp switch(shape) { case Circle c: WriteLine($\"circle with radius {c.Radius}\"); break; case Rectangle s when (s.Length == s.Height): WriteLine($\"{s.Length} x {s.Height} square\"); break; case Rectangle r: WriteLine($\"{r.Length} x {r.Height} rectangle\"); break; default: WriteLine(\"\"); break; case null: throw new ArgumentNullException(nameof(shape)); } ``` ### Tuples #### Tuple type ```csharp (string, string, string) LookupName(long id) // tuple return type { ... // retrieve first, middle and last from data storage return (first, middle, last); // tuple literal } ``` ```csharp var names = LookupName(id); WriteLine($\"found {names.Item1} {names.Item3}.\"); ``` #### Tuple elements with name ```csharp (string first, string middle, string last) LookupName(long id) // tuple elements have names ``` ```csharp var names = LookupName(id); WriteLine($\"found {names.first} {names.last}.\"); ``` #### Tuple Literals ```csharp return (first: first, middle: middle, last: last); // named tuple elements in a literal ``` #### Tuple Deconstruction ```csharp (var first, var middle, var last) = LookupName(id1); WriteLine($\"found {first} {last}.\"); ``` or ```csharp var (first, middle, last) = LookupName(id1); // var outside ``` or ```csharp (first, middle, last) = LookupName(id2); // assign onto existing variables ``` ### Local Functions ```csharp public int Fibonacci(int x) { if (x names = new ConcurrentDictionary(); private int id = GetId(); public Person(string name) => names.TryAdd(id, name); // constructors ~Person() => names.TryRemove(id, out *); // destructors public string Name { get => names[id]; // getters set => names[id] = value; // setters } } ``` ### Throw Expressions ```csharp class Person { public string Name { get; } public Person(string name) => Name = name ?? throw new ArgumentNullException(name); public string GetFirstName() { var parts = Name.Split(\" \"); return (parts.Length > 0) ? parts[0] : throw new InvalidOperationException(\"No name!\"); } public string GetLastName() => throw new NotImplementedException(); } ```"},{"title":"Firebase","url":"//cheatsheets/firebase/","tags":["WIP"],"body":"### Authenticating ```js FB = new Firebase('https://xxx.firebase.io') FB.auth(TOKEN, (err, result) => { ···}) ``` ```js FB.authAnonymously(···) FB.authWithPassword(···) FB.authWithOAuthPopup(···) FB.authWithOAuthToken(···) ``` ### Using ```js Users = FB.child('users') ``` ```js // Create user = Users.push(first: \"Frank\", last: \"Sinatra\") ``` ```js // Retrieve user = Users.child('alan') // gets `users/alan` ``` ```js // Update user.set(first: \"Miles\", last: \"Davis\") user.update(first: \"Miles\") user.setWithPriority({ ··· }, priority) ``` ```js // Destroy user.remove() ``` ```js // Getting user.name() // primary id user.once('value', (snap) => { snap.name() // primary id snap.val() // value }, (err) => { ··· }) ``` ```js // traversal user.parent() ``` ### Querying ```coffeescript Users = FB.child('users') Users .startAt(1000) .limit(50) .equalTo(priority, [name]) .on 'child_added', (snap) -> ··· ``` ### Lists ```coffeescript Posts = FB.child('posts') post = Posts.push({ title: \"How to do things\", author: \"alan\" }) ``` ## References {: .-one-column} * *"},{"title":"Firefox","url":"//cheatsheets/firefox/","tags":[],"body":"### [Firefox 31](https://www.mozilla.org/en-US/firefox/31.0/releasenotes/) (July 2014) * CSS: variables ### [Firefox 30](https://developer.mozilla.org/en-US/Firefox/Releases/30) (June 2014) * CSS: Allow `line-height` in `` * JS: `Console.count()` * JS: ES6 array and generator comprehensions ### Firefox 29 (April 2014) * New UI * CSS: Unprefixed `box-shadow` ### Firefox 18 (Jan 2013) * Faster JS compiler (IonMonkey) * Mac retina support * JS: `window.devicePixelRatio` * JS: unprefixed `ontouchstart` * HTML: `` * HTML: `` ### Firefox 17 (Nov 2012) * No more support for Mac OSX 10.5 and below * SVG `FillPaint` and `StrokePaint` * HTML `` ([docs][iframe-sandbox]) * Official support for Windows 8 ([link][17reqs]) [iframe-sandbox]: https://developer.mozilla.org/en-US/docs/HTML/Element/iframe#attr-sandbox [17reqs]: http://www.mozilla.org/en-US/firefox/17.0/system-requirements/ ### Firefox 16 (Oct 2012) * Web app support ([docs][webapp]) * Unprefixed CSS animations, transitions, transforms, gradients [webapp]: https://developer.mozilla.org/en-US/docs/Apps/Getting_Started ### Firefox 15 (Aug 2012) * Background updates * SPDY v3 * Opus audio codec * HTML `` (and ``) * HTML `` ### Firefox 14 (Jul 2012) * Full screen support for OSX Lion * JS pointer lock API ([docs][lock]) * JS display sleep API ([docs][sleep]) [lock]: https://developer.mozilla.org/en-US/docs/API/Pointer_Lock_API [sleep]: https://bugzilla.mozilla.org/show_bug.cgi?id=697132 ### Firefox 13 (Jun 2012) * Smooth scrolling by default * SPDY on by default * CSS `column-fill` ([docs][cf]) * ECMA 6 `Map` and `Set` * CSS `background-position` extended syntax * CSS `:invalid` * CSS turn unit (`rotate(0.5turn)`) [cf]: https://developer.mozilla.org/en/CSS/column-fill ### Firefox 12 (Apr 2012) * CSS `text-align-last` ([docs][tal]) [tal]: https://developer.mozilla.org/en/CSS/text-align-last ### Firefox 11 (Mar 2012) * `element.outerHTML` ([docs][outer]) * Dev tools: Style editor, 3D page inspector ([docs][tools]) * Unprefixed web sockets * CSS `text-size-adjust` ([docs][tsa]) [outer]: https://developer.mozilla.org/en-US/docs/DOM/element.outerHTML [tools]: https://hacks.mozilla.org/2011/12/new-developer-tools-in-firefox-11-aurora/ [tsa]: https://developer.mozilla.org/en-US/docs/CSS/text-size-adjust ### Firefox 10 (Jan 2012) * CSS 3D transforms * HTML `` element * JS fullscreen API ([docs][fs]) * IndexedDB APIs * Dev tools: CSS Style inspector [fs]: https://wiki.mozilla.org/Platform/Features/Full_Screen_APIs ### Firefox 9 (Dec 2011) * Two-finger swipe in Mac OSX Lion * CSS `font-stretch` * CSS improved `text-overflow` * JS `navigator.doNotTrack` ### Firefox 8 (Nov 2011) ### Firefox 7 (Sep 2011) * CSS `text-overflow: ellipsis` * Hidden `http://` prefix in address bar ### Firefox 6 (Aug 2011) * JS `window.matchMedia` * Websockets (!) * JS EvetnSource / server-sent events ### Firefox 5 (Jun 2011) * CSS animations * Background tab `setTimeout` and `setInterval` clamped to 1000ms ### Firefox 4 (Mar 2011) * Do Not Track (DNT) header * New JS endinge (JagerMonkey) * Hardware-accelerated rendering * WebM video * OpenType ligatures/kerning/font variants * CSS transitions partial support * JS audio data API * JS `mozRequestAnimationFrame` * HTML5 forms API * `` * HTML5 history API * New HTML5 parser * ... ### Firefox 3.6 (Jan 2010) * CSS gradients * CSS pointer events * HTML drag & drop API * HTML `` ### Reference * [Firefox releases](https://www.mozilla.org/en-US/firefox/releases/)"},{"title":"Fish shell","url":"//cheatsheets/fish-shell/","tags":[],"body":"### Keys | Shortcut | Description | | --- | --- | | `Alt ←` _/_ `Alt →` | Move word | | `^U` | Delete to beginning | | `^W` | Delete to previous `/` | | `^D` | Delete next character | | `Alt D` | Delete next word | | `^C` | Cancel line | | `Alt P` | Page output | | --- | --- | | `Alt ↑` _/_ `Alt ↓` | Previous _/_ next arguments | | `Alt E` _/_ `Alt V` | Open in external editor | | `^L` | Repaint screen | {: .-shortcuts} ### Help | `Alt H` | Help on word (man) | | `Alt W` | Help on word (short descriptions) | | `Alt L` | List directory on cursor | {: .-shortcuts} ## Function ### Writing functions ```fish function my_function --description \"My description\" ··· end ``` ### Conditional ```fish if test -f foo.txt ··· else if test -f bar.txt ··· else ··· end ``` ### Combining tests ```fish if test -f foo.txt && test -f bar.txt ``` ```fish if test -f foo.txt -a -f bar.txt ``` ```fish if test \\( -f foo.txt \\) -a -f \\( bar.txt \\) ``` ### Events #### Emitting ```fish emit my_event ``` #### Listening ```fish function myhook --on-event my_event ··· end ``` This lets you hook onto events, such as `fish_prompt`. ## Completions ### Creating completions #### ~/.fish/completions/mycommand.fish ```fish complete -c mycommand ... complete -c mycommand ... complete -c mycommand ... ``` ### Options ```fish complete \\ -c # command -s # short option -l # long option -r, --require-parameter -f, --no-files -x # exclusive (-r -f) -n '__fish_use_subcommand' # condition --description \"..\" ``` #### Example ```fish complete -c $cmd \\ -n '__fish_use_subcommand' \\ -x -a hello \\ --description 'lol' ``` ### Conditions | Condition | Description | --- | --- | `-n __fish_complete_directories STRING DESCRIPTION` | performs path completion on STRING, allowing only directories, and giving them the description DESCRIPTION. | `-n __fish_complete_path STRING DESCRIPTION` | performs path completion on STRING, giving them the description DESCRIPTION. | `-n __fish_complete_groups` | prints a list of all user groups with the groups members as description. | `-n __fish_complete_pids` | prints a list of all processes IDs with the command name as description. | `-n __fish_complete_suffix SUFFIX` | performs file completion allowing only files ending in SUFFIX. The mimetype database is used to find a suitable description. | `-n __fish_complete_users` | prints a list of all users with their full name as description. | `-n __fish_print_filesystems` | prints a list of all known file systems. Currently, this is a static list, and not dependent on what file systems the host operating system actually understands. | `-n __fish_print_hostnames` | prints a list of all known hostnames. This functions searches the fstab for nfs servers, ssh for known hosts and checks the /etc/hosts file. | `-n __fish_print_interfaces` | prints a list of all known network interfaces. | `-n __fish_print_packages` | prints a list of all installed packages. This function currently handles Debian, rpm and Gentoo packages. | `-n __fish_use_subcommand` | | `-n __fish_seen_subcommand_from init` | #### Example ```fish complete -c ruby -s X -x -a '(__fish_complete_directories (commandline -ct))' --description 'Directory' ``` ### Examples Start each example with `complete -c cmdname` ```fish -x # no filename completion ``` ```fish -s d -x -a \"read skip\" # -d {read|skip} ``` ```fish -s d -x # -d ``` ```fish -s f -r # -f FILE ``` ```fish -s f -l force # -f, --force ``` ```fish -a \"(cat /etc/passwd | cut -d : -f 1)\" # first argument as filename ```"},{"title":"Flashlight","url":"//cheatsheets/flashlight/","tags":[],"body":"## Commands {: .-three-column} ### Events and reminders * `add Dinner with Rico 5 pm tomorrow` * `remind Go to school at 2:30pm` * `remind Go to school in 15 mins` ### DuckDuckGo * `!g foo` * `!mdn settimeout` ### System * `shutdown` * `restart` * `logout` * `sleep` * `ejall` * `screen saver` ### Emoji * `emoji grin` * `:rocket:` ### Web search * `/react` Prefix with `/` to do a web search. ### References * [Flashlight](http://flashlight.nateparrott.com/) * [Flashlight on GitHub](https://github.com/nate-parrott/Flashlight) * [Creating a plugin](https://github.com/nate-parrott/Flashlight/wiki/Creating-a-Plugin)"},{"title":"Flow","url":"//cheatsheets/flow/","tags":["Featurable"],"body":"## Getting started {: .-three-column} ### Simple example {: .-prime} ```js /* @flow */ function square (n: number) { return n * n } const four = square(2) ``` {: data-line=\"1,2\"} Most of what you need to do is to simply add annotations to function arguments! See: [flow.org docs](https://flow.org/en/docs/) ### Type inference ```js function square (n: number) { const result = n * n } ``` {: data-line=\"2\"} `result` is inferred to be a number because `number * number` will result in a number. There's no need to give it annotations. ### Type aliases ```js type Person = { name: string, age: number, isAdmin: boolean, likes: Array } ``` {: data-line=\"1,2,3,4,5,6\"} ```js function greet(user: Person) { console.log('hello', user.name) } ``` {: data-line=\"1\"} ```js greet({ name: 'Miles Davis', ··· }) ``` This is the typical way to define the shape of complex objects. ### Variables ```js const count: number = 200 ``` You typically don't need to do this, function args are often enough. See: [Variable types](https://flow.org/en/docs/types/variables/) ### Importing and exporting ```js import type { Person } from './types' ``` ```js export type Person = { ··· } ``` See: [Module types](https://flow.org/en/docs/types/modules) ### Union types ```js type Action = number | string ``` ```js type Direction = 'left' | 'right' ``` See: [Unions](https://flow.org/en/docs/types/unions/) ## Optionals ### Maybe types ```js type Album = { name: ?string } ``` {: data-line=\"2\"} ```js const a: Album = { } // ✗ Error const a: Album = { name: 'Blue' } // ✓ OK const a: Album = { name: null } // ✓ OK const a: Album = { name: undefined } // ✓ OK ``` This makes `name` either a string or null. See: [Maybe types](https://flow.org/en/docs/types/primitives/#toc-maybe-types) ### Optional properties ```js type Album = { name?: string } ``` {: data-line=\"2\"} ```js const a: Album = { } // ✓ OK a.name = 'Blue' // ✓ OK a.name = null // ✗ Error a.name = undefined // ✓ OK ``` This makes an `Album` valid even if `name` is not part of the keys. This is different from \"maybe\" types. See: [Optional properties](https://flow.org/en/docs/types/primitives/#toc-optional-object-properties) ## Objects {: .-three-column} ### Extra object fields ```js type Artist = { name: string, label: string } ``` ```js const a: Artist = { name: 'Miguel Migs', label: 'Naked Music' } a.genre = 'House' // ✓ OK ``` {: data-line=\"6\"} You can add more fields to an object. See: [Width subtyping](https://flow.org/en/docs/lang/width-subtyping/) ### Exact object types ```js type Artist = {| name: string, label: string |} ``` {: data-line=\"1,4\"} ```js const a: Artist = { ··· } a.genre = 'House' // ✗ Error ``` {: data-line=\"2\"} Exact object types prevent extra properties from being added to an object. See: [Exact object types](https://flow.org/en/docs/types/objects/#toc-exact-object-types) ### Dynamic keys ```js type Items = { [key: string]: Item } ``` {: data-line=\"2\"} See: [Dynamic object keys](https://flow.org/docs/objects.html#objects-as-maps) ## Advanced features ### Primitives | Type | Description | | --- | --- | | `any` | | | `boolean` | | | `mixed` | | | `number` | | | `string` | | | `void` | undefined | | `null` | null (but not undefined) | | --- | --- | | `{a: Number}` | Object with a shape | | `[any, number]` | Tuples (fixed-length arrays) | | --- | --- | | `Array` | | | `Class` | | | `Function` | | | `Object` | | | --- | --- | | `?number` | Maybe (number, void, null) | | `a | b` | Union types | ### Enums ```js type Suit = \"Diamonds\" | \"Clubs\" | \"Hearts\" | \"Spades\" const countries = { US: \"United States\", IT: \"Italy\", FR: \"France\" } type Country = $Keys ``` See: [Enums](https://flow.org/docs/utility-types.html#keyst) ### Type aliases ```js type Tree = { foo: string, bar: number, qux: (foo: string, bar: number) => boolean } type Generic = { foo: T } ``` See: [Type aliases](https://flow.org/docs/quick-reference.html#type-aliases) ### Generic classes ```js class GenericClass { x: T constructor (x: T) { ... } } var n: GenericClass = new GenericClass(0) ``` See: [Generic classes](https://flow.org/docs/quick-reference.html#generics) ### Interfaces ```js interface Jsonable { toJSON(): string } class Foo { toJSON() { return '{}' } } (new Foo: Jsonable) ``` See: [Interfaces](https://flow.org/docs/quick-reference.html#interfaces) ### Functions ```js const callback: () => void = function () {} ``` ```js function filter ( list: Array, callback: (item: T) => boolean ): Array { ··· } ``` See: [Functions](https://flow.org/docs/functions.html) ### Imports ```js import type { Person } from '../person' import typeof Config from '../config' ``` ```js export type Person = { id: string } ``` ### Comment syntax ```js /*:: export type Foo = { ... } */ function add(n /*: number */) { ... } ``` ### React ```js type Props = { bar: number, } type State = { open: boolean, } class Foo extends React.Component { // Component code } ``` ## Examples ### Examples ```js var myNumbers: Array = [42] function foo(): any { return 42 } var b: boolean = false var b: ?boolean = false /* maybe */ var b: string | boolean = false var a: Class = MyClass var b: MyClass = new a() ``` ### Function signature ```js type Callback = (?Error, string) => any function fetch (callback: Callback) { ··· } ``` ## References - [Flow website](https://www.saltycrane.com/flow-type-cheat-sheet/latest/) _(flow.org)_ - [Getting started with Flow](https://flow.org/en/docs/getting-started/) _(flow.org)_ - [Flow type cheatsheet](https://www.saltycrane.com/flow-type-cheat-sheet/latest/) _(saltycrane.com)_"},{"title":"Flux architecture","url":"//cheatsheets/flux/","tags":[],"body":"## Architecture * __Dispatchers__ receive *actions* that get dispatched to its listeners. * __Stores__ are objects that store data, usually changed from a dispatcher listener. * __Views__ are React components that listen to Store changes, or emit *actions* to the dispatcher. ---- ## Dispatcher ### Pub-sub [A dispatcher][dispatcher] emits events (`.dispatch()`) to its listeners (`.register(fn)`). ```js var Dispatcher = require('flux').Dispatcher; d = new Dispatcher(); // send d.dispatch({ action: 'edit', ... }; // receive token = d.register(function (payload) { payload.action === 'edit' }) ``` ### Ensuring proper order With multiple listeners, you can ensure one is fired after another using `.waitFor()`. ```js token1 = d.register(...); token2 = d.register(function (payload) { // ensure receiver 1 is fired before this d.waitFor([ token1 ]); // process here }) ``` ### Subclassing [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) is the preferred way to subclass Dispatcher (think `$.extend`). You can also make *action creators*, which are shortcuts for `dispatch()`. ```js var Dispatcher = require('flux').Dispatcher; var assign = require('object-assign'); var AppDispatcher = assign({}, Dispatcher.prototype, { // action creator handleViewAction(action) { this.dispatch({ source: 'VIEW_ACTION', action: action }) } }) ``` ---- ## Stores ### Plain objects Stores are just like objects. ```js var TodoStore = { list: [] }; ``` ### Events Sometimes they're eventemitters, too. Usually it's used to emit `change` events for views to pick up. ```js var TodoStore = assign({}, EventEmitter.prototype, { ... }); TodoStore.emit('change'); TodoStore.on('change', function () { ... }); ``` ### Model logic Logic can sometimes belong in stores. ```js { isAllActive() { return this.list.every(item => item.active); } } ``` ---- ## Stores and dispatchers ### Instantiate Make a Dispatcher and Stores. ```js d = new Dispatcher(); TabStore = { tab: 'home' }; ``` ### Updating data Dispatch events to alter the store. ```js d.dispatch({ action: 'tab.change', tab: 'timeline' }); d.register(function (data) { if (data.action === 'tab.change') { TabStore.tab = data.tab; } }); ``` ---- ## With Views ### Listen to dispatchers Views (React Components) can listen to Dispatchers. ```js var TodoApp = React.createClass({ componentDidMount() { this.token = AppDispatcher.register((payload) => { switch (payload.action) { case 'tab.change': this.render(); // ... } }); }, componentDidUnmount() { AppDispatcher.unregister(this.token); } }); ``` ### Listen to Stores Or to Stores's `change` events. ```js { componentDidMount() { TodoStore.on('change', this.onChange); }, componentDidUnmount() { TodoState.removeListener('change', this.onChange); }, onChange(data) { // ... } } ``` ---- ### Also see * [Dispatcher API][dispatcher] * [React cheatsheet](react.html) * [Dispatcher.js source](https://github.com/facebook/flux/blob/master/src/Dispatcher.js) * [Flux-todomvc explanation](https://github.com/facebook/flux/tree/master/examples/flux-todomvc) [dispatcher]: http://facebook.github.io/flux/docs/dispatcher.html"},{"title":"Flynn","url":"//cheatsheets/flynn/","tags":[],"body":"### General workflow * Start a flynn cluster (on amazon or vagrant) * `flynn cluster add` to add that cluster * `flynn create NAME` in your app * `git push flynn master` to deploy ### Creating a cluster (AWS) ```bash flynn install # (provisions AWS EC2 stuff) flynn key add # (adds your pubkey to AWS) ``` #### What it does * This creates `XXXX.flynnhub.com` * Dashboard in `dashboard.XXXX.flynnhub.com` * Use `flynn -a dashboard env get LOGIN_TOKEN` to get login token * Apps live in `APP.XXXX.flynnhub.com` ### Using a flynn cluster Managed in `~/.flynnrc`: {: .-setup} ```bash flynn cluster flynn cluster add [-g githost] [-p pin] NAME URL KEY flynn cluster remove NAME flynn cluster default NAME # use this current ``` ### Setting up a new app ```bash cd ~/project flynn create example # adds the `flynn` remote flynn route # prints http routes git push flynn master ``` ## Commands ### Environment vars ```bash flynn env flynn env set FOO=bar BAZ=foobar flynn env unset FOO ``` ### Scale ```bash flynn ps flynn scale web=3 ``` ### Logs ```bash flynn log flynn log flynn-d55c7a... ``` ### Running commands ```bash flynn run rake db:migrate ``` ### Manage routes ```bash flynn route flynn route add http example.com # then make a CNAME from example.com to myapp.xxxx.flynnhub.com ``` ### More ```bash flynn ps flynn kill flynn meta flynn meta set foo=baz ``` ## Also see - [Flynn website](https://flynn.io/) _(flynn.io)_"},{"title":"Freenode","url":"//cheatsheets/freenode/","tags":[],"body":"### irc.freenode.net /msg nickserv identify [nick] /msg nickserv info ### Add a nick /nick newnick /msg nickserv identify /msg nickserv group"},{"title":"Frequency separation retouching","url":"//cheatsheets/frequency-separation-retouching/","tags":[],"body":"### Frequency separation retouching in Photoshop Duplicate the layer twice. Perform these in each layer: {: .-setup} #### Lower layer - Apply **Gaussian Blur** #### Upper layer - Set layer mask to **Linear light** - Image → **Apply Image** - Layer: _(select the lower layer)_ - Blending mode: `Subtract` - Scale: `2` - Offset: `128` ### Reference - {: .-also-see}"},{"title":"GitHub pages","url":"//cheatsheets/gh-pages/","tags":[],"body":"## Custom domains ### Custom domains ```sh $ echo \"foobar.com\" > CNAME $ git commit && git push ``` Create a `CNAME` file with your domain on it. See: [Setting up a custom domain](https://help.github.com/articles/quick-start-setting-up-a-custom-domain/) _(github.com)_ ### Set up your domain Subdomain (like www): {: .-setup} CNAME => username.github.io Apex domains: {: .-setup} ALIAS => username.github.io Apex domains (alternative): {: .-setup} A => 192.30.252.153 A => 192.30.252.154 ## References {: .-one-column} -"},{"title":"Git branches","url":"//cheatsheets/git-branch/","tags":[],"body":"## Working with branches {: .-three-column} ### Creating ```bash git checkout -b $branchname git push origin $branchname --set-upstream ``` Creates a new branch locally then pushes it. ### Getting from remote ```bash git fetch origin git checkout --track origin/$branchname ``` Gets a branch in a remote. ### Delete local remote-tracking branches ```bash git remote prune origin ``` Deletes `origin/*` branches in your local copy. Doesn't affect the remote. ### List existing branches ```bash git branch --list ``` Existing branches are listed. Current branch will be highlighted with an asterisk. ### List merged branches ```bash git branch -a --merged ``` List outdated branches that have been merged into the current one. ### Delete a local branch ```bash git branch -d $branchname ``` Deletes the branch only if the changes have been pushed and merged with remote. ### Delete branch forcefully ```bash git branch -D $branchname ``` ```bash git branch -d $branchname ``` > Note: You can also use the -D flag which is synonymous with --delete --force instead of -d. This will delete the branch regardless of its merge status. > Delete a branch irrespective of its merged status. ### Delete remote branch ```bash git push origin --delete :$branchname ``` Works for tags, too! ### Get current sha1 ```bash git show-ref HEAD -s ``` ### Reset branch and remove all changes ```bash git reset --hard ``` ### Undo commits to a specific commit ```bash git reset --hard $commit_id # Now push to your branch git push --force ```"},{"title":"Git extras","url":"//cheatsheets/git-extras/","tags":[],"body":"### Git-flow $ git feature myfeature switched to branch 'feature/rofl' $ ... $ git checkout develop $ git feature finish myfeature merging 'feature/rofl' into develop deleted branch 'feature/rofl' Also `git-bug` and `git-refactor`. ### Branches $ git delete-merged-branches # hint: do `git remote prune origin` after $ git create-branch development $ git delete-branch development $ git fresh-branch gh-pages ### Inspecting $ git summary # repo age, commits, active days, etc $ git impact # impact graph $ git effort # commits per file ### Github $ git fork strongloop/express # sync your fork with the original repository: $ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git $ git fetch upstream; git merge upstream/master ### Tags $ git release v1.0.0 # commit, tag, push-tags $ git delete-tag v1.0.0 ### Conveniences $ git ignore \"*.log\" ### Locking Assumes that changes will not be committed. $ git lock config/database.yml $ git unlock config/database.yml ### Etc $ git obliterate secret.yml # remove all references to it ### References * https://github.com/visionmedia/git-extras"},{"title":"Git log format string","url":"//cheatsheets/git-log-format/","tags":[],"body":"## Log format {: .-three-column} ### Pretty format {: .-prime} ```bash git log --pretty=\"format:%H\" ``` See the next tables on format variables. ### Hash #### Commit | Variable | Description | | --- | --- | | `%H` | commit hash | | `%h` | (abbrev) commit hash | #### Tree | Variable | Description | | --- | --- | | `%T` | tree hash | | `%t` | (abbrev) tree hash | #### Parent | Variable | Description | | --- | --- | | `%P` | parent hash | | `%p` | (abbrev) parent hash | ### Commit | Variable | Description | | --- | --- | | `%s` | commit subject | | `%f` | commit subject, filename style | | `%b` | commit body | | --- | --- | | `%d` | ref names | | `%e` | encoding | ## Author and committer ### Author #### Name | Variable | Description | | --- | --- | | `%an` | author | | `%aN` | author, respecting mailmap | #### Email | Variable | Description | | --- | --- | | `%ae` | author email | | `%aE` | author email, respecting mailmap | #### Date | Variable | Description | | --- | --- | | `%aD` | author date (rfc2882) | | `%ar` | author date (relative) | | `%at` | author date (unix timestamp) | | `%ai` | author date (iso8601) | ### Committer #### Name | Variable | Description | | --- | --- | | `%cn` | committer name | | `%cN` | committer name, respecting mailmap | #### Email | Variable | Description | | --- | --- | | `%ce` | committer email | | `%cE` | committer email, respecting mailmap | #### Date | Variable | Description | | --- | --- | | `%cD` | committer date (rfc2882) | | `%cr` | committer date (relative) | | `%ct` | committer date (unix timestamp) | | `%ci` | committer date (iso8601) | ## Also see - [Git log cheatsheet](./git-log)"},{"title":"git log","url":"//cheatsheets/git-log/","tags":[],"body":"### Revision ranges ```bash git log master # branch git log origin/master # branch, remote git log v1.0.0 # tag git log master develop git log v2.0..master # reachable from *master* but not *v2.0* git log v2.0...master # reachable from *master* and *v2.0*, but not both ``` See [gitrevisions](./git-revisions). ### Basic filters ```bash -n, --max-count=2 --skip=2 ``` ```bash --since=\"1 week ago\" --until=\"yesterday\" ``` ```bash --author=\"Rico\" --committer=\"Rico\" ``` ### Search ```bash --grep=\"Merge pull request\" # in commit messages -S\"console.log\" # in code -G\"foo.*\" # in code (regex) ``` ```bash --invert-grep --all-match # AND in multi --grep ``` ### Limiting ```bash --merges --no-merges ``` ```bash --first-parent # no stuff from merged branches ``` ```bash --branches=\"feature/*\" --tags=\"v*\" --remotes=\"origin\" ``` ### Simplification ```bash git log -- app/file.rb # only file --simplify-by-decoration # tags and branches ``` ### Ordering ```bash --date-order --author-date-order --topo-order # \"smart\" ordering --reverse ``` ### Formatting ```bash --abbrev-commit --oneline --graph ``` ### Custom formats ```bash --pretty=\"format:%H\" ``` See: [Git log format cheatsheet](./git-log-format) ## Also see - [Git log format cheatsheet](./git-log-format)"},{"title":"Git revisions","url":"//cheatsheets/git-revisions/","tags":[],"body":"### Example usages | _`git log`_ `master...develop` | inspect differences in branches | | _`git rebase -i`_ `HEAD~3` | rebase last 3 commits | | _`git reset --hard`_ `HEAD@{2}` | undo last operation that changed HEAD | | _`git checkout`_ `v2^{}` | checkout the `v2` tag (not `v2` branch) | {: .-mute-em} The 3rd argument in each of these commands is a `gitrevision`. These gitrevisions can be passed to many Git commands. ### Common git revisions | Reference | Description | | --- | --- | | _`git show`_ `dae68e1` | sha1 | | _`git show`_ `HEAD` | reference | | _`git show`_ `v1.0.0` | tag | | --- | --- | | _`git show`_ `master` | local branch | | _`git show`_ `origin/master` | remote branch | | --- | --- | | _`git show`_ `master~2` | 2 commits back from master | | --- | --- | | _`git show`_ `master..fix` | reachable from *fix* but not *master* | | _`git show`_ `master...fix` | reachable from *fix* and *master*, but not both | {: .-mute-em} These are just the common ones, there's a lot more below! (These work in many other commands, not just `git show`.) ## Reference ### Commits | _`git checkout`_ `dae68e1` | sha1 | {: .-mute-em} ### References | Example | Description | | --- | --- | | _`git checkout`_ `HEAD` | reference | | _`git checkout`_ `master` | branch | | _`git checkout`_ `v1.0.0` | tag | | --- | --- | | _`git checkout`_ `origin/master` | aka, *refs/remotes/origin/master* | | _`git checkout`_ `heads/master` | aka, *refs/heads/master* | {: .-mute-em} ### Searching back | Example | Description | | --- | --- | | _`git checkout`_ `master@{yesterday}` | also *1 day ago*, etc | | _`git checkout`_ `master@{2}` | 2nd prior value | | _`git checkout`_ `master@{push}` | where *master* would push to | | --- | --- | | _`git checkout`_ `master^` | parent commit | | _`git checkout`_ `master^2` | 2nd parent, eg, what it merged | | _`git checkout`_ `master~5` | 5 parents back | | _`git checkout`_ `master^0` | this commit; disambiguates from tags | | --- | --- | | _`git checkout`_ `v0.99.8^{tag}` | can be *commit*, *tag*, *tree*, *object* | | _`git checkout`_ `v0.99.8^{}` | defaults to *{tag}* | | --- | --- | | _`git checkout`_ `\":/fix bug\"` | searches commit messages | {: .-mute-em} ### Other | `HEAD:README` | ... | | `0:README` | (0 to 3) ... | ## Ranges ### Ranges | _`git log`_ `master` | reachable parents from master | | _`git log`_ `^master` | exclude reachable parents from master | | _`git log`_ `master..fix` | reachable from *fix* but not *master* | | _`git log`_ `master...fix` | reachable from *fix* and *master*, but not both | | _`git log`_ `HEAD^@` | parents of *HEAD* | | _`git log`_ `HEAD^!` | *HEAD*, then excluding parents's ancestors | | _`git log`_ `HEAD^{:/fix}` | search previous *HEAD*s matching criteria | {: .-mute-em} ### Ranges illustration ```nohighlight A ─┬─ E ── F ── G master │ └─ B ── C ── D fix ``` {: .-box-chars.-setup} | _`git log`_ `master..fix` | BCD | | _`git log`_ `master...fix` | BCD and EFG | {: .-mute-em} ## References * [Git Tools - Revision Selection](https://www.kernel.org/pub/software/scm/git/docs/gitrevisions.html) _(git-scm.com)_ * [gitrevisions(7)](https://www.kernel.org/pub/software/scm/git/docs/gitrevisions.html) _(kernel.org)_"},{"title":"Git tricks","url":"//cheatsheets/git-tricks/","tags":[],"body":"## Refs HEAD^ # 1 commit before head HEAD^^ # 2 commits before head HEAD~5 # 5 commits before head ## Branches # create a new branch git checkout -b $branchname git push origin $branchname --set-upstream # get a remote branch git fetch origin git checkout --track origin/$branchname # delete local remote-tracking branches (lol) git remote prune origin # list merged branches git branch -a --merged # delete remote branch git push origin :$branchname # go back to previous branch git checkout - ## Collaboration # Rebase your changes on top of the remote master git pull --rebase upstream master # Squash multiple commits into one for a cleaner git log # (on the following screen change the word pick to either 'f' or 's') git rebase -i $commit_ref Submodules ---------- # Import .gitmodules git submodule init # Clone missing submodules, and checkout commits git submodule update --init --recursive # Update remote URLs in .gitmodules # (Use when you changed remotes in submodules) git submodule sync Diff ---- ### Diff with stats git diff --stat app/a.txt | 2 +- app/b.txt | 8 ++---- 2 files changed, 10 insertions(+), 84 deletions(-) ### Just filenames git diff --summary Log options ----------- --oneline e11e9f9 Commit message here --decorate shows \"(origin/master)\" --graph shows graph lines --date=relative \"2 hours ago\" Misc ---- ### Cherry pick git rebase 76acada^ ### Misc # get current sha1 (?) git show-ref HEAD -s # show single commit info git log -1 f5a960b5 # Go back up to root directory cd \"$(git rev-parse --show-top-level)\" ## Short log $ git shortlog $ git shortlog HEAD~20.. # last 20 commits James Dean (1): Commit here Commit there Frank Sinatra (5): Another commit This other commit ## Bisect git bisect start HEAD HEAD~6 git bisect run npm test git checkout refs/bisect/bad # this is where it screwed up git bisect reset ### Manual bisection git bisect start git bisect good # current version is good git checkout HEAD~8 npm test # see if it's good git bisect bad # current version is bad git bisect reset # abort ## Searching git log --grep=\"fixes things\" # search in commit messages git log -S\"window.alert\" # search in code git log -G\"foo.*\" # search in code (regex) ## GPG Signing git config set user.signingkey # Sets GPG key to use for signing git commit -m \"Implement feature Y\" --gpg-sign # Or -S, GPG signs commit git config set commit.gpgsign true # Sign commits by default git commit -m \"Implement feature Y\" --no-gpg-sign # Do not sign"},{"title":"Jest","url":"//cheatsheets/jest/","tags":["Featurable"],"body":"Testing ------- {: .-three-column} ### Quick start {: .-prime} ```bash npm install --save-dev jest babel-jest ``` {: data-line=\"1\"} ```js /* Add to package.json */ \"scripts\": { \"test\": \"jest\" } ``` ```bash # Run your tests npm test -- --watch ``` See: [Getting started](http://facebook.github.io/jest/docs/en/getting-started.html) ### Writing tests ```js describe('My work', () => { test('works', () => { expect(2).toEqual(2) }) }) ``` See: [describe()](http://facebook.github.io/jest/docs/en/api.html#describename-fn), [test()](http://facebook.github.io/jest/docs/en/api.html#testname-fn), [expect()](http://facebook.github.io/jest/docs/en/expect.html#content) ### BDD syntax ```js describe('My work', () => { it('works', () => { ··· }) }) ``` `it` is an alias for `test`. See: [test()](http://facebook.github.io/jest/docs/en/api.html#testname-fn) ### Setup ```js beforeEach(() => { ... }) afterEach(() => { ... }) ``` ```js beforeAll(() => { ... }) afterAll(() => { ... }) ``` See: [afterAll() and more](http://facebook.github.io/jest/docs/en/api.html#afterallfn) ### Focusing tests ```js describe.only(···) it.only(···) // alias: fit() ``` See: [test.only](http://facebook.github.io/jest/docs/en/api.html#testonlyname-fn) ### Skipping tests ```js describe.skip(···) it.skip(···) // alias: xit() ``` See: [test.skip](http://facebook.github.io/jest/docs/en/api.html#testskipname-fn) Expect ------ {: .-three-column} ### Basic expectations ```js expect(value) .not .toBe(value) .toEqual(value) .toBeTruthy() ``` Note that `toEqual` is a deep equality check. See: [expect()](http://facebook.github.io/jest/docs/en/expect.html#expectvalue) ### Snapshots ```js expect(value) .toMatchSnapshot() ``` ### Errors ```js expect(value) .toThrow(error) .toThrowErrorMatchingSnapshot() ``` ### Booleans ```js expect(value) .toBeFalsy() .toBeNull() .toBeTruthy() .toBeUndefined() .toBeDefined() ``` ### Numbers ```js expect(value) .toBeCloseTo(number, numDigits) .toBeGreaterThan(number) .toBeGreaterThanOrEqual(number) .toBeLessThan(number) .toBeLessThanOrEqual(number) ``` ### Objects ```js expect(value) .toBeInstanceOf(Class) .toMatchObject(object) .toHaveProperty(keyPath, value) ``` ### Objects ```js expect(value) .toContain(item) .toContainEqual(item) .toHaveLength(number) ``` ### Strings ```js expect(value) .toMatch(regexpOrString) ``` ### Others ```js expect.extend(matchers) expect.any(constructor) expect.addSnapshotSerializer(serializer) expect.assertions(1) ``` More features ------------- ### Asynchronous tests ```js test('works with promises', () => { return new Promise((resolve, reject) => { ··· }) }) ``` {: data-line=\"2\"} ```js test('works with async/await', async () => { const hello = await foo() ··· }) ``` {: data-line=\"2\"} Return promises, or use async/await. See: [Async tutorial](http://facebook.github.io/jest/docs/en/tutorial-async.html) ### Snapshots ```jsx it('works', () => { const output = something() expect(output).toMatchSnapshot() }) ``` {: data-line=\"3\"} First run creates a snapshot. Subsequent runs match the saved snapshot. See: [Snapshot testing](http://facebook.github.io/jest/docs/en/snapshot-testing.html) ### React test renderer ```jsx import renderer from 'react-test-renderer' ``` {: .-setup} ```jsx it('works', () => { const tree = renderer.create( Facebook ).toJSON() expect(tree).toMatchSnapshot() }) ``` {: data-line=\"2,3,4\"} React's test renderer can be used for Jest snapshots. See: [Snapshot test](http://facebook.github.io/jest/docs/en/tutorial-react-native.html#snapshot-test) ### Timers ```js jest.useFakeTimers() ``` ```js it('works', () => { jest.runOnlyPendingTimers() jest.runTimersToTime(1000) jest.runAllTimers() }) ``` See: [Timer Mocks](http://facebook.github.io/jest/docs/en/timer-mocks.html) ## Mock functions ### Mock functions ```js const fn = jest.fn() ``` ```js const fn = jest.fn(n => n * n) ``` See: [Mock functions](http://facebook.github.io/jest/docs/en/mock-functions.html#using-a-mock-function) ### Assertions ```js expect(fn) .toHaveBeenCalled() .toHaveBeenCalledTimes(number) .toHaveBeenCalledWith(arg1, arg2, ...) .toHaveBeenLastCalledWith(arg1, arg2, ...) ``` ```js expect(fn) .toHaveBeenCalledWith(expect.anything()) .toHaveBeenCalledWith(expect.any(constructor)) .toHaveBeenCalledWith(expect.arrayContaining([ values ])) .toHaveBeenCalledWith(expect.objectContaining({ props })) .toHaveBeenCalledWith(expect.stringContaining(string)) .toHaveBeenCalledWith(expect.stringMatching(regexp)) ``` ### Instances ```js const Fn = jest.fn() a = new Fn() b = new Fn() ``` ```js Fn.mock.instances // → [a, b] ``` {: data-line=\"1\"} See: [.mock property](http://facebook.github.io/jest/docs/en/mock-functions.html#mock-property) ### Calls ```js const fn = jest.fn() fn(123) fn(456) ``` ```js fn.mock.calls.length // → 2 fn.mock.calls[0][0] // → 123 fn.mock.calls[1][0] // → 456 ``` {: data-line=\"1,2,3\"} See: [.mock property](http://facebook.github.io/jest/docs/en/mock-functions.html#mock-property) ### Return values ```js const fn = jest.fn(() => 'hello') ``` #### or: ```js jest.fn().mockReturnValue('hello') jest.fn().mockReturnValueOnce('hello') ``` ### Mock implementations ```js const fn = jest.fn() .mockImplementationOnce(() => 1) .mockImplementationOnce(() => 2) ``` {: data-line=\"2,3\"} ```js fn() // → 1 fn() // → 2 ``` ## References {: .-one-column} - {: .-also-see}"},{"title":"jQuery CDN","url":"//cheatsheets/jquery-cdn/","tags":[],"body":"### Google jQuery"},{"title":"jQuery","url":"//cheatsheets/jquery/","tags":["WIP"],"body":"### Traversing ```js $('.box') .children() .closest('div') .filter(':selected') .find('div') .has('div') .first() .next('div') .nextUntil('div') ``` ## Advanced features ### Extending selectors ```js $.expr[':'].inline = function (el) { return $(el).css('display') === 'inline' } ``` Enables `$(':inline')` ### Extend CSS properties ```js $.cssHooks.someCSSProp = { get: function (elem, computed, extra) { }, set: function (elem, value) { } } // Disable \"px\" $.cssNumber[\"someCSSProp\"] = true ``` ### fn.animate() hooks ```js $.fn.step.someWhatever = function(fx) { // ... } ```"},{"title":"fetch()","url":"//cheatsheets/js-fetch/","tags":[],"body":"### Fetch {: .-prime} ```js fetch('/data.json') .then(response => response.json()) .then(data => { console.log(data) }) .catch(err => ...) ``` {: data-line=\"4\"} ### Response ```js fetch('/data.json') .then(res => { res.text() // response body (=> Promise) res.json() // parse via JSON (=> Promise) res.status //=> 200 res.statusText //=> 'OK' res.redirected //=> false res.ok //=> true res.url //=> 'http://site.com/data.json' res.type //=> 'basic' // ('cors' 'default' 'error' // 'opaque' 'opaqueredirect') res.headers.get('Content-Type') }) ``` ### Request options ```js fetch('/data.json', { method: 'post', body: new FormData(form), // post body body: JSON.stringify(...), headers: { 'Accept': 'application/json' }, credentials: 'same-origin', // send cookies credentials: 'include', // send cookies, even in CORS }) ``` ### Catching errors ```js fetch('/data.json') .then(checkStatus) ``` ```js function checkStatus (res) { if (res.status >= 200 && res.status -"},{"title":"JavaScript lazy shortcuts","url":"//cheatsheets/js-lazy/","tags":[],"body":"## Shortcuts {: .-left-reference} ### Examples ```js n = +'4096' // n === 4096 s = '' + 200 // s === '200' ``` ```js now = +new Date() isPublished = !!post.publishedAt ``` ### Shortcuts | What | Lazy mode | \"The right way\" | | --- | --- | --- | | String to number | `+str` | `parseInt(str, 10)` _or_ `parseFloat()` | | Math floor | `num | 0` | `Math.floor(num)` | | Number to string | `'' + num` | `num.toString()` | | Date to UNIX timestamp | `+new Date()` | `new Date().getTime()` | | Any to boolean | `!!value` | `Boolean(value)` | | Check array contents | `if (~arr.indexOf(v))` | `if (arr.includes(v))` | {: .-left-align.-headers} `.includes` is ES6-only, otherwise use `.indexOf(val) !== -1` if you don't polyfill."},{"title":"js-model","url":"//cheatsheets/js-model/","tags":[],"body":"### Example ```bash Project = Model \"project\", -> @extend findByTitle: (title) -> ... @include markAsDone: -> ... # ActiveRecord::Base.include_root_in_json = false ``` ```bash project = Project.find(1) project = Project.findByTitle(\"hello\") project.markAsDone() ``` ### Persistence ```bash Project \"hi\", -> @persistence Model.REST, \"/projects\" @persistence Model.localStorage ``` ```bash Project.load -> # loaded ``` ### Attrs ```bash project = new Project(name: \"Hello\") project.attr('name', \"Hey\") project.attr('name') project.save() project.destroy() ``` ### Collection ```bash Food.add(egg) Food.all() Food.select (food) -> ... Food.first() ``` ```bash Food.find(id) ``` ### Events ```bash # Classes Project.bind \"add\", (obj) -> Project.bind \"remove\", (obj) -> ``` ```bash # Instances project.bind \"update\", -> project.bind \"destroy\", -> ``` ```bash project.trigger \"turn_blue\" ``` ## References {: .-one-column} -"},{"title":"JavaScript speech synthesis","url":"//cheatsheets/js-speech/","tags":[],"body":"## SpeechSynthesisUtterance {: .-one-column} ```js function speak (message) { var msg = new SpeechSynthesisUtterance(message) var voices = window.speechSynthesis.getVoices() msg.voice = voices[0] window.speechSynthesis.speak(msg) } ``` ```js speak('Hello, world') ``` See: [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) _(developer.mozilla.org)_"},{"title":"jscoverage","url":"//cheatsheets/jscoverage/","tags":[],"body":"### Install #### Install via npm ```bash npm install --save-dev jscoverage ``` #### Ignore output ```bash echo coverage.html >> .gitignore ``` ### package.json The `coverage` task injects your source files (`lib`) with jscoverage hooks, runs `mocha -R html-cov`, then restores later. {: .-setup} ```bash /* directory */ \"coverage\": \"mv lib lib~; (jscoverage lib~ lib; mocha -R html-cov > coverage.html); rm -rf lib; mv lib~ lib\" ``` {: .-hard-wrap} ```bash /* single file */ \"coverage\": \"(cp index.js index.js~; jscoverage index.js; mv index-cov.js index.js; mocha -R html-cov > coverage.html); mv index.js~ index.js\" ``` {: .-hard-wrap} ### Run ```bash npm run coverage ``` ```bash open coverage.html ``` ### Caveats If you're using jsdom, be sure to expose the `window._$jscoverage` variable into the `global` scope."},{"title":"Jshint","url":"//cheatsheets/jshint/","tags":[],"body":"Relaxing Enable these options to not throw errors in these conditions. See: Relaxing /* jshint asi: true */ allow() missing_semicolons() /* jshint boss: true */ if (m = str.match(/.../)) /* jshint debug: true */ debugger; /* jshint eqnull: true */ if (x == null) /* jshint evil: true */ eval('...') /* jshint expr: true */ production && minify = true; div.innerWidth; expect(x).be.true; /* jshint laxcomma: true */ var one = 1 , two = 2; /* jshint loopfunc: true */ for (i=0; i<10; x++) { (function(i) { ... })(i); } /* jshint sub: true */ process.env['name_here'] /* jshint strict: \"global\" */ \"use strict\"; Enforcing Enable these options to catch more errors. See: Enforcing /* jshint curly: true */ while (day) // err: use { }'s shuffle(); /* jshint eqeqeq: true */ if (a == null) // err: use === /* jshint es3: true */ // ...for legacy IE compatibility a.default = function() { ... }; // err: reserved word array = [ 1, 2, 3, ]; // err: extra comma /* jshint forin: true */ for (key in obj) { ... } // err: check obj.hasOwnProperty(key) /* jshint freeze: true */ Array.prototype.count = ...; // err: don't modify native prototypes /* jshint indent: 4 */ if (x) { // err: expected indent of 4, found 2 ...; } /* jshint quotmark: single */ /* jshint quotmark: double */ alert(\"hi\"); // err: only single allowed /* jshint strict: true */ function() { ... } // err: need \"use strict\" /* jshint white: true, indent: 4 */ /* jshint maxdepth: 2 */ /* jshint maxparams: 3 */ /* jshint maxstatements: 4 */ /* jshint maxcomplexity: 5 */ /* jshint maxlen: 80 */ Ignore /* jshint ignore:start */ /* jshint ignore:end */ Globals and Environments /* jshint undef: true */ /* global jQuery */ /* global -BAD_LIB */ /* jshint devel: true */ console, alert, ... /* jshint browser: true */ window, document, location, ... /* jshint node: true */ module, exports, console, process, ... /* jshint jquery: true */ jQuery, $ See: Environments Also see http://www.jshint.com/docs/options/ https://gist.github.com/haschek/2595796"},{"title":"Linux","url":"//cheatsheets/linux/","tags":[],"body":"### Mounting a RAM drive $ mount -t tmpfs -o size=5G,nr_inodes=5k,mode=700 tmpfs /tmp ### Visudo sudo visudo username ALL=(ALL) NOPASSWD:/sbin/restart whatever ### Display the amount of available disk space ```sh df df -h # human-readable format df -a # all filesystems ``` ### Display disk usage ```sh du du -hsx * | sort -rh | head -10 # largest 10 folders ``` ### Answer yes in a bash script ```bash yes | /your/command ```"},{"title":"npm","url":"//cheatsheets/npm/","tags":[],"body":"### Package management | Command | Description | | --- | --- | | `npm i` | Alias for `npm install` | | `npm install` | Install everything in package.json | | `npm install --production` | Install everything in package.json, except devDependecies | | --- | --- | | `npm install lodash` | Install a package | | `npm install --save-dev lodash` | Install as devDependency | | `npm install --save-exact lodash` | Install with exact | `--save` is the default as of npm@5. Previously, using `npm install` without `--save` doesn't update package.json. ### Install names | Command | Description | | --- | --- | | `npm i sax` | NPM package | | `npm i sax@latest` | Specify tag `latest` | | `npm i sax@3.0.0` | Specify version `3.0.0` | | `npm i sax@\">=1 <2.0\"` | Specify version range | | --- | --- | | `npm i @org/sax` | Scoped NPM package | | --- | --- | | `npm i user/repo` | GitHub | | `npm i user/repo#master` | GitHub | | `npm i github:user/repo` | GitHub | | `npm i gitlab:user/repo` | GitLab | | --- | --- | | `npm i /path/to/repo` | Absolute path | | `npm i ./archive.tgz` | Tarball | | `npm i https://site.com/archive.tgz` | Tarball via HTTP | ### Listing | Command | Description | | --- | --- | | `npm list` | Lists the installed versions of all dependencies in this software | | `npm list -g --depth 0` | Lists the installed versions of all globally installed packages | | `npm view` | Lists the latest versions of all dependencies in this software | | `npm outdated` | Lists only the dependencies in this software which are outdated | ### Updating | Command | Description | | --- | --- | | `npm update` | Update production packages | | `npm update --dev` | Update dev packages | | `npm update -g` | Update global packages | | --- | --- | | `npm update lodash` | Update a package | ### Misc features ```bash # Add someone as an owner npm owner add USERNAME PACKAGENAME ``` ```bash # list packages npm ls ``` ```bash # Adds warning to those that install a package of old versions npm deprecate PACKAGE@\"< 0.2.0\" \"critical bug fixed in v0.2.0\" ``` ```bash # update all packages, or selected packages npm update [-g] PACKAGE ``` ```bash # Check for outdated packages npm outdated [PACKAGE] ```"},{"title":"Controllers","url":"//cheatsheets/rails-controllers/","tags":[],"body":"### Common stuff redirect_to root_url redirect_to root_url, notice: \"Good.\" ### Special hashes session[:user_id] = nil flash[:notice] = \"Hello\" # Gets flushed on next request flash.keep # Persist flash values flash.now[:error] = \"Boo\" # Available on the same request cookies[:hello] = \"Hi\" params[:page] # params is a combination of: query_parameters path_parameters request_parameters ### respond_to respond_to do |format| format.html format.xml { render xml: @users } format.json { render json: @users } format.js # Will be executed by the browser end ### default_url_options # The options parameter is the hash passed in to 'url_for' def default_url_options(options) {:locale => I18n.locale} end ### Filters # Filter with callbacks before_filter :authenticate before_filter :authenticate, except: [:login] before_filter :authenticate, only: [:login] def authenticate redirect_to login_url unless controller.logged_in? end # Filter with inline before_filter do |controller| redirect_to login_url unless controller.logged_in? end # Filter with external classes before_filter LoginFilter class LoginFilter def self.filter(controller) ...; end end # Filter exceptions skip_before_filter :require_login, only: [:new, :create] # Before/after filters around_filter :wrap_in_transaction def wrap_in_transaction(&blk) ActiveRecord::Base.transaction { yield } end ### HTTP basic authentication before_filter :authenticate # Basic authentication: def authenticate authenticate_or_request_with_http_basic { |u, p| u == \"root\" && p == \"alpine\" } end # ...or digest (hashed) authentication: # uses the ha1 hash (username:realm:password) def authenticate_by_digest realm = \"Secret3000\" users = { \"rsc\" => Digest::MD5.hexdigest(\"rsc:#{realm}:passwordhere\") } authenticate_or_request_with_http_digest(realm) { |user| users[user] } end # For integration tests def test_access auth = ActionController::HttpAuthentication::Basic.encode_credentials(user, pass) get \"/notes/1.xml\", nil, 'HTTP_AUTHORIZATION' => auth end # Token auth is_logged_in = authenticate_with_http_token do |token, options| token == our_secret_token end request_http_token_authentication unless is_logged_in ### Request/response request.host #=> \"www.example.com\" request.domain #=> \"www.example.com\" request.domain(n=2) #=> \"example.com\" request.port #=> 80 request.protocol #=> \"http://\" request.query_string #=> \"q=duck+tales\" request.url #=> \"http://www.example.com/search?q=duck+tales\" request.fullpath #=> \"/search?q=duck+tales\" request.headers # Returns a hash request.format #=> \"text/html\" request.remote_ip #=> \"203.167.220.220\" request.local? #=> true (if localhost/127.0.0.1) request.xhr? request.method #=> \"POST\" request.method_symbol #=> :post request.get? request.post? request.put? request.delete? request.head? ### response response.body response.status #=> 404 response.location # Redirect location response.content_type response.charset response.headers response.headers[\"Content-Type\"] = \"application/pdf\" ### Streaming send_data pdfdata, filename: \"foo.pdf\", type: \"application/pdf\" send_file Rails.root.join('public','filename.txt') [filename: '..', type: '..'] ### References * [Guide](http://guides.rubyonrails.org/action_controller_overview.html) * [HttpAuthentication::Basic](http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html) * [HttpAuthentication::Token](http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Token.html)"},{"title":"Rails features","url":"//cheatsheets/rails-features/","tags":[],"body":"### [Page caching](https://github.com/rails/actionpack-page_caching) class WeblogController < ActionController::Base caches_page :show, :new end This will generate cache files such as `weblog/show/5.html` and `weblog/new.html`, which match the URLs used that would normally trigger dynamic page generation"},{"title":"Form helpers","url":"//cheatsheets/rails-forms/","tags":[],"body":"## Form builder ```haml - form_for @post do |f| ``` Field names will be prefixed with `post` (the class name), and values will be derived from this object (eg, `f.text_field :name` from `@post.name`). ### Options ```haml - form_for @post, | url: { method: 'put', action: 'create' }, | html: { class: 'nifty_form' } | do |f| ``` ## Fields ### Text ```rb f.text_field :title f.text_area :body, size: '60x12' ``` ### Checkbox ```rb f.check_box :remember_me f.label :remember_me, \"Remember me\" ``` ### Radio ```rb f.radio_button :gender, 'male' f.label :gender_male, \"Male\" f.radio_button :gender, 'female' f.label :gender_female, \"Female\" ``` ### Label ```rb f.label :title f.label :title, \"Title\" f.label :title, \"Title\", class: \"title\" f.label(:post, :terms) { \"Accept terms\" } ``` ### Submit button ```rb f.submit \"Create\" ``` ### Hidden fields ```rb f.hidden_field :id ``` ## Misc ### The model ```ruby f.object ``` ### Fields for ```haml = form_for @post do |f| = fields_for :author, @post.author do |ff| = ff.text_field :name ``` ### Select dropdowns ```rb f.select :city_id, [['Lisbon',1], ['Madrid',2], ...], 4 # (4 = selected) options_for_select [['Lisbon',1], ['Madrid',2], ...], 4 # Just makes tags ``` ### Collections ``` f.collection_radio_buttons :author_id, Author.all, :id, :name_with_initial f.collection_select :city_id, City.all, :id, :name # (field, collection, value_key, label_key) ``` ### Time select ```rb f.time_zone_select :time_zone f.date_select :birthday ``` ### I18n ```yaml helpers: submit: # helpers.submit. create: \"Create a %{model}\" update: \"Confirm changes to %{model}\" # helpers.submit.. article: create: \"Publish article\" update: \"Update article\" # helpers.label.. label: post: body: \"Your body text\" ``` ### Outside `f` ```rb radio_button(\"post\", \"category\", \"rails\") radio_button(\"post\", \"category\", \"java\") # picks from @post.category # ``` ### Reference ```rb select(method, choices = nil, options = {}, html_options = {}, &block) choices == [ ['label', id], ... ] submit(value=nil, options={}) ```"},{"title":"Rails gems","url":"//cheatsheets/rails-gems/","tags":[],"body":"### Rico's preferred rails gems Development: gem 'spring' # code reloading gem 'letter_opener' gem 'better_errors' gem 'meta-tags' gem 'guard-rspec' Prod: gem 'kaminari' # pagination gem 'devise' gem 'meta-tags', require: 'meta_tags' gem 'friendly_id' gem 'bourbon' gem 'neat' gem 'turbolinks'"},{"title":"Helpers","url":"//cheatsheets/rails-helpers/","tags":[],"body":"### Date distance_of_time_in_words(Time.now, project.end_date) #=> 3 hours distance_of_time_in_words_to_now(project.end_date) #=> 3 hours time_ago_in_words 3.minutes.ago #=> \"3 minutes\" ### Numbers number_to_currency 20.33 number_to_currency 20.33, precision: 0 number_with_precision 3.14159, precision: 2 number_to_percentage 32 #=> \"32%\" number_with_delimiter 2048 #=> \"2,048\" number_to_human 12000000 #=> \"12 million\" number_to_human_size 12000000 #=> \"12 MB\" number_to_phone \"5551234\" #=> \"555-1234\" ### Cache ### Tags tag(\"br\") tag(\"img\", src: \"image.jpg\") content_tag(:p, \"Hello\") ### Time select # Creates a time select tag that, when POSTed, will be stored in the article # variable in the sunrise attribute. time_select \"article\", \"start_time\" # All options are optional time_select \"article\", \"start_time\", \\ include_seconds: true, minute_step: 15, prompt: true, prompt: { hour: \"Choose hr\", minute: \"Choose min\", second: \"Choose sec\" }, ampm: true # For dates (all options are optional) date_select \"article\", \"written_on\", \\ start_year: 1995, use_month_numbers: true, discard_day: true, include_blank: true, order: [:day, :month, :year], default: 3.days.from_now, default: { day: 20 }, prompt: { day: 'Select day', month: 'Select month', year: 'Select year' } ### Time tag time_tag Date.today #=> 'November 04, 2010' time_tag Time.now #=> 'November 04, 2010 17:55' time_tag Date.yesterday, 'Yesterday' #=> 'Yesterday' time_tag Date.today, pubdate: true #=> 'November 04, 2010' time_tag Date.today, \\ format: :short_date # (en.time.formats.short_date) ### Files = form_for @post, multipart: true do |f| = f.file_field :picture ### i18n t('folders') t('folders.save') l(Time.now) t('x_files', count: files.count) # files: # one: 'one file' # other: '%{count} files' ### References * http://api.rubyonrails.org/classes/ActionView/Helpers.html"},{"title":"i18n","url":"//cheatsheets/rails-i18n/","tags":[],"body":"```rb t('my.messages.hello') # same as 'my.messages.hello' t(:hello, scope: 'my.messages') t(:hello, scope: [:my, :messages]) t('my.messages.hello', default: \"Hello\") ``` {:.light} ```yml en: my: messages: hello: \"Hello\" ``` ### Interpolation ```rb t('hello', name: \"John\") ``` {:.light} ```yml hello: \"Hello %{name}\" ``` ### Lazy lookup ```rb # from the 'books/index' view t('.title') ``` {:.light} ```yml en: books: index: title: \"Título\" ``` ### Plural ```rb t(:inbox, count: 1) #=> 'one message' t(:inbox, count: 2) #=> '2 messages' ``` {:.light} ```yml inbox: one: 'one message', other: '%{count} messages' ``` ## Localizing ### Time ```rb l(Time.now) l(Time.now, format: :short) ``` {:.light} ```yml en: time: formats: default: \"%a, %d %b %Y %H:%M:%S %z\" long: \"%B %d, %Y %H:%M\" short: \"%d %b %H:%M\" ``` ### Date ```rb l(Date.today) ``` {:.light} ```yml en: date: formats: default: \"%Y-%m-%d\" # 2015-06-25 long: \"%B %d, %Y\" # June 25, 2015 short: \"%b %d\" # Jun 25 ``` ## ActiveRecord ### Model names ```rb User.model_name.human #=> \"User\" Child.model_name.human(count: 2) #=> \"Children\" ``` {:.light} ```yml en: activerecord: models: user: \"User\" child: one: \"Child\" other: \"Children\" ``` ### Attributes ```rb User.human_attribute_for :name #=> \"Name\" ``` {:.light} ```yml en: activerecord: attributes: user: # activerecord.attributes.. name: \"Name\" email: \"Email\" ``` ### Error messages ```rb error_messages_for(...) ``` {:.light} ```yml activerecord: errors: models: venue: attributes: name: blank: \"Please enter a name.\" ``` Possible scopes (in order): ```yml activerecord.errors.models.[model_name].attributes.[attribute_name].[error] activerecord.errors.models.[model_name].[error] activerecord.errors.messages.[error] errors.attributes.[attribute_name].[error] errors.messages.[error] ``` Where `[error]` can be: ```yml validates confirmation - :confirmation acceptance - :accepted presence - :blank length - :too_short (%{count}) length - :too_long (%{count}) length - :wrong_length (%{count}) uniqueness - :taken format - :invalid numericality - :not_a_number ``` ### Form labels ```rb form_for @post do f.label :body ``` {:.light} ```yml helpers: # helpers.label.. label: post: body: \"Your body text\" ``` ### Submit buttons ```rb form_for @post do f.submit ``` {:.light} ```yml helpers: submit: # helpers.submit. create: \"Create a %{model}\" update: \"Confirm changes to %{model}\" # helpers.submit.. article: create: \"Publish article\" update: \"Update article\" ``` ## Numbers ```rb number_to_delimited(2000) #=> \"2,000\" number_to_currency(12.3) #=> \"$12.30\" number_to_percentage(0.3) #=> \"30%\" number_to_rounded(3.14, precision: 0) #=> \"3\" number_to_human(12_000) #=> \"12 Thousand\" number_to_human_size(12345) #=> \"12.3 kb\" ``` {:.light} ### Delimited ```rb number_to_delimited(n) ``` {:.light} ```yml number: format: separator: '.' delimiter: ',' precision: 3 significant: false strip_insignificant_zeroes: false ``` ### Currencies ```rb number_to_currency(n) ``` {:.light} ```yml number: currency: format: format: \"%u%n\" # %u = unit, %n = number unit: \"$\" separator: '.' delimiter: ',' precision: 3 # (see number.format) ``` ### Percentage ```rb number_to_percentage(n) ``` {:.light} ```yml number: percentage: format: format: \"%n%\" # (see number.format) ``` ## Programmatic access ```rb I18n.backend.store_translations :en, ok: \"Ok\" I18n.locale = :en I18n.default_locale = :en I18n.available_locales I18n.translate :ok # aka, I18n.t I18n.localize date # aka, I18n.l ``` {:.light} ## Reference * http://guides.rubyonrails.org/i18n.html * http://rails-i18n.org/wiki * https://github.com/svenfuchs/i18n * https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/en.yml"},{"title":"Migrations","url":"//cheatsheets/rails-migrations/","tags":[],"body":"### Automatically make migrations $ rails generate migration RemovePartNumberFromProducts part_number:string $ rails generate migration remove_part_number_from_products part_number # rails assumes string if not type given - and you can use snake_case $ rails generate migration AddNameToWidgets name:string $ rails g migration add_name_to_widgets name:string # you can use the short cut 'g' instead of generate - they both do the same thing ### Run migrations $ rake db:migrate ### Creating tables create_table :users do |t| t.string :name t.text :description t.primary_key :id t.string :title t.text :description t.integer :games_count t.float :lol t.decimal :price t.decimal :price, :precision => 2, :scale => 10 t.datetime :expiration t.timestamp :time_in t.time :time_in t.date :expiry t.binary :image_data t.boolean :is_admin end # Options: :null (boolean) :limit (integer) :default ### Operations add_column :users, :first_name, :string remove_column :users, :first_name, :string change_column :users, :first_name, :text change_column :users, :first_name, :text change_column_default :users, :admin, nil change_column_null :users, :email, false # adds NOT NULL constraint create_table change_table drop_table add_column change_column rename_column remove_column add_index remove_index ### Use models class AddFlagToProduct true # Named (:name => ...) add_index :accounts, [:branch_id, :party_id], :unique => true, :name => \"by_branch_party\" # Length add_index :accounts, :name, :name => ‘by_name’, :length => 10 add_index :accounts, [:name, :surname], :name => ‘by_name_surname’, :length => { :name => 10, :surname => 15 } # Sort order (no MySQL support) add_index :accounts, [:branch_id, :party_id, :surname], :order => {:branch_id => :desc, :part_id => :asc} ### In console Use `ActiveRecord::Migration`. ActiveRecord::Migration.add_index :posts, :slug ### References * http://apidock.com/rails/ActiveRecord/ConnectionAdapters/SchemaStatements/add_index"},{"title":"Rails models","url":"//cheatsheets/rails-models/","tags":[],"body":"Generating ---------- ### Generating $ rails g model User Using models ------------ ### Query methods ```ruby items = Model .where(first_name: 'Harvey') .where('id = 3') .where('id = ?', 3) ``` ```ruby .order(:title) .order(title: :desc) .order(\"title DESC\") ``` ```ruby .reorder(:title) # discards other .order's .rewhere(...) # discards other .where's ``` ```ruby .limit(2) .offset(1) .uniq ``` See: [QueryMethods](http://devdocs.io/rails/activerecord/querymethods) ### Advanced query methods ```ruby items = Model .select(:id) .select([:id, :name]) ``` ```ruby .group(:name) # GROUP BY name .group('name AS grouped_name, age') .having('SUM(price) > 30') # needs to be chained with .group ``` ```ruby .includes(:user) .includes(user: [:articles]) ``` ```ruby .references(:posts) # aka: .where(\"posts.name = 'foo'\").references(:posts) ``` ### Finder methods ```ruby item = Model.find(id) item = Model.find_by_email(email) item = Model.where(email: email).first ``` ```ruby Model .exists?(5) .exists?(name: \"David\") ``` ```ruby .first .last .find_nth(4, [offset]) ``` See: [FinderMethods](http://devdocs.io/rails/activerecord/findermethods) ### Persistence ```ruby item.new_record? item.persisted? item.destroyed? item.serialize_hash ``` ```ruby item.save item.save! # Same as above, but raises an Exception ``` ```ruby item.update name: 'John' # Saves immediately item.update! name: 'John' ``` ```ruby item.update_column :name, 'John' # skips validations and callbacks item.update_columns name: 'John' item.update_columns! name: 'John' ``` ```ruby item.touch # updates :updated_at item.touch :published_at ``` ```ruby item.destroy item.delete # skips callbacks ``` ```ruby Model.create # Same an #new then #save Model.create! # Same as above, but raises an Exception ``` See: [Persistence](http://devdocs.io/rails/activerecord/persistence) ### Attribute Assignment ```ruby item.attributes # # ``` ```ruby item.attributes = { name: 'John' } # Merges attributes in. Doesn't save. item.assign_attributes name: 'John' # Same as above ``` See: [AttributeAssignment](http://devdocs.io/rails/activerecord/attributeassignment) ### Dirty ```ruby item.changed? item.changed # ['name'] item.changed_attributes # { 'name' => 'Bob' } - original values item.changes # { 'name' => ['Bob', 'Robert'] } item.previous_changes # available after #save item.restore_attributes ``` ```ruby item.name = 'Robert' item.name_was # 'Bob' item.name_change # [ 'Bob', 'Robert' ] item.name_changed? # true item.name_changed?(from: 'Bob', to: 'Robert') ``` See: [Dirty](http://devdocs.io/rails/activemodel/dirty) ### Validations ```ruby item.valid? item.invalid? ``` See: [Validations](http://devdocs.io/rails/activerecord/validations) ### Calculations ```ruby Person.count Person.count(:age) # counts non-nil's ``` ```ruby Person.average(:age) Person.maximum(:age) Person.minimum(:age) Person.sum('2 * age') ``` ```ruby Person.calculate(:count, :all) ``` Advanced: ```ruby Person.distinct.count Person.group(:city).count ``` See: [Calculations](http://devdocs.io/rails/activerecord/calculations) ### Dynamic attribute-based finders Given a field called `name`: {: .-setup} ```ruby # Returns one record Person.find_by_name(name) Person.find_last_by_name(name) Person.find_or_create_by_name(name) Person.find_or_initialize_by_name(name) ``` ```ruby # Returns a list of records Person.find_all_by_name(name) ``` ```ruby # Add a bang to make it raise an exception Person.find_by_name!(name) ``` ```ruby # You may use `scoped` instead of `find` Person.scoped_by_user_name ``` Associations ------------ ### Associations - `belongs_to` - `has_one` - `has_many` - `has_many :through` - `has_one :through` - `has_and_belongs_to_many` ### Has many ```ruby belongs_to :parent, :foreign_key => 'parent_id' class_name: 'Folder' has_many :folders, :foreign_key => 'parent_id', class_name: 'Folder' has_many :comments, -> { order('posted_on DESC') } has_many :comments, :include => :author has_many :people, :class_name => \"Person\" has_many :people, :conditions => \"deleted = 0\" has_many :tracks, -> { order(:position) } has_many :comments, :dependent => :nullify has_many :comments, :dependent => :destroy has_many :tags, :as => :taggable has_many :reports, :readonly => true has_many :subscribers, :through => :subscriptions, class_name: \"User\", :source => :user has_many :subscribers, :finder_sql => 'SELECT DISTINCT people.* ' + 'FROM people p, post_subscriptions ps ' + 'WHERE ps.post_id = #{id} AND ps.person_id = p.id ' + 'ORDER BY p.first_name' ``` ### belongs to ```ruby belongs_to :author, :dependent => :destroy # or :delete :class_name => \"Person\" :select => \"*\" :counter_cache => true :counter_cache => :custom_counter :include => \"Book\" :readonly => true :conditions => 'published = true' :touch => true :touch => :authors_last_updated_at :primary_key => \"name\" :foreign_key => \"author_name\" ``` ### Many-to-many If you have a join model: {: .-setup} ```ruby class Programmer :assignments end ``` {: data-line=\"2,3\"} ```ruby class Project :assignments end ``` {: data-line=\"2,3\"} ```ruby class Assignment belongs_to :project belongs_to :programmer end ``` {: data-line=\"2,3\"} ### Many-to-many (HABTM) ```ruby has_and_belongs_to_many :projects has_and_belongs_to_many :projects, :include => [ :milestones, :manager ] has_and_belongs_to_many :nations, :class_name => \"Country\" has_and_belongs_to_many :categories, :join_table => \"prods_cats\" has_and_belongs_to_many :categories, :readonly => true has_and_belongs_to_many :active_projects, :join_table => 'developers_projects', :delete_sql => \"DELETE FROM developers_projects WHERE active=1 AND developer_id = #{id} AND project_id = #{record.id}\" ``` ### Polymorphic associations ```ruby class Post has_many :attachments, as: :parent end ``` {: data-line=\"2\"} ```ruby class Image belongs_to :parent, polymorphic: true end ``` {: data-line=\"2\"} And in migrations: ```ruby create_table :images do |t| t.references :post, polymorphic: true end ``` {: data-line=\"2\"} Validation ---------- ### Validation ```ruby class Person 6..20 } validates :number, length: { is: => 6 } ``` ```ruby # Include/exclude validates :gender, inclusion: %w(male female) validates :gender, inclusion: { in: %w(male female) } validates :lol, exclusion: %w(xyz) ``` ```ruby # Numeric validates :points, numericality: true validates :played, numericality: { only_integer: true } # ... greater_than, greater_than_or_equal_to, # ... less_than, less_than_or_equal_to # ... odd, even, equal_to ``` ```ruby # Validate the associated records to ensure they're valid as well has_many :books validates_associated :books ``` ```ruby # Length (full options) validates :content, length: { minimum: 300, maximum: 400, tokenizer: lambda { |str| str.scan(/\\w+/) }, too_short: \"must have at least %{count} words\", too_long: \"must have at most %{count} words\" } ``` ```ruby # Multiple validates :login, :email, presence: true ``` ```ruby # Conditional validates :description, presence: true, if: :published? validates :description, presence: true, if: lambda { |obj| .. } ``` ```ruby validates :title, presence: true, on: :save # :save | :create | :update ``` ```ruby end ``` {: .-setup} ### Custom validations ```ruby class Person [\"can't be blank\"] } record.errors.messages # → { :name => [\"can't be blank\"] } ``` ```ruby record.errors[:name].any? ``` Other API --------- ### Callbacks * [Guides: callbacks](http://guides.rubyonrails.org/active_record_validations_callbacks.html) ### Mass updates ```ruby # Updates person id 15 Person.update 15, name: \"John\", age: 24 Person.update [1,2], [{name: \"John\"}, {name: \"foo\"}] ``` ### Joining ```ruby # Basic joins Student.joins(:schools).where(schools: { type: 'public' }) Student.joins(:schools).where('schools.type' => 'public' ) ``` ```ruby # Multiple associations Article.joins(:category, :comments) ``` ```ruby # Nested associations Article.joins(comments: :guest) ``` ```ruby # SQL Author.joins( 'INNER JOIN posts ' + 'ON posts.author_id = authors.id ' + 'AND posts.published = \"t\"' ) ``` ### Where interpolation ```ruby where('name = ?', 'John') where(['name = :name', { name: 'John' }]) ``` ### Serialize ```ruby class User 'black', 'display' => 'large' } ) ``` You can also specify a class option as the second parameter that’ll raise an exception if a serialized object is retrieved as a descendant of a class not in the hierarchy. ```ruby # Only Hash allowed! class User Callbacks --------- - after_create - after_initialize - after_validation - after_save - after_commit"},{"title":"Rails plugins","url":"//cheatsheets/rails-plugins/","tags":[],"body":"Generate a plugin ----------------- Generate a Rails Engine plugin: rails plugin new myplugin --skip-bundle --full Initializers ------------ * [Rails::Railtie](http://edgeapi.rubyonrails.org/classes/Rails/Railtie.html) * [EngineYard blog post](http://www.engineyard.com/blog/2010/extending-rails-3-with-railties/) Subclass Railtie and provide an `initializer` method. module NewPlugin class Railtie < Rails::Railtie initializer \"newplugin.initialize\" do |app| # subscribe to all rails notifications: controllers, AR, etc. ActiveSupport::Notifications.subscribe do |*args| event = ActiveSupport::Notifications::Event.new(*args) puts \"Got notification: #{event.inspect}\" end end end end Custom routes ------------- * [ActionDispatch::Routing::Mapper](http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper.html) To create custom `routes.rb` keywords: # # routes.rb: # myplugin_for x # class ActionDispatch::Routing class Mapper def myplugin_for(*x) end end end Example with a block: # authenticated do # resources :users # end # def authenticated constraint = lambda { |request| request... } constraints(constraint) { yield } end Custom generators ----------------- * [Guide: generators](http://guides.rubyonrails.org/generators.html) * [ActiveRecord::Generators::Base](http://api.rubyonrails.org/classes/ActiveRecord/Generators/Base.html) ### Basic # rails g initializer # lib/generators/initializer_generator.rb class InitializerGenerator < Rails::Generators::Base def create_initializer_file create_file \"config/initializers/initializer.rb\", \"# Add initialization content here\" end end * Extend `Rails::Generators::Base`. * Each public method in the generator is executed when a generator is invoked. ### Generating a generator $ rails generate generator initializer ### NamedBase Use `NamedBase` instead if you want to take an argument. It will be available as `file_name`. class InitializerGenerator < Rails::Generators::Base def lol puts file_name end end ### More class InitializerGenerator < Rails::Generators::NamedBase #   source_root File.expand_path(\"../templates\", __FILE__) desc \"Description goes here.\" end ### Generators lookup When invoking `rails g XXX`: [rails/]generators/XXX/XXX_generator.rb [rails/]generators/XXX_generator.rb When invoking `rails g XXX:YYY`: [rails/]generators/XXX/YYY_generator.rb ActiveModel 'acts as' --------------------- # yaffle/lib/yaffle/acts_as_yaffle.rb module Yaffle module ActsAsYaffle extend ActiveSupport::Concern included do end module ClassMethods def acts_as_yaffle(options = {}) # your code will go here end end end end ActiveRecord::Base.send :include, Yaffle::ActsAsYaffle"},{"title":"Routes","url":"//cheatsheets/rails-routes/","tags":[],"body":"## Multiple resources (`resources`) resources :books # PhotosController: # index => GET /photos # new => GET /photos/new # create => POST /photos/new # show => GET /photos/:id # edit => GET /photos/:id/edit # update => PUT /photos/:id # delete => DELETE /photos/:id # # Helpers: # new_book_path # book_path(id) # edit_book_path(id) ### Custom actions resources :photos do member { get 'preview' } # /photo/1/preview collection { get 'search' } # /photos/search get 'preview', on: :member # (..same as the first) end ### Options resources :photos, path_names: { new: 'brand_new' } # /photos/1/brand_new path: 'postings' # /postings only: :index only: [:index, :show] except: :show except: [:index, :show] shallow: true # also generate shallow routes shalow_path: 'secret' shallow_prefix: 'secret' ## Single resource (`resource`) resource :coder # CodersController: # new => GET /coder/new # create => POST /coder/new # show => GET /coder # edit => GET /coder/edit # update => PUT /coder # delete => DELETE /coder ## Matching (`match`) match 'photo/:id' => 'photos#show' # /photo/what-is-it match 'photo/:id', id: /[0-9]+/ # /photo/0192 match 'photo/:id' => 'photos#show', constraints: { id: /[0-9]+/ } match 'photo/:id', via: :get match 'photo/:id', via: [:get, :post] match 'photo/*path' => 'photos#unknown' # /photo/what/ever # params[:format] == 'jpg' match 'photos/:id' => 'photos#show', :defaults => { :format => 'jpg' } ### Get/post `get` is the same as `match via: :get`. get 'photo/:id' => 'photos#show' # same as match 'photo/:id' => 'photos#show', via: :get post 'photo/:id' => 'photos#update' # same as match 'photo/:id' => 'photos#show', via: :post ### Redirection match '/stories' => redirect('/posts') match '/stories/:name' => redirect('/posts/%{name}') ### Named # logout_path match 'exit' => 'sessions#destroy', as: :logout ### Constraints match '/', constraints: { subdomain: 'admin' } # admin.site.com/admin/photos namespace 'admin' do constraints subdomain: 'admin' do resources :photos end end ### Custom constraints class BlacklistConstraint def initialize @ips = Blacklist.retrieve_ips end def matches?(request) @ips.include?(request.remote_ip) end end TwitterClone::Application.routes.draw do match \"*path\" => \"blacklist#index\", :constraints => BlacklistConstraint.new end ### Scopes scope 'admin', constraints: { subdomain: 'admin' } do resources ... end ### Rack middleware # Yes, Sprockets is middleware match '/application.js' => Sprockets ### Route helpers projects_path # /projects projects_url # http://site.com/projects ### Default help text # The priority is based upon order of creation: # first created -> highest priority. # Sample of regular route: match 'products/:id' => 'catalog#view' # Keep in mind you can assign values other than :controller and :action # Sample of named route: match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase # This route can be invoked with purchase_url(:id => product.id) # Sample resource route (maps HTTP verbs to controller actions automatically): resources :products # Sample resource route with options: resources :products do member do get 'short' post 'toggle' end collection do get 'sold' end end # Sample resource route with sub-resources: resources :products do resources :comments, :sales resource :seller end # Sample resource route with more complex sub-resources resources :products do resources :comments resources :sales do get 'recent', :on => :collection end end # Sample resource route within a namespace: namespace :admin do # Directs /admin/products/* to Admin::ProductsController # (app/controllers/admin/products_controller.rb) resources :products end # You can have the root of your site routed with \"root\" # just remember to delete public/index.html. root :to => 'welcome#index' # See how all your routes lay out with \"rake routes\" # This is a legacy wild controller route that's not recommended for RESTful applications. # Note: This route will make all actions in every controller accessible via GET requests. match ':controller(/:action(/:id(.:format)))' ### References * [Guides/Routing](http://guides.rubyonrails.org/routing.html) * [ActionDispatch::Routing::Mapper](http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper.html) (See included modules)"},{"title":"Rails tricks","url":"//cheatsheets/rails-tricks/","tags":[],"body":"in config/environments/development.rb: # Source maps for Sass config.sass.debug_info = true config.sass.line_comments = false # Don't break apart config.assets.debug = false Partial locals ... HTML in i18n en: read_more_html: \"read more...\" Exception handling: # config/application.rb config.exceptions_app = self.routes get '/404', to: 'errors#not_found' get '/500', to: 'errors#server_error' class ErrorsController def not_found render status: :not_found end end Rails updating: rake rails:update Distinct pluck: Article.distinct.pluck('author') Relation#merge scope :with_drafts, -> { uniq.joins(:articles).merge(Article.draft) } Order scope :recent, -> { order created_at: :desc } Group by month .group(\"to_char(created_at, 'YYYY-MM')\") .group(\"to_char(created_at, 'YYYY-MM')\").count"},{"title":"React-router","url":"//cheatsheets/react-router/","tags":[],"body":"Basic import { default as Router, Route } from 'react-router' const routes = ( ) Router.run(routes, Router.HashLocation, (Root) => { React.render(, document.getElementById('all')) }) Nesting const routes = ( ) import { RouteHandler } from 'react-router' const Chrome = React.createClass({ render () { return ( App ) } }) URL params var Message = React.createClass({ componentDidMount: function () { // from the path `/inbox/messages/:id` var id = this.props.params.id ... Link import { Link } from 'react-router' Other config Router.create var router = Router.create({ routes: ..., location: Router.HistoryLocation }) router.run((Root) => { ... }) Navigation import { Navigation } from 'react-router' React.createClass({ mixins: [ Navigation ], ... }) this .transitionTo('user', {id: 10}) .transitionTo('/path') .transitionTo('http://...') .replaceWith('about') .makePath('about') // return URL .makeHref('about') // return URL .goBack()"},{"title":"React.js","url":"//cheatsheets/react/","tags":[],"body":"{%raw%} Components ---------- {: .-three-column} ### Components {: .-prime} ```jsx import React from 'react' import ReactDOM from 'react-dom' ``` {: .-setup} ```jsx class Hello extends React.Component { render () { return Hello {this.props.name} } } ``` ```jsx const el = document.body ReactDOM.render(, el) ``` Use the [React.js jsfiddle](http://jsfiddle.net/reactjs/69z2wepo/) to start hacking. (or the unofficial [jsbin](http://jsbin.com/yafixat/edit?js,output)) ### Import multiple exports {: .-prime} ```jsx import React, {Component} from 'react' import ReactDOM from 'react-dom' ``` {: .-setup} ```jsx class Hello extends Component { ... } ``` ### Properties ```html ``` {: .-setup} ```jsx render () { this.props.fullscreen const { fullscreen, autoplay } = this.props ··· } ``` {: data-line=\"2,3\"} Use `this.props` to access properties passed to the component. See: [Properties](https://reactjs.org/docs/tutorial.html#using-props) ### States ```jsx constructor(props) { super(props) this.state = { username: undefined } } ``` ```jsx this.setState({ username: 'rstacruz' }) ``` ```jsx render () { this.state.username const { username } = this.state ··· } ``` {: data-line=\"2,3\"} Use states (`this.state`) to manage dynamic data. With [Babel](https://babeljs.io/) you can use [proposal-class-fields](https://github.com/tc39/proposal-class-fields) and get rid of constructor ```jsx class Hello extends Component { state = { username: undefined }; ... } ``` See: [States](https://reactjs.org/docs/tutorial.html#reactive-state) ### Nesting ```jsx class Info extends Component { render () { const { avatar, username } = this.props return } } ``` As of React v16.2.0, fragments can be used to return multiple children without adding extra wrapping nodes to the DOM. ```jsx import React, { Component, Fragment } from 'react' class Info extends Component { render () { const { avatar, username } = this.props return ( ) } } ``` {: data-line=\"5,6,7,8,9,10\"} Nest components to separate concerns. See: [Composing Components](https://reactjs.org/docs/components-and-props.html#composing-components) ### Children ```jsx You have pending notifications ``` {: data-line=\"2\"} ```jsx class AlertBox extends Component { render () { return {this.props.children} } } ``` {: data-line=\"4\"} Children are passed as the `children` property. Defaults -------- ### Setting default props ```jsx Hello.defaultProps = { color: 'blue' } ``` {: data-line=\"1\"} See: [defaultProps](https://reactjs.org/docs/react-component.html#defaultprops) ### Setting default state ```jsx class Hello extends Component { constructor (props) { super(props) this.state = { visible: true } } } ``` {: data-line=\"4\"} Set the default state in the `constructor()`. And without constructor using [Babel](https://babeljs.io/) with [proposal-class-fields](https://github.com/tc39/proposal-class-fields). ```jsx class Hello extends Component { state = { visible: true } } } ``` {: data-line=\"2\"} See: [Setting the default state](https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state) Other components ---------------- {: .-three-column} ### Functional components ```jsx function MyComponent ({ name }) { return Hello {name} } ``` {: data-line=\"1\"} Functional components have no state. Also, their `props` are passed as the first parameter to a function. See: [Function and Class Components](https://reactjs.org/docs/components-and-props.html#functional-and-class-components) ### Pure components ```jsx import React, {PureComponent} from 'react' class MessageBox extends PureComponent { ··· } ``` {: data-line=\"3\"} Performance-optimized version of `React.Component`. Doesn't rerender if props/state hasn't changed. See: [Pure components](https://reactjs.org/docs/react-api.html#react.purecomponent) ### Component API ```jsx this.forceUpdate() ``` ```jsx this.setState({ ... }) this.setState(state => { ... }) ``` ```jsx this.state this.props ``` These methods and properties are available for `Component` instances. See: [Component API](http://facebook.github.io/react/docs/component-api.html) Lifecycle --------- {: .-two-column} ### Mounting | Method | Description | | --- | --- | | `constructor` _(props)_ | Before rendering [#](https://reactjs.org/docs/react-component.html#constructor) | | `componentWillMount()` | _Don't use this_ [#](https://reactjs.org/docs/react-component.html#componentwillmount) | | `render()` | Render [#](https://reactjs.org/docs/react-component.html#render) | | `componentDidMount()` | After rendering (DOM available) [#](https://reactjs.org/docs/react-component.html#componentdidmount) | | --- | --- | | `componentWillUnmount()` | Before DOM removal [#](https://reactjs.org/docs/react-component.html#componentwillunmount) | | --- | --- | | `componentDidCatch()` | Catch errors (16+) [#](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html) | Set initial the state on `constructor()`. Add DOM event handlers, timers (etc) on `componentDidMount()`, then remove them on `componentWillUnmount()`. ### Updating | Method | Description | | --- | --- | | `componentDidUpdate` *(prevProps, prevState, snapshot)* | Use `setState()` here, but remember to compare props | | `shouldComponentUpdate` *(newProps, newState)* | Skips `render()` if returns false | | `render()` | Render | | `componentDidUpdate` *(prevProps, prevState)* | Operate on the DOM here | Called when parents change properties and `.setState()`. These are not called for initial renders. See: [Component specs](http://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops) Hooks (New) ----------- {: .-two-column} ### State Hook ```jsx import React, { useState } from 'react'; function Example() { // Declare a new state variable, which we'll call \"count\" const [count, setCount] = useState(0); return ( You clicked {count} times setCount(count + 1)}> Click me ); } ``` {: data-line=\"5,10\"} Hooks are a new addition in React 16.8. See: [Hooks at a Glance](https://reactjs.org/docs/hooks-overview.html) ### Declaring multiple state variables ```jsx function ExampleWithManyStates() { // Declare multiple state variables! const [age, setAge] = useState(42); const [fruit, setFruit] = useState('banana'); const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]); // ... } ``` ### Effect hook ```jsx import React, { useState, useEffect } from 'react'; function Example() { const [count, setCount] = useState(0); // Similar to componentDidMount and componentDidUpdate: useEffect(() => { // Update the document title using the browser API document.title = `You clicked ${count} times`; }, [count]); return ( You clicked {count} times setCount(count + 1)}> Click me ); } ``` {: data-line=\"6,7,8,9,10\"} If you’re familiar with React class lifecycle methods, you can think of `useEffect` Hook as `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` combined. By default, React runs the effects after every render — including the first render. ### Building your own hooks #### Define FriendStatus ```jsx import React, { useState, useEffect } from 'react'; function FriendStatus(props) { const [isOnline, setIsOnline] = useState(null); useEffect(() => { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () => { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }, [props.friend.id]); if (isOnline === null) { return 'Loading...'; } return isOnline ? 'Online' : 'Offline'; } ``` {: data-line=\"11,12,13,14\"} Effects may also optionally specify how to “clean up” after them by returning a function. #### Use FriendStatus ```jsx function FriendStatus(props) { const isOnline = useFriendStatus(props.friend.id); if (isOnline === null) { return 'Loading...'; } return isOnline ? 'Online' : 'Offline'; } ``` {: data-line=\"2\"} See: [Building Your Own Hooks](https://reactjs.org/docs/hooks-custom.html) ### Hooks API Reference Also see: [Hooks FAQ](https://reactjs.org/docs/hooks-faq.html) #### Basic Hooks | Hook | Description | | ---------------------------- | ----------------------------------------- | | `useState`_(initialState)_ | | | `useEffect`_(() => { ... })_ | | | `useContext`_(MyContext)_ | value returned from `React.createContext` | Full details: [Basic Hooks](https://reactjs.org/docs/hooks-reference.html#basic-hooks) #### Additional Hooks | Hook | Description | | -------------------------------------------- | ---------------------------------------------------------------------------- | | `useReducer`_(reducer, initialArg, init)_ | | | `useCallback`_(() => { ... })_ | | | `useMemo`_(() => { ... })_ | | | `useRef`_(initialValue)_ | | | `useImperativeHandle`_(ref, () => { ... })_ | | | `useLayoutEffect` | identical to `useEffect`, but it fires synchronously after all DOM mutations | | `useDebugValue`_(value)_ | display a label for custom hooks in React DevTools | Full details: [Additional Hooks](https://reactjs.org/docs/hooks-reference.html#additional-hooks) DOM nodes --------- {: .-two-column} ### References ```jsx class MyComponent extends Component { render () { return this.input = el} /> } componentDidMount () { this.input.focus() } } ``` {: data-line=\"4,9\"} Allows access to DOM nodes. See: [Refs and the DOM](https://reactjs.org/docs/refs-and-the-dom.html) ### DOM Events ```jsx class MyComponent extends Component { render () { this.onChange(event)} /> } onChange (event) { this.setState({ value: event.target.value }) } } ``` {: data-line=\"5,9\"} Pass functions to attributes like `onChange`. See: [Events](https://reactjs.org/docs/events.html) ## Other features ### Transferring props ```html ``` {: .-setup} ```jsx class VideoPlayer extends Component { render () { return } } ``` {: data-line=\"3\"} Propagates `src=\"...\"` down to the sub-component. See [Transferring props](http://facebook.github.io/react/docs/transferring-props.html) ### Top-level API ```jsx React.createClass({ ... }) React.isValidElement(c) ``` ```jsx ReactDOM.render(, domnode, [callback]) ReactDOM.unmountComponentAtNode(domnode) ``` ```jsx ReactDOMServer.renderToString() ReactDOMServer.renderToStaticMarkup() ``` There are more, but these are most common. See: [React top-level API](https://reactjs.org/docs/react-api.html) JSX patterns ------------ {: .-two-column} ### Style shorthand ```jsx const style = { height: 10 } return ``` ```jsx return ``` See: [Inline styles](https://reactjs.org/tips/inline-styles.html) ### Inner HTML ```jsx function markdownify() { return \"...\"; } ``` See: [Dangerously set innerHTML](https://reactjs.org/tips/dangerously-set-inner-html.html) ### Lists ```jsx class TodoList extends Component { render () { const { items } = this.props return {items.map(item => )} } } ``` {: data-line=\"6,7\"} Always supply a `key` property. ### Conditionals ```jsx {showMyComponent ? : } ``` ### Short-circuit evaluation ```jsx {showPopup && } ... ``` New features ------------ {: .-three-column} ### Returning multiple elements You can return multiple elements as arrays or fragments. #### Arrays ```js render () { // Don't forget the keys! return [ First item, Second item ] } ``` {: data-line=\"3,4,5,6\"} #### Fragments ```js render () { // Fragments don't require keys! return ( First item Second item ) } ``` {: data-line=\"3,4,5,6,7,8\"} See: [Fragments and strings](https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings) ### Returning strings ```js render() { return 'Look ma, no spans!'; } ``` {: data-line=\"2\"} You can return just a string. See: [Fragments and strings](https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings) ### Errors ```js class MyComponent extends Component { ··· componentDidCatch (error, info) { this.setState({ error }) } } ``` {: data-line=\"3,4,5\"} Catch errors via `componentDidCatch`. (React 16+) See: [Error handling in React 16](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html) ### Portals ```js render () { return React.createPortal( this.props.children, document.getElementById('menu') ) } ``` {: data-line=\"2,3,4,5\"} This renders `this.props.children` into any location in the DOM. See: [Portals](https://reactjs.org/docs/portals.html) ### Hydration ```js const el = document.getElementById('app') ReactDOM.hydrate(, el) ``` {: data-line=\"2\"} Use `ReactDOM.hydrate` instead of using `ReactDOM.render` if you're rendering over the output of [ReactDOMServer](https://reactjs.org/docs/react-dom-server.html). See: [Hydrate](https://reactjs.org/docs/react-dom.html#hydrate) Property validation ------------------- {: .-three-column} ### PropTypes ```js import PropTypes from 'prop-types' ``` {: .-setup} See: [Typechecking with PropTypes](https://reactjs.org/docs/typechecking-with-proptypes.html) | `any` | Anything | #### Basic | `string` | | | `number` | | | `func` | Function | | `bool` | True or false | #### Enum | `oneOf`_(any)_ | Enum types | | `oneOfType`_(type array)_ | Union | #### Array | `array` | | | `arrayOf`_(...)_ | | #### Object | `object` | | | `objectOf`_(...)_ | Object with values of a certain type | | `instanceOf`_(...)_ | Instance of a class | | `shape`_(...)_ | | #### Elements | `element` | React element | | `node` | DOM node | #### Required | `(···).isRequired` | Required | ### Basic types ```jsx MyComponent.propTypes = { email: PropTypes.string, seats: PropTypes.number, callback: PropTypes.func, isClosed: PropTypes.bool, any: PropTypes.any } ``` ### Required types ```jsx MyCo.propTypes = { name: PropTypes.string.isRequired } ``` ### Elements ```jsx MyCo.propTypes = { // React element element: PropTypes.element, // num, string, element, or an array of those node: PropTypes.node } ``` ### Enumerables (oneOf) ```jsx MyCo.propTypes = { direction: PropTypes.oneOf([ 'left', 'right' ]) } ``` ### Arrays and objects ```jsx MyCo.propTypes = { list: PropTypes.array, ages: PropTypes.arrayOf(PropTypes.number), user: PropTypes.object, user: PropTypes.objectOf(PropTypes.number), message: PropTypes.instanceOf(Message) } ``` ```jsx MyCo.propTypes = { user: PropTypes.shape({ name: PropTypes.string, age: PropTypes.number }) } ``` Use `.array[Of]`, `.object[Of]`, `.instanceOf`, `.shape`. ### Custom validation ```jsx MyCo.propTypes = { customProp: (props, key, componentName) => { if (!/matchme/.test(props[key])) { return new Error('Validation failed!') } } } ``` Also see -------- * [React website](https://reactjs.org) _(reactjs.org)_ * [React cheatsheet](https://reactcheatsheet.com/) _(reactcheatsheet.com)_ * [Awesome React](https://github.com/enaqx/awesome-react) _(github.com)_ * [React v0.14 cheatsheet](react@0.14) _Legacy version_ {%endraw%}"}]}