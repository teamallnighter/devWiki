{"entries":[{"title":"","url":"//404.html","tags":[],"body":"404 Page not found :( The requested page could not be found."},{"title":"","url":"//404.html","tags":[],"body":"Sorry, but the page you were trying to view does not exist ‚Äî perhaps you can try searching for it below."},{"title":"About","url":"//about/poo","tags":[],"body":"This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for Minima at GitHub: jekyll / minima You can find the source code for Jekyll at GitHub: jekyll / jekyll"},{"title":"Posts by Category","url":"//categories/","tags":[],"body":""},{"title":"cheatsheets","url":"//cheat-sheet-archive/","tags":[],"body":""},{"title":"Posts by Collection","url":"//collection-archive/","tags":[],"body":"cheatsheets docs resources"},{"title":"Docs","url":"//docs-archive/","tags":[],"body":""},{"title":"Posts by Category","url":"//","tags":[],"body":""},{"title":"News","url":"//news/","tags":[],"body":"News Select a providor"},{"title":"Search","url":"//search/","tags":[],"body":""},{"title":"Sitemap","url":"//sitemap/","tags":[],"body":"A list of all the posts and pages found on the site. For you robots out there is an XML version available for digesting as well. Pages About Posts by Category cheatsheets Posts by Collection Docs Posts by Category News Search Sitemap Posts by Tag Terms and Privacy Policy Posts by Year Posts Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 cheatsheets docs resources"},{"title":"Posts by Tag","url":"//tags/","tags":[],"body":""},{"title":"Terms and Privacy Policy","url":"//terms/","tags":[],"body":"Privacy Policy The privacy of my visitors is extremely important. This Privacy Policy outlines the types of personal information that is received and collected and how it is used. First and foremost, I will never share your email address or any other personal information to anyone without your direct consent. Log Files Like many other websites, this site uses log files to help learn about when, from where, and how often traffic flows to this site. The information in these log files include: Internet Protocol addresses (IP) Types of browser Internet Service Provider (ISP) Date and time stamp Referring and exit pages Number of clicks All of this information is not linked to anything that is personally identifiable. Cookies and Web Beacons When you visit this site ‚Äúconvenience‚Äù cookies are stored on your computer when you submit a comment to help you log in faster to Disqus the next time you leave a comment. Third-party advertisers may also place and read cookies on your browser and/or use web beacons to collect information. This site has no access or control over these cookies. You should review the respective privacy policies on any and all third-party ad servers for more information regarding their practices and how to opt-out. If you wish to disable cookies, you may do so through your web browser options. Instructions for doing so can be found on the specific web browsers‚Äô websites. Google Analytics Google Analytics is a web analytics tool I use to help understand how visitors engage with this website. It reports website trends using cookies and web beacons without identifying individual visitors. You can read Google Analytics Privacy Policy. Google Adsense Google Adsense, a third party affiliate marketing network, uses cookies to help make sure I get a commission when you buy a product after clicking on a link or ad banner that takes you to the site of one of their merchants. You can read Google Adsense Privacy Policy. Disclosure Policy I make money on this website through affiliate programs. If you click an affiliate link or ad banner and buy the product, you help support this website because I‚Äôll get a percentage of that sale. Currently I‚Äôm an affiliate for Amazon and Google Adsense. What this means for you: I became an affiliate to earn revenue towards the costs of running and maintaining this website. Where I have direct control over which ads are served on this website I offer only products that are directly related to the topic of this website and products that a reader/subscriber would have a genuine interest in or need of. I do not and will not recommend a product just for the sake of making money. I do not let the compensation I receive influence the content, topics, posts, or opinions expressed on this website. I respect and value my readers too much to write anything other than my own genuine and objective opinions and advice. Just like this website, my Disclosure Policy is a work in progress. As the revenue streams evolve, so will this page."},{"title":"Posts by Year","url":"//year-archive/","tags":[],"body":""},{"title":"","url":"//tag/html/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/html/page2/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/beginner/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/beginner/page2/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/html-attributes/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/head-elements/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/html-elements/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/hyperlinks/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/nesting-elements/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/empty-elements/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/html/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/fundamentals/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/fundamentals/page2/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/css/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/css/page2/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/css/page3/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/display/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/flex-box/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/fonts/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/forms/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/grid/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/images/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/media/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/organization/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/overflow/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/rtl/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/ltr/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/sass/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/jekyll/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/quickstart/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//tag/web-componants/","tags":[],"body":"Posts by Year 2020 30 2020 Intro to web componants TL;DR Middleman Quickstart Middle Man README The Dev Bible Jekyll Quickstart Jekyll Quickstart Jekyll from Scratch Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website ... Introduction to E-commerce Relevant Resources Content Management with Jekyll Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Content Management with Jekyll Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For ... Getting Started with SASS Getting Started with SASS Handling different text directions Handling different text directions Overflowing content Overflowing content Organizing your CSS Organizing your CSS How CSS is structered How CSS is structered Images Media and Form Elements Images, media, and form elements Grid Grid Getting Started with CSS Getting Started with CSS How CSS Works Forms How CSS Works Fonts and Text How CSS Works How CSS works Flex Box Flex Box Display Display HTML Text Fundamentals HTML text fundamentals Empty Elements Empty Elements Nesting HTML Elements Nesting elements Hyperlinks Hyperlinks The Anatomy of an HTML element The Anatomy of an HTML element All Head Elements üóø HEAD HTML Attributes Attributes What is html What is HTML Command Line categories:
 260: Day 0 Back to top ‚Üë"},{"title":"","url":"//about.md","tags":[],"body":""},{"title":"","url":"//admin/index.html","tags":[],"body":"Content Manager"},{"title":"Command Line","url":"//command-line/","tags":[],"body":"categories:
 260: Day 0 Command Line: Navigating the file system CLI (command line interface) Cheat Sheet CLI Anatomy The 3 commands you will use 80% of the time pwd: displays your ‚Äòpresent working directory‚Äô. This will usually default to your home folder when you first open your terminal. ls: lists the contents of your current directory. The -l flag lists extra information and -a lists hidden files. -la will list extra information and also all hidden files. cd: changes your directory based on the path you provide after the command (separated by a space). Examples: $ cd Documents/fast-track $ cd /h/sait/fast-track $ cd ../.. Quality of life cli tips tab: auto-completes file names and directories up arrow: browse through command history URIs, URLs, and file paths Naming conventions Files should be named consistently File names should be short but descriptive (<25 characters) Avoid special characters or spaces in a file name Underscores or hyphens instead of spaces Use lower case characters when possible Default file name for html: index.html Default file name for css: styles.css or main.css Default file name for js: app.js or index.js Default file name for documentation README (located in the root directory of a project; extension can vary but is usually .txt. or .md) Activity: Configuring Git Setting your name Setting your email Setting up your keys (optional) Why does GitHub recommend HTTPS over SSH? Generating a new SSH key and adding it to the ssh-agent Cloning a repo Option 1: Upload files and clone Create empty GH repo with initialized README.md Drag and drop files into your repo Clone repo to your file system with git clone Option 2: Push from existing local repo Create empty GH repo WITHOUT initialized README.md Follow listed instructions for ‚Äú‚Ä¶or push an existing repository from the command line‚Äù Important: Do not create a repo inside another repo Activity: Fork and clone the course repo to your system Clone repo to your filesystem Top Git commands $ git status $ git add $ git commit $ git push $ git pull Dobbie Anatomy of a webpage doctype head body styles scripts Web Analogues and horizontal components Docs Photoshop Illustrator Activity: Creating a web page from Codepen Create a single webpage from the HTML, CSS and JS listed in a Codepen of your choice. All styles and script should be embedded in the index.html page itself. CSS Colour Overview of positive and negative colour models. Poisitve: RBG Negative: CMYK Overview of the four colour modes of CSS colour names hexcode RBG HSL Prep for Tomorrow Homework: Bring in a magazine or newspaper from the outside world. Resilient CSS: Part 1 of 7 Resilient CSS: Part 2 of 7"},{"title":"What is html","url":"//html/what-is-html/","tags":["HTML","beginner"],"body":"What is HTML The Basics Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document. The HTML Document The standard lay out of the HTML Doc. This is a title Hello world! The text between¬†¬†and¬†¬†describes the web page, and the text between¬†¬†and¬†¬†is the visible page content. The markup text¬†This is a title¬†defines the browser page title. The Document Type Declaration¬†¬†is for HTML5. If a declaration is not included, various browsers will revert to ‚Äúquirks mode‚Äù for rendering HTML Elements HTML documents imply a structure of nested¬†HTML elements. These are indicated in the document by HTML¬†tags, enclosed in angle brackets thus:¬† In the simple, general case, the extent of an element is indicated by a pair of tags: a ‚Äústart tag‚Äù¬†¬†and ‚Äúend tag‚Äù¬†. The text content of the element, if any, is placed between these tags. Tags may also enclose further tag markup between the start and end, including a mixture of tags and text. This indicates further (nested) elements, as children of the parent element. The start tag may also include¬†attributes¬†within the tag. These indicate other information, such as identifiers for sections within the document, identifiers used to bind style information to the presentation of the document, and for some tags such as the¬†¬†used to embed images, the reference to the image resource. Some elements, such as the¬†line break¬†, do not permit¬†any¬†embedded content, either text or further tags. These require only a single empty tag (akin to a start tag) and do not use an end tag. Many tags, particularly the closing end tag for the very commonly used paragraph element¬†, are optional. An HTML browser or other agent can infer the closure for the end of an element from the context and the structural rules defined by the HTML standard. These rules are complex and not widely understood by most HTML coders. The general form of an HTML element is therefore:¬†''content''. Some HTML elements are defined as¬†empty elements¬†and take the form¬†. Empty elements may enclose no content, for instance, the¬†¬†tag or the inline¬†¬†tag. The name of an HTML element is the name used in the tags. Note that the end tag‚Äôs name is preceded by a slash character,¬†/, and that in empty elements the end tag is neither required nor allowed. If attributes are not mentioned, default values are used in each case."},{"title":"HTML Attributes","url":"//html/html-attributes/","tags":["html Attributes","beginner"],"body":"Attributes Elements can also have attributes, which look like this: Attributes contain extra information about the element¬†that you don‚Äôt want to appear in the actual content. In this case, the¬†class¬†attribute allows you to give the element an identifying name, that can be used later to target the element with style information and other things. An attribute should have: A space between it and the element name (or the previous attribute, if the element already has one or more attributes). The attribute name, followed by an equal sign. An attribute value, with opening and closing quote marks wrapped around it. Adding attributes to an element Another example of an element is¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)¬†‚Äî this stands for ‚Äúanchor‚Äù and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows: href: This attribute‚Äôs¬†value specifies the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example,¬†href=\"https://www.mozilla.org/\". title: The¬†title¬†attribute specifies extra information about the link, such as what¬†page is being linked to. For example,¬†title=\"The Mozilla homepage\". This will appear as a tooltip when the element is hovered over. target: The¬†target¬†attribute specifies the browsing context that will be used to display the link. For example,¬†target=\"_blank\"¬†will display the link in a new tab.¬†If you want to display the link in the current tab, just omit this attribute. Edit the line below in the¬†Input¬†area to turn it into a link to your favorite website. First, add the¬†¬†element. Second, add¬†the¬†href¬†attribute¬†and¬†the¬†title¬†attribute. Lastly, specify the¬†target¬†attribute to open the link in the new tab. You‚Äôll be able to see your changes update live in the¬†Output¬†area. You should see a link that when hovered over displays the value of the¬†title¬†attribute, and when clicked, navigates to the web address in the¬†href¬†attribute. Remember that you need to include a space between the element name, and each attribute. If you make a mistake, you can always reset it using the¬†Reset¬†button. If you get really stuck, press the¬†Show solution¬†button to see the answer. Boolean attributes You‚Äôll sometimes see attributes written without values ‚Äî this is perfectly allowed. These are called Boolean attributes, and they can only have one value, which is generally the same as the attribute name. As an example, take the¬†[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-disabled)¬†attribute, which you can assign to form input elements, if you want them to be disabled (greyed out) so the user can‚Äôt enter any data in them. As shorthand, it is perfectly allowable to write this as follows (we‚Äôve also included a non-disabled form input element for reference, to give you more of an idea what is going on): Omitting quotes around attribute values When you look around the World Wide Web, you‚Äôll come across a number of strange markup styles, including attribute values without quotes. This is allowable in certain circumstances, but will break your markup in others. For example, if we revisit our link example from earlier, we could write a basic version with only the¬†href¬†attribute, like this: favorite website However, as soon as we add the¬†title¬†attribute in this style, things will go wrong: favorite website At this point the browser will misinterpret your markup, thinking that the¬†title¬†attribute is actually three attributes ‚Äî a title attribute with the value ‚ÄúThe‚Äù, and two Boolean attributes,¬†Mozilla¬†and¬†homepage. This is obviously not what was intended, and will cause errors or unexpected behavior in the code, as seen in the live example below. Try hovering over the link to see what the title text is! Our advice is to always include the attribute quotes ‚Äî it avoids such problems, and results in more readable code too. Single or double quotes In this article you‚Äôll notice that the attributes are all wrapped in double quotes. You might however see single quotes in some people‚Äôs HTML code. This is purely a matter of style, and you can feel free to choose which one you prefer. Both the following lines are equivalent: A link to my example.A link to my example. You should however make sure you don‚Äôt mix them together. The following will go wrong! A link to my example. If you‚Äôve used one type of quote in your HTML, you can include¬†the other type of quote inside your attribute values without causing any problems: A link to my example. However if you want to include¬†a¬†quote, within the¬†quotes where both the quotes are of the same type (single quote or double quote), you‚Äôll have to¬†use HTML entities¬†for the quotes. For example, this will break: A link to my example. So you need to do this: A link to my example."},{"title":"All Head Elements","url":"//html/all-head-elements/","tags":["HTML","beginner","Head Elements","HTML Elements"],"body":"üóø HEAD From Josh Buchea‚Äôs Github A list of everything that *could* go in the of your document Table of Contents Recommended Minimum Elements Meta Link Icons Social Facebook Open Graph Twitter Card Twitter Privacy Schema.org Pinterest Facebook Instant Articles OEmbed QQ/Wechat Browsers / Platforms Apple iOS Google Android Google Chrome Microsoft Internet Explorer Browsers (Chinese) 360 Browser QQ Mobile Browser UC Mobile Browser App Links Other Resources Related Projects Other Formats Translations Contributing Contributors Author License Recommended Minimum Below are the essential elements for any web document (websites/apps): Page Title meta charset - defines the encoding of the website, utf-8 is the standard meta name=‚Äùviewport‚Äù - viewport settings related to mobile responsiveness width=device-width means that it will use the physical width of the device (instead of zooming out) which is good with mobile friendly pages initial-scale=1 is the initial zoom, 1 means no zoom ‚¨Ü back to top Elements Valid elements include meta, link, title, style, script, noscript, and base. These elements provide information for how a document should be perceived, and rendered, by web technologies. e.g. browsers, search engines, bots, etc. Page Title ‚¨Ü back to top Meta üìñ Meta tags that Google understands üìñ WHATWG Wiki: MetaExtensions üìñ ICBM on Wikipedia üìñ Geotagging on Wikipedia ‚¨Ü back to top Link üìñ Link Relations ‚¨Ü back to top Icons üìñ All About Favicons (And Touch Icons) üìñ Creating Pinned Tab Icons üìñ Favicon Cheat Sheet üìñ Icons & Browser Colors ‚¨Ü back to top Social Facebook Open Graph Most content is shared to Facebook as a URL, so it‚Äôs important that you mark up your website with Open Graph tags to take control over how your content appears on Facebook. More about Facebook Open Graph Markup üìñ Open Graph protocol üõ† Test your page with the Facebook Sharing Debugger Twitter Card With Twitter Cards, you can attach rich photos, videos and media experiences to Tweets, helping to drive traffic to your website. More about Twitter Cards üìñ Getting started with cards ‚Äî Twitter Developers üõ† Test your page with the Twitter Card Validator Twitter Privacy If you embed tweets in your website, Twitter can use information from your site to tailor content and suggestions to Twitter users. More about Twitter privacy options. Schema.org Note: These meta tags require the itemscope and itemtype attributes to be added to the tag. üõ† Test your page with the Structured Data Testing Tool Pinterest Pinterest lets you prevent people from saving things from your website, according to their help center. The description is optional. Facebook Instant Articles üìñ Creating Articles - Instant Articles üìñ Code Samples - Instant Articles OEmbed üìñ oEmbed format QQ/Wechat Users share web pages to qq wechat will have a formatted message üìñ Code Format Docs ‚¨Ü back to top Browsers / Platforms Apple iOS üìñ Configuring Web Applications Google Android Google Chrome Microsoft Internet Explorer Minimum required xml markup for browserconfig.xml: üìñ Browser configuration schema reference ‚¨Ü back to top Browsers (Chinese) 360 Browser QQ Mobile Browser UC Mobile Browser üìñ UC Browser Docs ‚¨Ü back to top App Links üìñ App Links ‚¨Ü back to top Other Resources üìñ HTML5 Boilerplate Docs: The HTML üìñ HTML5 Boilerplate Docs: Extend and customize ‚¨Ü back to top Related Projects Atom HTML Head Snippets - Atom package for HEAD snippets Sublime Text HTML Head Snippets - Sublime Text package for HEAD snippets head-it - CLI interface for HEAD snippets vue-head - Manipulating the meta information of the HEAD tag for Vue.js ‚¨Ü back to top Other Formats üìÑ PDF ‚¨Ü back to top üåê Translations üáÆüá© Bahasa üáßüá∑ Brazilian Portuguese üá®üá≥ Chinese (Simplified) üá©üá™ German üáÆüáπ Italian üáØüáµ Japanese üá∞üá∑ Korean üá∑üá∫ Russian/–†—É—Å—Å–∫–∏–π üá™üá∏ Spanish üáπüá∑ Turkish/T√ºrk√ße ‚¨Ü back to top ü§ù Contributing Open an issue or a pull request to suggest changes or additions. Guide The HEAD repository consists of two branches: 1. master This branch consists of the README.md file that is automatically reflected on the htmlhead.dev website. All changes to the content of the cheat sheet as such should be directed to this file. Please follow these steps for pull requests: Modify only one tag, or one related set of tags at a time Use double quotes on attributes Don‚Äôt include a trailing slash in self-closing elements ‚Äî the HTML5 spec says they‚Äôre optional Consider including a link to documentation that supports your change 2. gh-pages This branch is responsible for the htmlhead.dev website. We use Jekyll to deploy the README.md Markdown file through GitHub Pages. All website related modifications must be directed here. You may want to go through the Jekyll Docs and understand how Jekyll works before working on this branch. Contributors Check out all the super awesome contributors. üë§ Author Josh Buchea Twitter: @joshbuchea Github: @joshbuchea Show your support Please ‚≠êÔ∏è this repository if this project helped you! üìù License ‚¨Ü back to top"},{"title":"The Anatomy of an HTML element","url":"//html/the-anatomy-of-an-html-element/","tags":["HTML","beginner","HTML Elements"],"body":"The Anatomy of an HTML element The main parts of our element are: The opening tag:¬†This consists of the name of the element (in this case, p), wrapped in opening and closing¬†angle brackets. This states where the element begins or starts to take effect ‚Äî in this case where the start of the paragraph is. The closing tag:¬†This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends ‚Äî in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results. The content:¬†This is the content of the element, which in this case is just text. The element:¬†The opening tag¬†plus the closing tag plus the content equals the element."},{"title":"Hyperlinks","url":"//html/hyperlinks/","tags":["HTML","beginner","Hyperlinks","HTML Elements"],"body":"Hyperlinks Anatomy of a link A basic link is created by wrapping the text (or other content, see¬†Block level links) you want to turn into a link inside an¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)¬†element, and giving it an¬†[href](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href)¬†attribute (also known as a¬†Hypertext Reference¬†, or¬†target) that will contain the web address you want the link to point to. I'm creating a link to the Mozilla homepage. This gives us the following result: I‚Äôm creating a link to¬†the Mozilla homepage. Adding supporting information with the title attribute Another attribute you may want to add to your links is¬†title; this is intended to contain supplementary useful information about the link, such as what kind of information the page contains, or things to be aware of. For example: I'm creating a link to the Mozilla homepage. This gives us the following result (the title will come up as a tooltip when the link is hovered over): I‚Äôm creating a link to¬†the Mozilla homepage. Note: A link title is only revealed on mouse hover, which means that people relying on keyboard controls to navigate web pages will have difficulty accessing title information. If a title‚Äôs information is truly important to the usability of page, then you should present it in a manner that will be accessible to all users, for example by putting it in the regular text. Active learning: creating your own example link Active learning time: we‚Äôd like you to create an HTML document using your local code editor (our¬†getting started template¬†would do just fine.) Inside the HTML body, try adding one or more paragraphs or other types of content you already know about. Turn some of the content into links. Include title attributes. Block level links As mentioned before, you can turn just about any content into a link, even¬†block level elements. If you had an image you wanted to turn into a link, you could just put the image between¬†¬†tags. Note: You‚Äôll find out a lot more about using images on the Web in a future article. A quick primer on URLs and paths To fully understand link targets, you need to understand URLs and file paths. This section gives you the information you need to achieve this. A URL, or Uniform Resource Locator is simply a string of text that defines where something is located on the Web. For example Mozilla‚Äôs English homepage is located at¬†https://www.mozilla.org/en-US/. URLs use paths to find files. Paths specify where in the filesystem the file you are interested in is located. Let‚Äôs look at a simple example of a directory structure (see the¬†creating-hyperlinks¬†directory.) The¬†root¬†of this directory structure is called¬†creating-hyperlinks. When working locally with a web site, you will have one directory that the whole site goes inside. Inside the root, we have an¬†index.html¬†file and a¬†contacts.html. In a real website,¬†index.html¬†would be our home page or landing page (a web page that serves as the entry point for a website or a particular section of a website.). There are also two directories inside our root ‚Äî¬†pdfs¬†and¬†projects. These each have a single file inside them ‚Äî a PDF (project-brief.pdf) and an¬†index.html¬†file, respectively. Note how you can quite happily have two¬†index.html¬†files in one project as long as they are in different locations in the filesystem. Many web sites do. The second¬†index.html¬†would perhaps be the main landing page for project-related information. Same directory: If you wanted to include a hyperlink inside¬†index.html¬†(the top level¬†index.html) pointing to¬†contacts.html, you would just need to specify the filename of the file you want to link to, as it is in the same directory as the current file. So the URL you would use is¬†contacts.html: Want to contact a specific staff member? Find details on our contacts page. Moving down into subdirectories: If you wanted to include a hyperlink inside¬†index.html¬†(the top level¬†index.html) pointing to¬†projects/index.html, you would need to go down into the¬†projects¬†directory before indicating the file you want to link to. This is done by specifying the directory‚Äôs name, then a forward slash, then the name of the file. so the URL you would use is¬†projects/index.html: Visit my project homepage. Moving back up into parent directories: If you wanted to include a hyperlink inside¬†projects/index.html¬†pointing to¬†pdfs/project-brief.pdf, you‚Äôd have to go up a directory level, then back down into the¬†pdf¬†directory. ‚ÄúGo up a directory‚Äù is indicated using two dots ‚Äî¬†..¬†‚Äî so the URL you would use is¬†../pdfs/project-brief.pdf: A link to my project brief. Note: You can combine multiple instances of these features into complex URLs, if needed, e.g.¬†../../../complex/path/to/my/file.html. Document fragments It is possible to link to a specific part of an HTML document (known as a¬†document fragment), rather than just to the top of the document. To do this you first have to assign an¬†[id](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id)¬†attribute to the element you want to link to. It normally makes sense to link to a specific heading, so this would look something like the following: Mailing address Then to link to that specific¬†id, you‚Äôd include it at the end of the URL, preceded by a hash/pound symbol, for example: Want to write us a letter? Use our mailing address. You can even use the document fragment reference on its own to link to¬†another part of the same document: The company mailing address can be found at the bottom of this page. Absolute versus relative URLs Two terms you‚Äôll come across on the Web are¬†absolute URL¬†and¬†relative URL: absolute URL: Points to a location defined by its absolute location on the web, including¬†protocol¬†and¬†domain name. So for example, if an¬†index.html¬†page is uploaded to a directory called¬†projects¬†that sits inside the root of a web server, and the web site‚Äôs domain is¬†http://www.example.com, the page would be available at¬†http://www.example.com/projects/index.html¬†(or even just¬†http://www.example.com/projects/, as most web servers just look for a landing page such as¬†index.html¬†to load if it is not specified in the URL.) An absolute URL will always point to the same location, no matter where it is used. relative URL: Points to a location that is¬†relative¬†to the file you are linking from, more like what we looked at in the previous section. For example, if we wanted to link from our example file at¬†http://www.example.com/projects/index.html¬†to a PDF file in the same directory, the URL would just be the filename ‚Äî e.g.¬†project-brief.pdf¬†‚Äî no extra information needed. If the PDF was available in a subdirectory inside¬†projects¬†called¬†pdfs, the relative link would be¬†pdfs/project-brief.pdf¬†(the equivalent absolute URL would be¬†http://www.example.com/projects/pdfs/project-brief.pdf.) A relative URL will point to different places depending on the actual location of the file you refer from¬†‚Äî for example if we moved our¬†index.html¬†file out of the¬†projects¬†directory and into the root of the web site (the top level, not in any directories), the¬†pdfs/project-brief.pdf¬†relative URL link inside it would now point to a file located at¬†http://www.example.com/pdfs/project-brief.pdf, not a file located at¬†http://www.example.com/projects/pdfs/project-brief.pdf. Of course, the location of the¬†project-brief.pdf¬†file and¬†pdfs¬†folder won‚Äôt suddenly change because you moved the¬†index.html¬†file ‚Äî this would make your link point to the wrong place, so it wouldn‚Äôt work if clicked on. You need to be careful! Link best practices There are some best practices to follow when writing links. Let‚Äôs look at these now. Use clear link wording It‚Äôs easy to throw links up on your page. That‚Äôs not enough. We need to make our links¬†accessible¬†to all readers, regardless of their current context and which tools they prefer. For example: Screenreader users like jumping around from link to link on the page, and reading links out of context. Search engines use link text to index target files, so it is a good idea to include keywords in your link text to effectively describe what is being linked to. Visual readers skim over the page rather than reading every word, and their eyes will be drawn to page features that stand out, like links. They will find descriptive link text useful. Let‚Äôs look at a specific example: Good¬†link text:¬†Download Firefox Download Firefox Bad¬†link text:¬†Click here¬†to download Firefox Click here to download Firefox Other tips: Don‚Äôt repeat the URL as part of the link text ‚Äî URLs look ugly, and sound even uglier when a screen reader reads them out letter by letter. Don‚Äôt say ‚Äúlink‚Äù or ‚Äúlinks to‚Äù in the link text ‚Äî it‚Äôs just noise. Screen readers tell people there‚Äôs a link. Visual users will also know there‚Äôs a link, because links are generally styled in a different colour and underlined (this convention generally shouldn‚Äôt be broken, as users are so used to it.) Keep your link label as short as possible ‚Äî long links especially annoy screen reader users, who have to hear the whole thing read out. Minimize instances where multiple copies of the same text are linked to different places. This can cause problems for screenreader users, who will often bring up a list of the links out of context ‚Äî several links all labelled ‚Äúclick here‚Äù, ‚Äúclick here‚Äù, ‚Äúclick here‚Äù would be confusing. Use relative links wherever possible From the description above, you might think that it is a good idea to just use absolute links all the time; after all, they don‚Äôt break when a page is moved like relative links. However, you should use relative links wherever possible when linking to other locations within the¬†same website¬†(when linking to¬†another website, you will need to use an absolute link): For a start, it is a lot easier to scan your code ‚Äî relative URLs are generally a lot shorter than absolute URLs, which makes reading code much easier. Second, it is more efficient to use relative URLs wherever possible. When you use an absolute URL, the browser starts by looking up the real location of the server on the Domain Name System (DNS; see¬†How the web works¬†for more information), then it goes to that server and finds the file that is being requested. With a relative URL on the other hand, the browser just looks up the file that is being requested, on the same server. So if you use absolute URLs where relative URLs would do, you are constantly making your browser do extra work, meaning that it will perform less efficiently. Linking to non-HTML resources ‚Äî leave clear signposts When linking to a resource that will be downloaded (like a PDF or Word document) or streamed (like video or audio) or has another potentially unexpected effect (opens a popup window, or loads a Flash movie), you should add clear wording to reduce any confusion. It can be quite annoying for example: If you are on a low bandwidth connection, click a link and then a multiple megabyte download starts unexpectedly. If you haven‚Äôt got the Flash player installed, click a link and then suddenly get taken to a page that requires Flash. Let‚Äôs look at some examples, to see what kind of text can be used here: Download the sales report (PDF, 10MB) Watch the video (stream opens in separate tab, HD quality) Play the car game (requires Flash) Use the download attribute when linking to a download When you are linking to a resource that is to be downloaded rather than opened in the browser, you can use the¬†download¬†attribute to provide a default save filename. Here‚Äôs an example with a download link to the latest Windows version of Firefox: Download Latest Firefox for Windows (64-bit) (English, US) Active learning: creating a navigation menu For this exercise, we‚Äôd like you to link some pages together with a navigation menu to create a multi-page website. This is one common way in which a website is created ‚Äî the same page structure is used on every page, including the same navigation menu, so when links are clicked it gives the impression that you are staying in the same place, and different content is being brought up. You‚Äôll need to make local copies of the following four pages, all in the same directory (see also the¬†navigation-menu-start¬†directory for a full file listing): index.html projects.html pictures.html social.html You should: Add an unordered list in the indicated place on one page, containing the names of the pages to link to. A navigation menu is usually just a list of links, so this is semantically ok. Turn each page name into a link to that page. Copy the navigation menu across to each page. On each page, remove just the link to that same page ‚Äî it is confusing and pointless for a page to include a link to itself, and the lack of a link acts a good visual reminder of what page you are currently on. The finished example should end up looking something like this: Note: If you get stuck, or are not sure if you have got it right, you can check the¬†navigation-menu-marked-up¬†directory to see the correct answer. E-mail links It is possible to create links or buttons that, when clicked, open a new outgoing email message rather than linking to a resource or page. This is done using the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)¬†element and the¬†mailto:¬†URL scheme. In its most basic and commonly used form, a¬†mailto:¬†link simply indicates the email address of the intended recipient. For example: Send email to nowhere This results in a link that looks like this:¬†Send email to nowhere. In fact, the email address is even optional. If you leave it out (that is, your¬†[href](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href)¬†is simply ‚Äúmailto:‚Äù), a new outgoing email window will be opened by the user‚Äôs mail client that has no destination address specified yet. This is often useful as ‚ÄúShare‚Äù links that users can click to send an email to an address of their choosing. Specifying details In addition to the email address, you can provide other information. In fact, any standard mail header fields can be added to the¬†mailto¬†URL you provide. The most commonly used of these are ‚Äúsubject‚Äù, ‚Äúcc‚Äù, and ‚Äúbody‚Äù (which is not a true header field, but allows you to specify a short content message for the new email). Each field and its value is specified as a query term. Here‚Äôs an example that includes a cc, bcc, subject and body: Send mail with cc, bcc, subject and body Note:¬†The values of each field must be URL-encoded, that is with non-printing characters (invisible characters like tabs, carriage returns, and page breaks) and spaces¬†percent-escaped. Also note the use of the question mark (?) to separate the main URL from the field values, and ampersands (&) to separate each field in the¬†mailto:¬†URL. This is standard URL query notation. Read¬†The GET method¬†to understand what URL query notation is more comonly used for. Here are a few other sample¬†mailto¬†URLs: mailto: mailto:nowhere@mozilla.org mailto:nowhere@mozilla.org,nobody@mozilla.org mailto:nowhere@mozilla.org?cc=nobody@mozilla.org mailto:nowhere@mozilla.org?cc=nobody@mozilla.org&subject=This%20is%20the%20subject"},{"title":"Nesting HTML Elements","url":"//html/nesting-html-elements/","tags":["HTML","beginner","Nesting Elements","HTML Elements"],"body":"Nesting elements Elements can be placed within¬†other elements too ‚Äî this is called¬†nesting. If we wanted to state that our cat is¬†very¬†grumpy, we could wrap the word ‚Äúvery‚Äù in a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong)¬†element, which means that the word is to be strongly emphasized: My cat is very grumpy. You do however need to make sure that your elements are properly nested: in the example above, we opened the¬†p¬†element first, then the¬†strong¬†element, therefore we have to close the¬†strong¬†element first, then the¬†p. The following is incorrect: My cat is very grumpy. The elements have to open and close correctly, so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don‚Äôt do it! Block versus inline elements There are two important categories of elements in HTML which you should know about. They are block-level elements and inline elements. Block-level elements form a visible block on a page ‚Äî they will appear on a new line from whatever content went before it, and any content that goes after it will also appear on a new line. Block-level elements tend to be structural elements on the page that represent, for example,¬†paragraphs, lists, navigation menus, footers, and so on. A block-level element wouldn‚Äôt be nested inside an inline element, but it might be nested inside another block-level element. Inline elements are those that are contained within block-level elements and surround only small parts of the document‚Äôs content, not entire paragraphs and groupings of content. An inline element will not cause a new line to appear in the document;¬†they would normally appear inside a paragraph of text, for example an¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)¬†element (hyperlink) or emphasis elements such as¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em)¬†or¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong). Take the following example: firstsecondthirdfourthfifthsixth [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em)¬†is an inline element, so as you can see below, the first three elements sit on the same line as one another with no space in between. On the other hand,¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p)¬†is a block-level element, so each element appears on a new line, with space above and below each (the spacing is due to default¬†CSS styling¬†that the browser applies to paragraphs). Note: HTML5 redefined the element categories in HTML5: see¬†Element content categories. While these definitions are more accurate and less ambiguous than the ones that went before, they are a lot more complicated to understand than ‚Äúblock‚Äù and ‚Äúinline‚Äù, so we will stick with these throughout this topic. Note: The terms ‚Äúblock‚Äù and ‚Äúinline‚Äù, as used in this topic, should not be confused with¬†the types of CSS boxes¬†with the same names. While they correlate by default, changing the CSS display type¬†doesn‚Äôt change the category of the element and doesn‚Äôt affect which elements it can contain and which elements it can be contained in. One of the reasons why HTML5 dropped these terms was to prevent this rather common¬†confusion. Note: You can find useful reference pages that include lists of block and inline elements ‚Äî see¬†Block-level elements¬†and¬†Inline elements."},{"title":"Empty Elements","url":"//html/empty-elements/","tags":["HTML","beginner","HTML Elements","Empty Elements"],"body":"Empty Elements Empty elements Not all elements follow the above pattern of an opening tag, content, and a¬†closing tag. Some elements consist only of a single tag, which is usually used to insert/embed something in the document at the place it is included. For example, the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)¬†element embeds an image file onto a page in the position it is included in: Note: Empty elements are also sometimes called void elements."},{"title":"HTML Text Fundamentals ","url":"//html/html-text-fundamentals/","tags":["html","beginner","Fundamentals"],"body":"HTML text fundamentals The basics: Headings and Paragraphs Most structured text consists of headings and paragraphs, whether you are reading a story, a newspaper, a college textbook, a magazine, etc. Structured content makes the reading experience easier and more enjoyable. In HTML, each paragraph has to be wrapped in a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p)¬†element, like so: I am a paragraph, oh yes I am. Each heading has to be wrapped in a heading element: I am the title of the story. There are six heading elements ‚Äî¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1),¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2),¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3),¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4),¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5), and¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6). Each element represents a different level of content in the document;¬†¬†represents the main heading,¬†¬†represents subheadings,¬†¬†represents sub-subheadings, and so on. Implementing structural hierarchy As an example, in a story the¬†¬†element would represent the title of the story,¬†¬†elements would represent the title of each chapter,¬†¬†elements would represent sub-sections of each chapter, and so on. The Crushing BoreBy Chris MillsChapter 1: The dark nightIt was a dark night. Somewhere, an owl hooted. The rain lashed down on the ...Chapter 2: The eternal silenceOur protagonist could not so much as a whisper out of the shadowy figure ...The specter speaksSeveral more hours had passed, when all of a sudden the specter sat bolt upright and exclaimed, \"Please have mercy on my soul!\" It‚Äôs really up to you what exactly the elements involved represent, as long as the hierarchy makes sense. You just need to bear in mind a few best practices as you create such structures: Preferably you should just use a single¬†¬†per page ‚Äî this is the top level heading, and all others sit below this in the hierarchy. Make sure you use the headings in the correct order in the hierarchy. Don‚Äôt use¬†¬†elements to represent subheadings, followed by¬†¬†elements to represent sub-subheadings ‚Äî that doesn‚Äôt make sense and will lead to weird results. Of the six heading levels available, you should aim to use no more than three per page, unless you feel it is necessary. Documents with many levels (i.e., a deep heading hierarchy) become unwieldy and difficult to navigate. On such occasions, it is advisable to spread the content over multiple pages if possible. Why do we need structure? To answer this question, let‚Äôs take a look at¬†text-start.html¬†‚Äî the starting point of our running example for this article (a nice hummus recipe). You should save a copy of this file on your local machine, as you‚Äôll need it for the exercises later on. This document‚Äôs body currently contains multiple pieces of content ‚Äî they aren‚Äôt marked up in any way, but they are separated with linebreaks (Enter/Return pressed to go onto the next line). However, when you open the document in your browser, you‚Äôll see that the text appears as a big chunk! This is because there are no elements to give the content structure, so the browser does not know what is a heading and what is a paragraph. Furthermore: Users looking at a web page tend to scan quickly to find relevant content, often just reading the headings to begin with (we usually¬†spend a very short time on a web page). If they can‚Äôt see anything useful within a few seconds, they‚Äôll likely get frustrated and go somewhere else. Search engines indexing your page consider the contents of headings as important keywords for influencing the page‚Äôs search rankings. Without headings, your page will perform poorly in terms of¬†SEO¬†(Search Engine Optimization). Severely visually impaired people often don‚Äôt read web pages; they listen to them instead. This is done with software called a¬†screen reader. This software provides ways to get fast access to given text content. Among the various techniques used, they provide an outline of the document by reading out the headings, allowing their users to find the information they need quickly. If headings are not available, they will be forced to listen to the whole document read out loud. To style content with¬†CSS, or make it do interesting things with¬†JavaScript, you need to have elements wrapping the relevant content, so CSS/JavaScript can effectively target it. We therefore need to give our content structural markup. Why do we need semantics? Semantics are relied on everywhere around us ‚Äî we rely on previous experience to tell us what the function of an everyday object is;¬†when we see something, we know what its function will be. So, for example, we expect a red traffic light to mean ‚Äústop‚Äù, and a green traffic light to mean ‚Äúgo‚Äù. Things can get tricky very quickly if the wrong semantics are applied (Do any countries use red to mean ‚Äúgo‚Äù? I hope not.) In a similar vein, we need to make sure we are using the correct elements, giving our content the correct meaning, function, or appearance. In this context the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1)¬†element is also a semantic element, which gives the text it wraps around the role (or meaning) of ‚Äúa top level heading on your page.‚Äù This is a top level heading By default, the browser will give it a large font size to make it look like a heading (although you could style it to look like anything you wanted using CSS). More importantly, its semantic value will be used in multiple ways, for example by search engines and screen readers (as mentioned above). On the other hand, you could make any element¬†look¬†like a top level heading. Consider the following: Is this a top level heading? This is a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span)¬†element. It has no semantics. You use it to wrap content when you want to apply CSS to it (or do something to it with JavaScript) without giving it any extra meaning (you‚Äôll find out more about these later on in the course). We‚Äôve applied some CSS to it to make it look like a top level heading, but since it has no semantic value, it will not get any of the extra benefits described above. It is a good idea to use the relevant HTML element for the job. Lists Now let‚Äôs turn our attention to lists. Lists are everywhere in life ‚Äî from your shopping list to the list of directions you subconsciously follow to get to your house every day, to the lists of instructions you are following in these tutorials! Lists are everywhere on the Web too, and we‚Äôve got three different types to worry about. Unordered Unordered lists are used to mark up lists of items for which the order of the items doesn‚Äôt matter ‚Äî let‚Äôs take a shopping list as an example. milk eggs bread hummus Every unordered list starts off with a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul)¬†element ‚Äî this wraps around all the list items: milk eggs bread hummus The last step is to wrap each list item in a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li)¬†(list item) element: milkeggsbreadhummus Active learning: Marking up an unordered list Try editing the live sample below to create your very own HTML unordered list. Ordered Ordered lists are lists in which the order of the items¬†does¬†matter ‚Äî let‚Äôs take a set of directions as an example: Drive to the end of the road Turn right Go straight across the first two roundabouts Turn left at the third roundabout The school is on your right, 300 meters up the road The markup structure is the same as for unordered lists, except that you have to wrap the list items in an¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol)¬†element, rather than¬†: Drive to the end of the roadTurn rightGo straight across the first two roundaboutsTurn left at the third roundaboutThe school is on your right, 300 meters up the road Active learning: Marking up an ordered list Try editing the live sample below to create your very own HTML ordered list. Active learning: Marking up our recipe page So at this point in the article, you have all the information you need to mark up our recipe page example. You can choose to either save a local copy of our¬†text-start.html¬†starting file and do the work there, or do it in the editable example below. Doing it locally will probably be better, as then you‚Äôll get to save the work you are doing, whereas if you fill it in to the editable example, it will be lost the next time you open the page. Both have pros and cons. If you get stuck, you can always press the¬†Show solution¬†button, or check out our¬†text-complete.html¬†example on our github repo. Nesting lists It is perfectly ok to nest one list inside another one. You might want to have some sub-bullets sitting below a top level bullet. Let‚Äôs take the second list from our recipe example: Remove the skin from the garlic, and chop coarsely.Remove all the seeds and stalk from the pepper, and chop coarsely.Add all the ingredients into a food processor.Process all the ingredients into a paste.If you want a coarse \"chunky\" hummus, process it for a short time.If you want a smooth hummus, process it for a longer time. Since the last two bullets are very closely related to the one before them (they read like sub-instructions or choices that fit below that bullet), it might make sense to nest them inside their own unordered list, and put that list inside the current fourth bullet. This would look like so: Remove the skin from the garlic, and chop coarsely.Remove all the seeds and stalk from the pepper, and chop coarsely.Add all the ingredients into a food processor.Process all the ingredients into a paste. If you want a coarse \"chunky\" hummus, process it for a short time.If you want a smooth hummus, process it for a longer time. Try going back to the previous active learning example and updating the second list like this. Emphasis and importance In human language, we often emphasise certain words to alter the meaning of a sentence, and we often want to mark certain words as important or different in some way. HTML provides various semantic elements to allow us to mark up textual content with such effects, and in this section, we‚Äôll look at a few of the most common ones. Emphasis When we want to add emphasis in spoken language, we¬†stress¬†certain words, subtly altering the meaning of what we are saying. Similarly, in written language we tend to stress words by putting them in italics. For example, the following two sentences have different meanings. I am glad you weren‚Äôt late. I am¬†glad¬†you weren‚Äôt¬†late. The first sentence sounds genuinely relieved that the person wasn‚Äôt late. In contrast, the second one sounds sarcastic or passive-aggressive, expressing annoyance that the person arrived a bit late. In HTML we use the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em)¬†(emphasis) element to mark up such instances. As well as making the document more interesting to read, these are recognised by screen readers and spoken out in a different tone of voice. Browsers style this as italic by default, but you shouldn‚Äôt use this tag purely to get italic styling. To do that, you‚Äôd use a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span)¬†element and some CSS, or perhaps an¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i)¬†element (see below). I am glad you weren't late. Strong importance To emphasize important words, we tend to stress them in spoken language and¬†bold¬†them in written language. For example: This liquid is¬†highly toxic. I am counting on you.¬†Do not¬†be late! In HTML we use the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong)¬†(strong importance) element to mark up such instances. As well as making the document more useful, again these are recognized by screen readers and spoken in a different tone of voice. Browsers style this as bold text by default, but you shouldn‚Äôt use this tag purely to get bold styling. To do that, you‚Äôd use a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span)¬†element and some CSS, or perhaps a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b)¬†element (see below). This liquid is highly toxic.I am counting on you. Do not be late! You can nest strong and emphasis inside one another if desired: This liquid is highly toxic ‚Äî if you drink it, you may die. Active learning: Let‚Äôs be important! In this active learning section, we have provided an editable example. Inside it, we‚Äôd like you to try adding emphasis and strong importance to the words you think need them, just to have some practice. Italic, bold, underline‚Ä¶ The elements we‚Äôve discussed so far have clearcut associated semantics. The situation with¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b),¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i), and¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u)¬†is somewhat more complicated. They came about so people could write bold, italics, or underlined text in an era when CSS was still supported poorly or not at all. Elements like this, which only affect presentation and not semantics, are known as¬†presentational elements¬†and should no longer be used, because as we‚Äôve seen before, semantics is so important to accessibility, SEO, etc. HTML5 redefined¬†,¬†¬†and¬†¬†with new, somewhat confusing, semantic roles. Here‚Äôs the best rule of thumb: it‚Äôs likely appropriate to use¬†,¬†, or¬†¬†to convey a meaning traditionally conveyed with bold, italics, or underline, provided there is no more suitable element. However, it always remains critical to keep an accessibility mindset. The concept of italics isn‚Äôt very helpful to people using screen readers, or to people using a writing system other than the Latin alphabet. [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i)¬†is used to convey a meaning traditionally conveyed by italic: Foreign words, taxonomic designation, technical terms, a thought‚Ä¶ [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b)¬†is used to convey a meaning traditionally conveyed by bold: Key words, product names, lead sentence‚Ä¶ [](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u)¬†is used to convey a meaning traditionally conveyed by underline: Proper name, misspelling‚Ä¶ A kind warning about underline:¬†People strongly associate underlining with hyperlinks.¬†Therefore, on the Web, it‚Äôs best to underline only links. Use the¬†¬†element when it‚Äôs semantically appropriate, but consider using CSS to change the default underline to something more appropriate on the Web. The example below illustrates how it can be done. The Ruby-throated Hummingbird (Archilochus colubris) is the most common hummingbird in Eastern North America. The menu was a sea of exotic words like vatrushka, nasi goreng and soupe √† l'oignon. Someday I'll learn how to spel better. Slice two pieces of bread off the loaf. Insert a tomato slice and a leaf of lettuce between the slices of bread. Comments In HTML, as with most programming languages, there is a mechanism available to write comments in the code ‚Äî comments are ignored by the browser and are invisible to the user, and their purpose is to allow you to include comments in the code to say how your code works, what the different parts of the code do, and so on. This can be very useful if you return to a code base that you‚Äôve not worked on for a long time, and can‚Äôt remember what you did ‚Äî or if you hand your code over for someone else to work on. To turn a section of HTML¬†content¬†into a comment, you need to wrap it in the special markers¬†, for example: Special Characters In HTML, the characters¬†,\",'¬†and¬†&¬†are special characters. They are parts of the HTML syntax itself, so how do you include one of these characters in your text? For example, if you really want to use an ampersand or less-than sign, and not have it interpreted as code. We have to use character references ‚Äî special codes that represent characters, and can be used in these exact circumstances. Each character reference is started with an ampersand (&), and ended by a semicolon (;). Copy of Untitled The character reference equivalent could be easily remembered because the words it uses can be seen as less than for ‚ÄòIn HTML, you define a paragraph using the element.In HTML, you define a paragraph using the &lt;p&gt; element. In the live output below, you can see that the first paragraph has gone wrong, because the browser thinks that the second instance of¬†¬†is starting a new paragraph. The second paragraph looks fine, because we have replaced the angle brackets with character references. Note: A chart of all the available HTML character entity references can be found on Wikipedia:¬†List of XML and HTML character entity references. Note that you don‚Äôt need to use entity references for any other symbols, as modern browsers will handle the actual symbols just fine as long, as your HTML‚Äôs¬†character encoding is set to UTF-8."},{"title":"Display ","url":"//css/display/","tags":["css","display","Fundamentals"],"body":"Display The¬†display¬†CSS¬†property sets whether an element is treated as a¬†block or inline elementand the layout used for its children, such as¬†flow layout,¬†grid¬†or¬†flex. Formally, the¬†display¬†property sets an element‚Äôs inner and outer¬†display types. The outer type sets an element‚Äôs participation in¬†flow layout; the inner type sets the layout of children. Some values of¬†display¬†are fully defined in their own individual specifications; for example the detail of what happens when¬†display: flex¬†is declared is defined in the CSS Flexible Box Model specification. See the table at the end of this document for all of the individual specifications. Syntax The CSS¬†display¬†property is specified using keyword values. Keyword values are grouped into six value categories: .container { display: [ || ] | | | ; } Outside [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-outside)These keywords specify the element‚Äôs outer display type, which is essentially its role in flow layout. Valid¬†¬†values: blockThe element generates a block element box, generating line breaks both before and after the element when in the normal flow.inlineThe element generates one or more inline element boxes that do not generate line breaks before or after themselves. In normal flow, the next element will be on the same line if there is spacerun-in¬†The element generates a run-in box. If the adjacent sibling of the element defined as¬†display: run-in¬†box is a block box, the¬†run-in¬†box becomes the first inline box of the block box that follows it.¬†Run-in elements act like inlines or blocks, depending on the surrounding elements. That is: If the run-in box contains a block box, same as block. If a block box follows the run-in box, the run-in box becomes the first inline box of the block box. If an inline box follows, the run-in box becomes a block box. Note: Browsers that support the two value syntax, on finding the outer value only, such as when¬†display: block¬†or¬†display: inline¬†is specified, will set the inner value to¬†flow. This will result in expected behavior; for example if you specify an element to be block, you would expect that the children of that element would participate in block and inline normal flow layout. Inside [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-inside)These keywords specify the element‚Äôs inner display type, which defines the type of formatting context that its contents are laid out in (assuming it is a non-replaced element). Valid¬†¬†values: flow¬†The element lays out its contents using flow layout (block-and-inline layout).If its outer display type is¬†inline¬†or¬†run-in, and it is participating in a block or inline formatting context, then it generates an inline box. Otherwise it generates a block container box.Depending on the value of other properties (such as¬†[position](https://developer.mozilla.org/en-US/docs/Web/CSS/position),¬†[float](https://developer.mozilla.org/en-US/docs/Web/CSS/float), or¬†[overflow](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow)) and whether it is itself participating in a block or inline formatting context, it either establishes a new¬†block formatting context¬†(BFC) for its contents or integrates its contents into its parent formatting context.flow-rootThe element generates a block element box that establishes a new¬†block formatting context, defining where the formatting root lies.tableThese elements behave like HTML¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)¬†elements. It defines a block-level box.flexThe element behaves like a block element and lays out its content according to the¬†flexbox model.gridThe element behaves like a block element and lays out its content according to the¬†grid model.ruby¬†The element behaves like an inline element and lays out its content according to the ruby formatting model. It behaves like the corresponding HTML¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby)¬†elements. Note: Browsers that support the two value syntax, on finding the inner¬†value only, such as when¬†display: flex¬†or¬†display: grid¬†is specified, will set their outer¬†value to¬†block. This will result in expected behavior; for example if you specify an element to be¬†display: grid, you would expect that the box created on the grid container would be a block level box. List Item [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-listitem)The element generates a block box for the content and a separate list-item inline box. A single value of¬†list-item¬†will cause the element to behave like a list item. This can be used together with¬†[list-style-type](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type)¬†and¬†[list-style-position](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position). list-item¬†can also be combined with any¬†[](https://developer.mozilla.org/en-US/docs/Web/CSS/display-outside)¬†keyword and the¬†flow¬†or¬†flow-root¬†[](https://developer.mozilla.org/en-US/docs/Web/CSS/display-inside)¬†keywords. Note: In browsers that support the two-value syntax, if no inner value is specified it will default to¬†flow. If no outer value is specified, the principal box will have an outer display type of¬†block. Internal [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-internal)Some layout models such as¬†table¬†and¬†ruby¬†have a complex internal structure, with several different roles that their children and descendants can fill. This section defines those ‚Äúinternal‚Äù display values, which only have meaning within that particular layout mode. Valid¬†¬†values: table-row-groupThese elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody)¬†HTML elements.table-header-groupThese elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead)¬†HTML elements.table-footer-groupThese elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot)¬†HTML elements.table-rowThese elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr)¬†HTML elements.table-cellThese elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td)¬†HTML elements.table-column-groupThese elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup)¬†HTML elements.table-columnThese elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col)¬†HTML elements.table-captionThese elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption)¬†HTML elements.ruby-base¬†These elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb)¬†HTML elements.ruby-text¬†These elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt)¬†HTML elements.ruby-base-container¬†These elements behave like¬†¬†HTML elements generated as anonymous boxes.ruby-text-container¬†These elements behave like¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc)¬†HTML elements. Box [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-box)These values define whether an element generates display boxes at all. Valid¬†¬†values: contents¬† These elements don‚Äôt produce a specific box by themselves. They are replaced by their pseudo-box and their child boxes. Please note that the CSS Display Level 3 spec defines how the¬†contents¬†value should affect ‚Äúunusual elements‚Äù ‚Äî elements that aren‚Äôt rendered purely by CSS box concepts such as replaced elements. See¬†Appendix B: Effects of display: contents on Unusual Elements¬†for more details.Due to a bug in browsers this will currently remove the element from the accessibility tree ‚Äî screen readers will not look at what‚Äôs inside. See the¬†Accessibility concerns¬†section below for more details.noneTurns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off.To have an element take up the space that it would normally take, but without actually rendering anything, use the¬†[visibility](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility)¬†property instead. Legacy [](https://developer.mozilla.org/en-US/docs/Web/CSS/display-legacy)CSS 2 used a single-keyword syntax for the¬†display¬†property, requiring separate keywords for block-level and inline-level variants of the same layout mode. Valid¬†¬†values: inline-blockThe element generates a block element box that will be flowed with surrounding content as if it were a single inline box (behaving much like a replaced element would).It is equivalent to¬†inline flow-root.inline-tableThe¬†inline-table¬†value does not have a direct mapping in HTML. It behaves like an HTML¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)¬†element, but as an inline box, rather than a block-level box. Inside the table box is a block-level context.It is equivalent to¬†inline table.inline-flexThe element behaves like an inline element and lays out its content according to the flexbox model.It is equivalent to¬†inline flex.inline-gridThe element behaves like an inline element and lays out its content according to the grid model.It is equivalent to¬†inline grid. Which syntax should you use now? The Level 3 specification details two values for the¬†display¬†property ‚Äî enabling the specification of the outer and inner display type explicitly ‚Äî but this is not yet well-supported by browsers. The¬†¬†methods allow the same results with single keyword values, and should be favoured by developers until the two keyword values are better supported. For example, using two values you might specify an inline flex container as follows: .container { display: inline flex; } This can currently be specified using a single value. .container { display: inline-flex; } For more information on these changes to the specification, see the article¬†Adapting to the new two-value syntax of display. Global /* Global values */ display: inherit; display: initial; display: unset; Guides and Examples The individual pages for the different types of value that¬†display¬†can have set on it feature multiple examples of those values in action ‚Äî see the¬†Syntax¬†section. In addition, see the following material, which covers the various values of display in depth. Adapting to the new two-value syntax of display CSS Flow Layout (display: block,¬†display: inline) Block and Inline Layout in Normal Flow Flow Layout and Overflow Flow Layout and Writing Modes Formatting Contexts Explained In Flow and Out of Flow display: flex Basic concepts of flexbox Aligning Items in a Flex Container Controlling Ratios of Flex Items Along the Main Axis Cross-browser Flexbox mixins Mastering Wrapping of Flex Items Ordering Flex Items Relationship of flexbox to other layout methods Backwards Compatibility of Flexbox Typical use cases of Flexbox display: grid Basic Concepts of Grid Layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes CSS Grid Layout and Accessibility CSS Grid Layout and Progressive Enhancement Realizing common layouts using grids Accessibility concerns display: none Using a¬†display¬†value of¬†none¬†on an element will remove it from the¬†accessibility tree. This will cause the element and all its descendant elements to no longer be announced by screen reading technology. If you want to visually hide the element, a more accessible alternative is to use¬†a combination of properties¬†to remove it visually from the screen but keep it parseable by assistive technology such as screen readers. display: contents Current implementations in most browsers will remove from the¬†accessibility tree¬†any element with a¬†display¬†value of¬†contents¬†(but descendants will remain). This will cause the element itself¬†to no longer be announced by screen reading technology. This is incorrect behavior according to the¬†CSS¬†specification. [More accessible markup with display: contents Hidde de Vries](https://hiddedevries.nl/en/blog/2018-04-21-more-accessible-markup-with-display-contents) [Display: Contents Is Not a CSS Reset Adrian Roselli](http://adrianroselli.com/2018/05/display-contents-is-not-a-css-reset.html) Tables Changing the¬†display¬†value of a¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)¬†element to¬†block,¬†grid, or¬†flex¬†will alter its representation in the¬†accessibility tree. This will cause the table to no longer be announced properly by screen reading technology. Short note on what CSS display properties do to table semantics ‚Äî The Paciello Group [Hidden content for better a11y Go Make Things](https://gomakethings.com/hidden-content-for-better-a11y/) MDN Understanding WCAG, Guideline 1.3 explanations [Understanding Success Criterion 1.3.1 W3C Understanding WCAG 2.0](https://www.w3.org/TR/UNDERSTANDING-WCAG20/content-structure-separation-programmatic.html) Specifications Untitled Untitled Browser compatibility Update compatibility data on GitHub Untitled # # ### ### # ### What are we missing? LegendFull support¬†Full supportPartial support¬†Partial supportNo support¬†No supportExperimental. Expect behavior to change in the future.Experimental. Expect behavior to change in the future.Non-standard. Expect poor cross-browser support.Non-standard. Expect poor cross-browser support.Deprecated. Not for use in new websites.Deprecated. Not for use in new websites.See implementation notes.See implementation notes.User must explicitly enable this feature.User must explicitly enable this feature.Uses a non-standard name.Uses a non-standard name.Requires a vendor prefix or different name for use.Requires a vendor prefix or different name for use."},{"title":"Flex Box","url":"//css/flex-box/","tags":["css","flex box"],"body":"Flex Box Since flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as ‚Äúflex container‚Äù) whereas the others are meant to be set on the children (said ‚Äúflex items‚Äù). If ‚Äúregular‚Äù layout is based on both block and inline flow directions, the flex layout is based on ‚Äúflex-flow directions‚Äù. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the¬†main axis¬†(from¬†main-start¬†to¬†main-end) or the cross axis (from¬†cross-start¬†to¬†cross-end). main axis¬†- The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the¬†flex-direction¬†property (see below). **main-start main-end**¬†- The flex items are placed within the container starting from main-start and going to main-end. main size¬†- A flex item‚Äôs width or height, whichever is in the main dimension, is the item‚Äôs main size. The flex item‚Äôs main size property is either the ‚Äòwidth‚Äô or ‚Äòheight‚Äô property, whichever is in the main dimension. cross axis¬†- The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction. **cross-start cross-end**¬†- Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side. cross size¬†- The width or height of a flex item, whichever is in the cross dimension, is the item‚Äôs cross size. The cross size property is whichever of ‚Äòwidth‚Äô or ‚Äòheight‚Äô that is in the cross dimension. Properties for the Parent(flex container) display This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. /* or inline-flex */ Note that CSS columns have no effect on a flex container. flex-direction This establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns. .container { flex-direction: row | row-reverse | column | column-reverse; } row¬†(default): left to right in¬†ltr; right to left in¬†rtl row-reverse: right to left in¬†ltr; left to right in¬†rtl column: same as¬†row¬†but top to bottom column-reverse: same as¬†row-reverse¬†but bottom to top flex-wrap By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. .container{ flex-wrap: nowrap | wrap | wrap-reverse; } nowrap¬†(default): all flex items will be on one line wrap: flex items will wrap onto multiple lines, from top to bottom. wrap-reverse: flex items will wrap onto multiple lines from bottom to top. There are some¬†visual demos of¬†flex-wrap¬†here. flex-flow (Applies to: parent flex container element) This is a shorthand for the¬†flex-direction¬†and¬†flex-wrap¬†properties, which together define the flex container‚Äôs main and cross axes. The default value is¬†row nowrap. flex-flow: || justify-content This defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line. .container { justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe; } flex-start¬†(default): items are packed toward the start of the flex-direction. flex-end: items are packed toward the end of the flex-direction. start: items are packed toward the start of the¬†writing-mode¬†direction. end: items are packed toward the end of the¬†writing-mode¬†direction. left: items are packed toward left edge of the container, unless that doesn‚Äôt make sense with the¬†flex-direction, then it behaves like¬†start. right: items are packed toward right edge of the container, unless that doesn‚Äôt make sense with the¬†flex-direction, then it behaves like¬†start. center: items are centered along the line space-between: items are evenly distributed in the line; first item is on the start line, last item on the end line space-around: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren‚Äôt equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies. space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example,¬†space-between¬†never got support from some versions of Edge, and start/end/left/right aren‚Äôt in Chrome yet. MDN¬†has detailed charts. The safest values are¬†flex-start,¬†flex-end, and¬†center. There are also two additional keywords you can pair with these values:¬†safe¬†and¬†unsafe. Using¬†safe¬†ensures that however you do this type of positioning, you can‚Äôt push an element such that it renders off-screen (e.g. off the top) in such a way the content can‚Äôt be scrolled too (called ‚Äúdata loss‚Äù). align-items This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross axis (perpendicular to the main-axis). .container { align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe; } stretch¬†(default): stretch to fill the container (still respect min-width/max-width) flex-start¬†/¬†start¬†/¬†self-start: items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the¬†flex-direction¬†rules or the¬†writing-mode¬†rules. flex-end¬†/¬†end¬†/¬†self-end: items are placed at the end of the cross axis. The difference again is subtle and is about respecting¬†flex-direction¬†rules vs.¬†writing-mode¬†rules. center: items are centered in the cross-axis baseline: items are aligned such as their baselines align The¬†safe¬†and¬†unsafe¬†modifier keywords can be used in conjunction with all the rest of these keywords (although note¬†browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. align-content This aligns a flex container‚Äôs lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis. Note:¬†this property has no effect when there is only one line of flex items. .container { align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe; } flex-start¬†/¬†start: items packed to the start of the container. The (more supported)¬†flex-start¬†honors the¬†flex-direction¬†while¬†start¬†honors the¬†writing-mode¬†direction. flex-end¬†/¬†end: items packed to the end of the container. The (more support)¬†flex-end¬†honors the¬†flex-direction¬†while end honors the¬†writing-mode¬†direction. center: items centered in the container space-between: items evenly distributed; the first line is at the start of the container while the last one is at the end space-around: items evenly distributed with equal space around each line space-evenly: items are evenly distributed with equal space around them stretch¬†(default): lines stretch to take up the remaining space The¬†safe¬†and¬†unsafe¬†modifier keywords can be used in conjunction with all the rest of these keywords (although note¬†browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. Properties for the Children(flex items) order By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. /* default is 0 */ flex-grow This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have¬†flex-grow¬†set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least). /* default 0 */ Negative numbers are invalid. flex-shrink This defines the ability for a flex item to shrink if necessary. /* default 1 */ Negative numbers are invalid. flex-basis This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The¬†auto¬†keyword means ‚Äúlook at my width or height property‚Äù (which was temporarily done by the¬†main-size¬†keyword until deprecated). The¬†content¬†keyword means ‚Äúsize it based on the item‚Äôs content‚Äù - this keyword isn‚Äôt well supported yet, so it‚Äôs hard to test and harder to know what its brethren¬†max-content,¬†min-content, and¬†fit-content¬†do. /* default auto */ If set to¬†0, the extra space around content isn‚Äôt factored in. If set to¬†auto, the extra space is distributed based on its¬†flex-grow¬†value.¬†See this graphic. flex This is the shorthand for¬†flex-grow,¬†flex-shrink¬†and¬†flex-basis¬†combined. The second and third parameters (flex-shrink¬†and¬†flex-basis) are optional. Default is¬†0 1 auto. .item { flex: none | [ ? || ] } It is recommended that you use this shorthand property¬†rather than set the individual properties. The shorthand sets the other values intelligently. align-self This allows the default alignment (or the one specified by align-items ) to be overridden for individual flex items. Please see the¬†align-items¬†explanation to understand the available values. .item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } Note that¬†float,¬†clear¬†and¬†vertical-align¬†have no effect on a flex item. Examples Let‚Äôs start with a very very simple example, solving an almost daily problem: perfect centering. It couldn‚Äôt be any simpler if you use flexbox. /* Or whatever *//* Or whatever *//* Or whatever *//* Magic! */ This relies on the fact a margin set to auto in a flex container absorb extra space. So setting a vertical margin of¬†auto¬†will make the item perfectly centered in both axes. Now let‚Äôs use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. /* We first create a flex layout context *//* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; *//* Then we define how is distributed the remaining space */ Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let‚Äôs try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large *//* This aligns items to the end line on main-axis *//* Medium screens *//* When on medium sized screens, we center it by evenly distributing empty space around items *//* Small screens *//* On small screens, we are no longer using row direction but column */ Let‚Äôs try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. /* We tell all items to be 100% width, via flex-basis *//* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer *//* Medium screens *//* We tell both sidebars to share a row *//* Large screens *//* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ Flexbox requires some vendor prefixing to support the most browsers possible. It doesn‚Äôt just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an¬†‚Äúold‚Äù, ‚Äútweener‚Äù, and ‚Äúnew‚Äù¬†versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through¬†Autoprefixer, which handles the fallbacks very well. Alternatively, here‚Äôs a Sass @mixin to help with some of the prefixing, which also gives you an idea of what kind of things need to be done: @mixin flexbox() { display: -webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex; } @mixin flex($values) { -webkit-box-flex: $values; -moz-box-flex: $values; -webkit-flex: $values; -ms-flex: $values; flex: $values; } @mixin order($val) { -webkit-box-ordinal-group: $val; -moz-box-ordinal-group: $val; -ms-flex-order: $val; -webkit-order: $val; order: $val; } .wrapper { @include flexbox();} .item { @include flex(1 200px);@include order(2);}"},{"title":"How CSS Works","url":"//css/how-css-works/","tags":["css","Fundamentals"],"body":"How CSS works How does CSS actually work? When a browser displays a document, it must combine the document‚Äôs content with its style information. It processes the document in a number of stages, which we‚Äôve listed below. Bear in mind that this is a very simplified version of what happens when a browser loads a webpage, and that different browsers will handle the process in different ways. But this is roughly what happens. The browser loads the HTML (e.g. receives it from the network). It converts the¬†HTML¬†into a¬†DOM¬†(Document Object Model). The DOM represents the document in the computer‚Äôs memory. The DOM is explained in a bit more detail in the next section. The browser then fetches most of the resources that are linked to by the HTML document, such as embedded images and videos ‚Ä¶ and linked CSS! JavaScript is handled a bit later on in the process, and we won‚Äôt talk about it here to keep things simpler. The browser parses the fetched CSS, and sorts the different rules by their selector types into different ‚Äúbuckets‚Äù, e.g. element, class, ID, and so on. Based on the selectors it finds, it works out which rules should be applied to which nodes in the DOM, and attaches style to them as required (this intermediate step is called a render tree). The render tree is laid out in the structure it should appear in after the rules have been applied to it. The visual display of the page is shown on the screen (this stage is called painting). The following diagram also offers a simple view of the process. About the DOM A DOM has a tree-like structure. Each element, attribute, and piece of text in the markup language becomes a¬†DOM node¬†in the tree structure. The nodes are defined by their relationship to other DOM nodes. Some elements are parents of child nodes, and child nodes have siblings. Understanding the DOM helps you design, debug and maintain your CSS because the DOM is where your CSS and the document‚Äôs content meet up. When you start working with browser DevTools you will be navigating the DOM as you select items in order to see which rules apply. A real DOM representation Rather than a long, boring explanation, let‚Äôs look at an example to see how a real HTML snippet is converted into a DOM. Take the following HTML code: Let's use: CascadingStyleSheets In the DOM, the node corresponding to our¬†¬†element is a parent. Its children are a text node and the three nodes corresponding to our¬†¬†elements. The¬†SPAN¬†nodes are also¬†parents, with text nodes as their children: P ‚îú‚îÄ \"Let's use:\" ‚îú‚îÄ SPAN | ‚îî‚îÄ \"Cascading\" ‚îú‚îÄ SPAN | ‚îî‚îÄ \"Style\" ‚îî‚îÄ SPAN ‚îî‚îÄ \"Sheets\" This is how a browser interprets the previous HTML snippet ‚Äîit renders the above DOM tree and then outputs it in the browser like so: Applying CSS to the DOM Let‚Äôs say we added some CSS to our document, to style it. Again, the HTML is as follows: Let's use: CascadingStyleSheets Let‚Äôs suppose we apply the following CSS to it: span { border: 1px solid black; background-color: lime; } The browser will parse the HTML and create a DOM from it, then parse the CSS. Since the only rule available in the CSS has a¬†span¬†selector, the browser will be able to sort the CSS very quickly! It will apply that rule to each one of the three¬†s, then paint the final visual representation to the screen. The updated output is as follows: In our¬†Debugging CSS¬†article in the next module we will be using browser DevTools to debug CSS problems, and will learn more about how the browser interprets CSS. What happens if a browser encounters CSS it doesn‚Äôt understand? In an earlier lesson¬†I mentioned that browsers do not all implement new CSS at the same time. In addition, many people are not using the latest version of a browser. Given that CSS is being developed all the time, and is therefore ahead of what browsers can recognise, you might wonder what happens if a browser encounters a CSS selector or declaration it doesn‚Äôt recognise. The answer is that it does nothing, and just moves on to the next bit of CSS! If a browser is parsing your rules, and encounters a property or value that it doesn‚Äôt understand, it ignores it and moves on to the next declaration. It will do this if you have made an error and misspelled a property or value, or if the property or value is just too new and the browser doesn‚Äôt yet support it. Similarly, if a browser encounters a selector that it doesn‚Äôt understand, it will just ignore the whole rule and move on to the next one. In the example below¬†I have used the British English spelling for color, which makes that property invalid as it is not recognised. So my paragraph has not been colored blue. All of the other CSS have been applied however; only the invalid line is ignored. I want this text to be large, bold and blue.p { font-weight: bold; colour: blue; /* incorrect spelling of the color property */ font-size: 200%; } Open in CodePenOpen in JSFiddle This behavior is very useful. It means that you can use new CSS as an enhancement, knowing that no error will occur if it is not understood ‚Äî the browser will either get the new feature or not. Coupled with the way that the cascade works, and the fact that browsers will use the last CSS they come across in a stylesheet when you have two rules with the same specificity you can also offer alternatives for browsers that don‚Äôt support new CSS. This works particularly well when you want to use a value that is quite new and not supported everywhere. For example, some older browsers do not support¬†calc()¬†as a value. I might give a fallback width for a box in pixels, then go on to give a width with a¬†calc()¬†value of¬†100% - 50px. Old browsers will use the pixel version, ignoring the line about¬†calc()¬†as they don‚Äôt understand it. New browsers will interpret the line using pixels, but then override it with the line using¬†calc()¬†as that line appears later in the cascade. .box { width: 500px; width: calc(100% - 50px); } We will look at many more ways to support varying browsers in later lessons."},{"title":"How CSS Works","url":"//css/fonts-and-text/","tags":["css","Fundamentals","Fonts"],"body":"Fonts and Text"},{"title":"How CSS Works","url":"//css/forms/","tags":["css","Forms"],"body":"Forms"},{"title":"Getting Started with CSS","url":"//css/gettingstarted-with-css/","tags":["css","Fundamentals"],"body":"Getting Started with CSS Adding CSS to the document The very first thing we need to do is to tell the HTML document that we have some CSS rules we want it to use. There are three different ways to apply CSS to an HTML document that you‚Äôll commonly come across, however, for now, we will look at the most usual and useful way of doing so ‚Äî linking CSS from the head of your document. Create a file in the same folder as your HTML document and save it as¬†styles.css. The¬†.css¬†extension shows that this is a CSS file. To link¬†styles.css¬†to¬†index.html¬†add the following line somewhere inside the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head)¬†of the HTML document: This¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)¬†element tells the browser that we have a stylesheet, using the¬†rel¬†attribute, and the location of that stylesheet as the value of the¬†href¬†attribute. You can test that the CSS works by adding a rule to¬†styles.css. Using your code editor add the following to your CSS file: h1 { color: red; } Save your HTML and CSS files and reload the page in a web browser. The level one heading at the top of the document should now be red. If that happens, congratulations ‚Äî you have successfully applied some CSS to an HTML document. If that doesn‚Äôt happen, carefully check that you‚Äôve typed everything correctly. You can continue to work in¬†styles.css¬†locally, or you can use our interactive editor below to continue with this tutorial. The interactive editor acts as if the CSS in the first panel is linked to the HTML document, just as we have with our document above. Styling HTML elements By making our heading red we have already demonstrated that we can target and style an HTML element. We do this by targeting an¬†element selector¬†‚Äî this is a selector that directly matches an HTML element name. To target all paragraphs in the document you would use the selector¬†p. To turn all paragraphs green you would use: p { color: green; } You can target multiple selectors at once, by separating the selectors with a comma. If I want all paragraphs and all list items to be green my rule looks like this: p, li { color: green; } Try this out in the interactive editor below (edit the code boxes), or in your local CSS document. Changing the default behavior of elements When we look at a well-marked up HTML document, even something as simple as our example, we can see how the browser is making the HTML readable by adding some default styling. Headings are large and bold and our list has bullets. This happens because browsers have internal stylesheets containing default styles, which they apply to all pages by default; without them all of the text would run together in a clump and we would have to style everything from scratch. All modern browsers display HTML content by default in pretty much the same way. However, you will often want something other than the choice the browser has made. This can be done by simply choosing the HTML element that you want to change, and using a CSS rule to change the way it looks.¬†A good example is our¬†, an unordered list. It has list bullets, and if I decide I don‚Äôt want those bullets I can remove them like so: li { list-style-type: none; } Try adding this to your CSS now. The¬†list-style-type¬†property is a good property to look at on MDN to see which values are supported. Take a look at the page for¬†[list-style-type](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type)¬†and you will find an interactive example at the top of the page to try some different values in, then all allowable values are detailed further down the page. Looking at that page you will discover that in addition to removing the list bullets you can change them ‚Äî try changing them to square bullets by using a value of¬†square. Adding a class So far we have styled elements based on their HTML element names. This works as long as you want all of the elements of that type in your document to look the same. Most of the time that isn‚Äôt the case and so you will need to find a way to select a subset of the elements without changing the others. The most common way to do this is to add a class to your HTML element and target that class. In your HTML document, add a¬†class attribute¬†to the second list item. Your list will now look like this: class=\"special\" In your CSS you can target the class of¬†special¬†by creating a selector that starts with a full stop character. Add the following to your CSS file: .special { color: orange; font-weight: bold; } Save and refresh to see what the result is. You can apply the class of¬†special¬†to any element on your page that you want to have the same look as this list item. For example, you might want the¬†¬†in the paragraph to also be orange and bold. Try adding a¬†class¬†of¬†special¬†to it, then reload your page and see what happens. Sometimes you will see rules with a selector that lists the HTML element selector along with the class: li.special { color: orange; font-weight: bold; } This syntax means ‚Äútarget any¬†li¬†element that has a class of special‚Äù. If you were to do this then you would no longer be able to apply the class to a¬†¬†or another element by simply adding the class to it; you would have to add that element to the list of selectors: li.special, span.special { color: orange; font-weight: bold; } As you can imagine, some classes might be applied to many elements and you don‚Äôt want to have to keep editing your CSS every time something new needs to take on that style. Therefore it is sometimes best to bypass¬†the element and simply refer to the class, unless you know that you want to create some special rules for one element alone, and perhaps want to make sure they are not applied to other things. Styling things based on their location in a document There are times when you will want something to look different based on where it is in the document. There are a number of selectors that can help you here, but for now we will look at just a couple. In our document are two¬†¬†elements ‚Äî one inside a paragraph and the other inside a list item. To select only an¬†¬†that is nested inside an¬†¬†element I can use a selector called the¬†descendant combinator, which simply takes the form of a space between two other selectors. Add the following rule to your stylesheet. li em { color: rebeccapurple; } This selector will select any¬†¬†element that is inside (a descendant of) an¬†. So in your example document, you should find that the¬†¬†in the third list item is now purple, but the one inside the paragraph is unchanged. Something else you might like to try is styling a paragraph when it comes directly after a heading at the same hierarchy level in the HTML. To do so place a¬†+ (an¬†adjacent sibling combinator) between the selectors. Try adding this rule to your stylesheet as well: h1 + p { font-size: 200%; } The live example below includes the two rules above. Try adding a rule to make a span red, if it is inside a paragraph. You will know if you have it right as the span in the first paragraph will be red, but the one in the first list item will not change color. Styling things based on state The final type of styling we shall take a look at in this tutorial is the ability to style things based on their state. A straightforward example of this is when styling links. When we style a link we need to target the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)¬†(anchor) element. This has different states depending on whether it is unvisited, visited, being hovered over, focused via the keyboard, or in the process of being clicked (activated). You can use CSS to target these different states ‚Äî the CSS below styles unvisited links pink and visited links green. a:link { color: pink; } a:visited { color: green; } You can change the way the link looks when the user hovers over it, for example removing the underline, which is achieved by in the next rule: a:hover { text-decoration: none; } In the live example below, you can play with different values for the various states of a link. I have added the rules above to it, and now realise that the pink color is quite light and hard to read ‚Äî why not change that to a better color? Can you make the links bold? We have removed the underline on our link on hover. You could remove the underline from all states of a link. It is worth remembering however that in a real site, you want to ensure that visitors know that a link is a link. Leaving the underline in place, can be an important clue for people to realize that some text inside a paragraph can be clicked on ‚Äî this is the behavior they are used to. As with everything in CSS, there is the potential to make the document less accessible with your changes ‚Äî we will aim to highlight potential pitfalls in appropriate places."},{"title":"Grid","url":"//css/css-grid/","tags":["css","Grid"],"body":"Grid"},{"title":"Images Media and Form Elements","url":"//css/Images-media-and-form-elements/","tags":["css","Forms","Images","Media"],"body":"Images, media, and form elements Replaced elements Images and video are described as¬†replaced elements. This means that CSS cannot affect the internal layout of these elements ‚Äî only their position on the page amongst other elements. As we will see however, there are various things that CSS can do with an image. Certain replaced elements, such as images and video, are also described as having an¬†aspect ratio. This means that it has a size in both the horizontal (x) and vertical (y) dimensions, and will be displayed using the intrinsic dimensions of the file by default. Sizing images As you already know from following these lessons, everything in CSS generates a box. If you place an image inside a box that is smaller or larger than the intrinsic dimensions of the image file in either direction, it will either appear smaller than the box, or overflow the box. You need to make a decision about what happens with the overflow. In the example below we have two boxes, both 200 pixels in size: One contains an image which is smaller than 200 pixels ‚Äî it is smaller than the box and doesn‚Äôt stretch to fill it. The other is larger than 200 pixels and overflows the box. So what can we do about the overflowing issue? As we learned¬†our previous lesson, a common technique is to make the¬†[max-width](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)¬†of an image 100%. This will enable the image to become smaller in size than the box but not larger. This technique will work with other replaced elements such as¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video)s, or¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)s. Try adding¬†max-width: 100%¬†to the¬†¬†element in the example above. You will see that the smaller image remains unchanged, but the larger one becomes smaller to fit into the box. You can make other choices about images inside containers. For example, you may want to size an image so it completely covers a box. The¬†[object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit)¬†property can help you here. When using¬†object-fit¬†the replaced element can be sized to fit a box in a variety of ways. Below we have used the value¬†cover, which sizes the image down, maintaining the aspect ratio so that it neatly fills the box. As the aspect ratio is maintained some parts of the image will be cropped by the box. If we use¬†contain¬†as a value the image will be scaled down until it is small enough to fit inside the box. This will result in ‚Äúletterboxing‚Äù if it is not the same aspect ratio as the box. You could also try the value of¬†fill, which will fill the box but not maintain the aspect ratio. Replaced elements in layout When using various CSS layout techniques on replaced elements, you may well find that they behave slightly differently to other elements. For example, in a flex or grid layout elements are stretched by default to fill the entire area. Images will not stretch, and instead will be aligned to the start of the grid area or flex container. You can see this happening in the example below where we have a two column, two row grid container, which has four items in it. All of the¬†¬†elements have a background color and stretch to fill the row and column. The image, however, does not stretch. If you are following these lessons in order then you may not have looked at layout yet. Just keep in mind that replaced elements, when they become part of a grid or flex layout, have different default behaviors, essentially to avoid them being stretched strangely by the layout. To force the image to stretch to fill the grid cell it is in, you‚Äôd have to do something like following: img { width: 100%; height: 100%; } This would however stretch the image, so probably isn‚Äôt what you‚Äôd want to do. Form elements Form elements are a tricky issue when it comes to styling with CSS, and the¬†HTML Forms module¬†contains detailed guides to styling form elements, which I will not fully reproduce here. There are a few key things worth highlighting in this section of the article. Many form controls are added to your page by way of the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)¬†element ‚Äî this defines simple form fields such as text inputs, through to more complex fields added in HTML5 such as color and date pickers. There are some additional elements, such as¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)¬†for multiline text input, and also elements used to contain and label parts of forms such as¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset)and¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend). HTML5 also contains attributes that enable web developers to indicate which fields are required, and even the type of content that needs to be entered. If the user enters something unexpected, or leaves a required field blank, the browser can show an error message. Different browsers are inconsistent in how much styling and customization they allow for such items. Styling text input elements Elements that allow for text input, such as¬†, specific types such as¬†, and the¬†¬†element are quite easy to style and tend to behave just like other boxes on your page. The default styling of these elements will differ however based on the operating system and browser that your user visits the site with. In the example below we have styled some text inputs using CSS ‚Äî you can see that things such as borders, margins and padding all apply as you would expect. We are using attribute selectors to target the different input types. Try changing how this form looks by adjusting the borders, adding background colors to the fields, and changing fonts and padding. Important: You should take care when changing the styling of form elements to make sure it is still obvious to the user they are form elements. You could create a form input with no borders and background that is almost indistinguishable from the content around it, but this would make it very hard to recognise and fill in. As explained in the lessons on¬†form styling¬†in the HTML part of this course, many of the more complex input types are rendered by the operating system and are inaccessible to styling. You should therefore always assume that forms are going to look quite different for different visitors and test complex forms in a number of browsers. Inheritance and form elements In some browsers, form elements do not inherit font styling by default. Therefore if you want to be sure that your form fields use the font defined on the body, or on a parent element, you should add this rule to your CSS. button, input, select, textarea { font-family : inherit; font-size : 100%; } Form elements and box-sizing Across browsers form elements use different box sizing rules for different widgets. You learned about the¬†box-sizing¬†property in¬†our box model lesson¬†and you can use this knowledge when styling forms to ensure a consistent experience when setting widths and heights on form elements. For consistency it is a good idea to set margins and padding to¬†0¬†on all elements, then add these back in when styling particular controls button, input, select, textarea { box-sizing: border-box; padding: 0; margin: 0; } Other useful settings In addition to the rules mentioned above, you should also set¬†overflow: auto¬†on¬†s to stop IE showing a scrollbar when there is no need for one: textarea { overflow: auto; } Putting it all together into a ‚Äúreset‚Äù As a final step, we can wrap up the various properties discussed above into the following ‚Äúform reset‚Äù to provide a consistent base to work from. This includes all the items mentioned in the last three sections: button, input, select, textarea { font-family: inherit; font-size: 100%; box-sizing: border-box; padding: 0; margin: 0; } textarea { overflow: auto; } Note: Normalizing stylesheets are used by many developers to create a set of baseline styles to use on all projects. Typically these do similar things to those described above, making sure that anything different across browsers is set to a consistent default before you do your own work on the CSS. They are not as important as they once were, as browsers are typically more consistent than in the past. However if you want to take a look at one example, check out¬†Normalize.css, which is a very popular stylesheet used as a base by many projects. For further information on styling forms, take a look at the two articles in the HTML section of these guides. Styling HTML Forms Advanced Styling for HTML Forms"},{"title":"How CSS is structered","url":"//css/how-css-is-structered/","tags":["css","Fundamentals"],"body":"How CSS is structered Applying CSS to your HTML The first thing we will look at are the three methods of applying CSS to a document. External stylesheet In the¬†Getting started with CSS¬†we linked an external stylesheet to our page. This is the most common and useful method of attaching CSS to a document as you can link the CSS to multiple pages, allowing you to style them all with the same stylesheet. In most cases, the different pages of a site will all look pretty much the same, therefore you can use the same set of rules for the basic look and feel. An external stylesheet is when you have your CSS written in a separate file with a¬†.cssextension, and you reference it from an HTML¬†¬†element: My CSS experimentHello World!This is my first CSS example The CSS file might look something like this: h1 { color: blue; background-color: yellow; border: 1px solid black; } p { color: red; } The¬†href¬†attribute of the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)¬†element needs to reference a file on your filesystem. In the example above, the CSS file is in the same folder as the HTML document, but you could place it somewhere else and adjust the specified path to suit, for example: Internal stylesheet An internal stylesheet is where you don‚Äôt have an external CSS file, but instead place your CSS inside a¬†[Hello World!This is my first CSS example This can be useful in some circumstances (maybe you‚Äôre working with a content management system where you can‚Äôt modify the CSS files directly), but it isn‚Äôt quite as efficient as external stylesheets ‚Äî in a website, the CSS would need to be repeated across every page, and updated in multiple places if changes were required. Inline styles Inline styles are CSS declarations that affect one element only, contained within a¬†styleattribute: My CSS experimentHello World!This is my first CSS example Please don‚Äôt do this, unless you really have to!¬†It is really bad for maintenance (you might have to update the same information multiple times per document), and it also mixes your presentational CSS information with your HTML structural information, making the code harder to read and understand. Keeping different types of code separated makes for a much easier job for all who work on the code. There are a few places where inline styles are more common, or even advisable. You might have to resort to using them if your working environment is really restrictive (perhaps your CMS only allows you to edit the HTML body). You will also see them used a lot in HTML email in order to get compatibility with as many email clients as possible. Playing with the CSS in this article There is a lot of CSS to play with in this article. To do so, we‚Äôd recommend creating a new directory/folder on your computer, and inside it creating a copy of the following two files: index.html: My CSS experimentsCreate your test HTML here styles.css: /* Create your test CSS here */ p { color: red; } Then, when you come across some CSS you want to experiment with, replace the HTML¬†¬†contents with some HTML to style, and start adding CSS to style it inside your CSS file. If you are not using a system where you can easily create files, you can instead use the interactive editor below to experiment. Read on, and have fun! Selectors You can‚Äôt talk about CSS without meeting selectors, and we have already discovered several different types in the¬†Getting started with CSS¬†tutorial. A selector is how we target something in our HTML document in order to apply styles to it. If your styles are not applying then it is likely that your selector does not match the thing you think it should match. Each CSS rule starts with a selector or a list of selectors in order to tell the browser which element¬†or elements the rules should apply to. All of the following are examples of valid selectors, or lists of selectors. h1 a:link .manythings #onething * .box p .box p:first-child h1, h2, .intro Try creating some CSS rules that use the above selectors, and some HTML to be styled by them. If you don‚Äôt know what some of the above syntax means, try searching for it on MDN! Note: You will learn a lot more about selectors in our¬†CSS selectors¬†tutorials, in the next module. Specificity There will often be scenarios where two selectors could select the same HTML element. Consider the stylesheet below where I have a rule with a¬†p¬†selector that will set paragraphs to blue, and also a class that will set selected elements red. .special { color: red; } p { color: blue; } Let‚Äôs say that in our HTML document we have a paragraph with a class of¬†special. Both rules could apply, so which one wins? What color do you think our paragraph will become? What color am I? The CSS language has rules to control which rule will win in the event of a collision ‚Äî these are called¬†cascade¬†and¬†specificity. In the below code block we have defined two rules for the¬†p¬†selector, but the paragraph ends up being colored blue. This is because the declaration that sets it to blue appears later in the stylesheet, and later styles override earlier ones. This is the cascade in action. p { color: red; } p { color: blue; } However, in the case of our earlier block with the class selector and the element selector, the class will win, making the paragraph red ‚Äî even thought it appears earlier in the stylesheet. A class is described as being more specific, or having more specificity than the element selector, so it wins. Try the above experiment for yourself ‚Äî add the HTML to your experiment, then add the two¬†p { ... }¬†rules to your stylesheet. Next, change the first¬†p¬†selector to¬†.specialto see how it changes the styling. The rules of specificity and the cascade can seem a little complicated at first and are easier to understand once you have built up further CSS knowledge. In our¬†Cascade and inheritancearticle, which you‚Äôll get to in the next module, I‚Äôll explain this in detail, including how to calculate specificity. For now, remember that this exists, and that sometimes CSS might not apply like you expect it to because something else in your stylesheet has a higher specificity. Identifying that more than one rule could apply to an element is the first step in fixing such issues. Properties and values At its most basic level, CSS consists of two building blocks: Properties: Human-readable identifiers that indicate which stylistic features (e.g.¬†[font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size),¬†[width](https://developer.mozilla.org/en-US/docs/Web/CSS/width),¬†[background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)) you want to change. Values: Each specified property is given a value, which indicates how you want to change those stylistic features (e.g. what you want to change the font, width or background color to.) The below image highlights a single property and value. The property name is¬†color, and the value¬†blue. A property paired with a value is called a¬†CSS declaration. CSS declarations are put within¬†CSS Declaration Blocks. This next image shows our CSS with the declaration block highlighted. Finally, CSS declaration blocks are paired with¬†selectors¬†to produce¬†CSS Rulesets¬†(or¬†CSS Rules). Our image contains two rules, one for the¬†h1¬†selector and one for the¬†p¬†selector. The rule for¬†h1¬†is highlighted. Setting CSS properties to specific values is the core function of the CSS language. The CSS engine calculates which declarations apply to every single element of a page in order to appropriately lay it out and style it. What is important to remember is that both properties and values are case-sensitive in CSS. The property and value in each pair is separated by a colon (:). Try looking up different values of the following properties, and writing CSS rules that apply them to different HTML elements: [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) [width](https://developer.mozilla.org/en-US/docs/Web/CSS/width) [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) [border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) Important: If a property is unknown or if a value is not valid for a given property, the declaration is deemed¬†invalid¬†and is completely ignored by the browser‚Äôs CSS engine. Important: In CSS (and other web standards), US spelling has been agreed on as the standard to stick to where language uncertainty arises. For example,¬†color¬†should¬†alwaysbe spelled¬†color.¬†colour¬†won‚Äôt work. Functions While most values are relatively simple keywords or numeric values, there are some possible values which take the form of a function. An example would be the¬†calc()¬†function. This function allows you to do simple math from within your CSS, for example: The inner box is 90% - 30px..outer { border: 5px solid black; } .box { padding: 10px; width: calc(90% - 30px); background-color: rebeccapurple; color: white; } This renders like so: Open in CodePenOpen in JSFiddle A function consists of the function name, and then some brackets into which the allowed values for that function are placed. In the case of the¬†calc()¬†example above I am asking for the width of this box to be 90% of the containing block width, minus 30 pixels. This isn‚Äôt something I can calculate ahead of time and just enter the value into the CSS, as I don‚Äôt know what 90% will be. As with all values, the relevant page on MDN will have usage examples so you can see how the function works. Another example would be the various values for¬†[transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform), such as¬†rotate(). .box { margin: 30px; width: 100px; height: 100px; background-color: rebeccapurple; transform: rotate(0.8turn) } The output from the above code looks like this: Open in CodePenOpen in JSFiddle Try looking up different values of the following properties, and writing CSS rules that apply them to different HTML elements: [transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) [background-image](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image), in particular gradient values [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color), in particular rgb/rgba/hsl/hsla values @rules As yet, we have not encountered¬†[@rules](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)¬†(pronounced ‚Äúat-rules‚Äù). These are special rules giving CSS some instruction on how to behave. Some¬†@rules¬†are simple with the rule name and a value. For example, to import an additional stylesheet into your main CSS stylesheet you can use¬†@import: @import 'styles2.css'; One of the most common¬†@rules¬†you will come across is¬†@media, which allows you to use¬†media queries¬†to apply CSS only when certain conditions are true (e.g. when the screen resolution is above a certain amount, or the screen is wider than a certain width). In the below CSS, we have a stylesheet that gives the¬†¬†element a pink background color. However, we then use¬†@media¬†to create a section of our stylesheet that will only be applied in browsers with a viewport wider than 30em. If the browser is wider than 30em then the background color will be blue. body { background-color: pink; } @media (min-width: 30em) { body { background-color: blue; } } You will encounter other¬†@rules¬†throughout these tutorials. See if you can add a media query to your CSS that changes styles based on the viewport width. Change the width of your browser window to see the result. Shorthands Some properties like¬†[font](https://developer.mozilla.org/en-US/docs/Web/CSS/font),¬†[background](https://developer.mozilla.org/en-US/docs/Web/CSS/background),¬†[padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding),¬†[border](https://developer.mozilla.org/en-US/docs/Web/CSS/border), and¬†[margin](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)¬†are called¬†shorthand properties¬†‚Äî this is because they allow you to set several property values in a single line, saving time and making your code neater in the process. For example, this line: /* In 4-value shorthands like padding and margin, the values are applied in the order top, right, bottom, left (clockwise from the top). There are also other shorthand types, for example 2-value shorthands, which set padding/margin for top/bottom, then left/right */ padding: 10px 15px 15px 5px; Does the¬†same thing as all these together: padding-top: 10px; padding-right: 15px; padding-bottom: 15px; padding-left: 5px; Whereas this line: background: red url(bg-graphic.png) 10px 10px repeat-x fixed; Does the same thing as all these together: background-color: red; background-image: url(bg-graphic.png); background-position: 10px 10px; background-repeat: repeat-x; background-scroll: fixed; We won‚Äôt attempt to teach these exhaustively now ‚Äî you‚Äôll come across many examples later on in the course, and you are advised to look up the shorthand property names in our¬†CSS reference¬†to find out more. Try adding the above declarations to your CSS to see how it affects the styling of your HTML. Try experimenting with some different values. Warning: While shorthands often allow you to miss out values, they will then reset any values that you do not include to their initial values. This ensures that a sensible set of values are used. However, this might be confusing if you were expecting the shorthand to only change the values you passed in. Comments As with HTML, you are encouraged to make comments in your CSS, to help you understand how your code works when coming back to it after several months, and to help others coming to the code to work on it understand it. Comments in CSS begin with¬†/*¬†and end with¬†*/. In the below code block I have used comments to mark the start of different distinct code sections. This is useful to help you navigate your codebase as it gets larger ‚Äî you can search for the comments in your code editor. /* Handle basic element styling */ /* -------------------------------------------------------------------------------------------- */ body { font: 1em/150% Helvetica, Arial, sans-serif; padding: 1em; margin: 0 auto; max-width: 33em; } @media (min-width: 70em) { /* Let's special case the global font size. On large screen or window, we increase the font size for better readability */ body { font-size: 130%; } } h1 {font-size: 1.5em;} /* Handle specific elements nested in the DOM */ /* -------------------------------------------------------------------------------------------- */ div p, #id:first-line { background-color: red; border-radius: 3px; } div p { margin: 0; padding: 1em; } div p + p { padding-top: 0; } Comments are also useful for temporarily¬†commenting out¬†certain parts of the code for testing purposes, for example if you are trying to find which part of your code is causing an error. In the next example I have commented out the rules for the¬†.special¬†selector. /*.special { color: red; }*/ p { color: blue; } Add some comments to your CSS, to get used to using them. Whitespace White space means actual spaces, tabs and new lines. In the same manner as HTML, the browser tends to ignore much of the whitespace inside your CSS; a lot of the whitespace is just there to aid readability. In our first example below we have each declaration (and rule start/end) on its own line ‚Äî this is arguably a good way to write CSS, as it makes it easy to maintain and understand: body { font: 1em/150% Helvetica, Arial, sans-serif; padding: 1em; margin: 0 auto; max-width: 33em; } @media (min-width: 70em) { body { font-size: 130%; } } h1 { font-size: 1.5em; } div p, #id:first-line { background-color: red; border-radius: 3px; } div p { margin: 0; padding: 1em; } div p + p { padding-top: 0; } You could write exactly the same CSS like so, with most of the whitespace removed ‚Äî this is functionally identical to the first example, but I‚Äôm sure you‚Äôll agree that it is somewhat harder to read: body {font: 1em/150% Helvetica, Arial, sans-serif; padding: 1em; margin: 0 auto; max-width: 33em;} @media (min-width: 70em) { body {font-size: 130%;} } h1 {font-size: 1.5em;} div p, #id:first-line {background-color: red; border-radius: 3px;} div p {margin: 0; padding: 1em;} div p + p {padding-top: 0;} The code layout you choose is usually a personal preference, although when you start to work in teams, you may find that the existing team has its own styleguide that specifies an agreed convention to follow. The whitespace between the properties and their values¬†you need to be careful of in CSS. For example, the following declarations are valid CSS: margin: 0 auto; padding-left: 10px; But the following are invalid: margin: 0auto; padding- left: 10px;"},{"title":"Organizing your CSS","url":"//css/organizing-your-css/","tags":["css","Organization","Fundamentals"],"body":"Organizing your CSS Tips to keep your CSS tidy Here are some general suggestions for ways to keep your stylesheets organised and tidy. Does your project have a coding style guide? If you are working with a team on an existing project, the first thing to check is whether the project has an existing style guide for CSS. The team style guide should always win over your own personal preferences. There often isn‚Äôt a right or wrong way to do things, but consistency is important. For example, have a look at the¬†CSS guidelines for MDN code examples. Keep it consistent If you get to set the rules for the project or are working alone, then the most important thing to do is to keep things consistent. Consistency can be applied in all sorts of ways, such as using the same naming conventions for classes, choosing one method of describing color, or maintaining consistent formatting (for example will you use tabs or spaces to indent your code? If spaces, how many spaces?) Having a set of rules you always follow reduces the amount of mental overhead needed when writing CSS, as some of the decisions are already made. Formatting readable CSS There are a couple of ways you will see CSS formatted. Some developers put all of the rules onto a single line, like so: .box { background-color: #567895; } h2 { background-color: black; color: white; } Other developers prefer to break everything onto a new line: .box { background-color: #567895; } h2 { background-color: black; color: white; } CSS doesn‚Äôt mind which one you use. We personally find it is more readable to have each property and value pair on a new line. Comment your CSS Adding comments to your CSS will help any future developer work with your CSS file, but will also help you when you come back to the project after a break. /* This is a CSS comment It can be broken onto multiple lines. */ A good tip is to add a block of comments between logical sections in your stylesheet too, to help locate different sections quickly when scanning through, or even give you something to search for to jump right into that part of the CSS. If you use a string which won‚Äôt appear in the code you can jump from section to section by searching for it ‚Äî below we have used¬†||. /* || General styles */ ... /* || Typography */ ... /* || Header and Main Navigtion */ ... You don‚Äôt need to comment every single thing in your CSS, as much of it will be self-explanatory. What you should comment are the things where you made a particular decision for a reason. You may have used a CSS property in a specific way to get around older browser incompatibilities, for example: .box { background-color: red; /* fallback for older browsers that don't support gradients */ background-image: linear-gradient(to right, #ff0000, #aa0000); } Perhaps you followed a tutorial to achieve something, and the CSS is a little non-obvious.¬†In that case you could add the URL of the tutorial to the comments. You will thank yourself when you come back to this project in a year or so, and can vaguely remember there was a great tutorial about that thing, but where is it? Create logical sections in your stylesheet It is a good idea to have all of the common styling first in the stylesheet. This means all of the styles which will generally apply unless you do something special with that element. You will typically have rules set up for: body p h1,¬†h2,¬†h3,¬†h4,¬†h5 ul¬†and¬†ol The¬†table¬†properties Links In this section of the stylesheet we are providing default styling for the type on the site, setting up a default style for data tables and lists and so on. /* || GENERAL STYLES */ body { ... } h1, h2, h3, h4 { ... } ul { ... } blockquote { ... } After this section we could define a few utility classes, for example a class that removes the default list style for lists we‚Äôre going to display as flex items or in some other way. If you have a few things you know you will want to apply to lots of different elements, they can come in this section. /* || UTILITIES */ .nobullets { list-style: none; margin: 0; padding: 0; } ... Then we can add everything that is used sitewide. That might be things like the basic page layout, the header, navigation styling, and so on. /* || SITEWIDE */ .main-nav { ... } .logo { ... } Finally we will include CSS for specific things, broken down by the context, page or even component in which they are used. /* || STORE PAGES */ .product-listing { ... } .product-box { ... } By ordering things in this way, we at least have an idea in which part of the stylesheet we will be looking for something that we want to change. Avoid overly-specific selectors If you create very specific selectors you will often find that you need to duplicate chunks of your CSS to apply the same rules to another element. For example, you might have something like the below selector, which applies the rule to a¬†¬†with a class of¬†box¬†inside an¬†with a class of¬†main. article.main p.box { border: 1px solid #ccc; } If you then wanted to apply the same rules to something outside of¬†main, or to something other than a¬†, you would have to add another selector to these rules or create a whole new ruleset. Instead, you could create a class called¬†box¬†and apply that anywhere. .box { border: 1px solid #ccc; } There will be times when making something more specific makes sense, however this will generally be an exception rather than usual practice. Break large stylesheets into multiple smaller ones In particular in cases where you have very different styles for distinct parts of the site, you might want to have a stylesheet that includes all the global rules and then smaller ones that include the specific rules needed for those sections. You can link to multiple stylesheets from one page, and the normal rules of the cascade apply, with rules in stylesheets linked later coming after rules in stylesheets linked earlier. For example, we might have an online store as part of the site, with a lot of CSS used only for styling the product listings and forms needed for the store. It would make sense to have those things in a different stylesheet, only linked to on store pages. This can make it easier to keep your CSS organised, and also means that if multiple people are working on the CSS you will have fewer situations where two people need to work on the same stylesheet at once, leading to conflicts in source control. Other tools that can help CSS itself doesn‚Äôt have much in the way of in-built organisation, therefore you need to do the work to create consistency and rules around how you write CSS. The web community has also developed various tools and approaches that can help you to manage larger CSS projects. As they may be helpful for you to investigate, and you are likely to come across these things when working with other people, we‚Äôve included a short guide to some of these. CSS methodologies Instead of needing to come up with your own rules for writing CSS, you may benefit from adopting one of the approaches already designed by the community and tested across many projects. These methodologies are essentially CSS coding guides that take a very structured approach to writing and organising CSS. Typically they tend to result in more verbose use of CSS than you might have if you wrote and optimised every selector to a custom set of rules for that project. However, you do gain a lot of structure by adopting one and, as many of these systems are very widely used, other developers are more likely to understand the approach you are using and be able to write their CSS in the same way, rather than having to work out your own personal methodology from scratch. OOCSS Most of the approaches that you will encounter owe something to the concept of Object Oriented CSS (OOCSS), an approach made popular by¬†the work of Nicole Sullivan. The basic idea of OOCSS is to separate your CSS into reusable objects, which can be used anywhere you need on your site. The standard example of OOCSS is the pattern described as¬†The Media Object. This is a pattern with a fixed size image, video or other element on one side, and flexible content on the other. It‚Äôs a pattern we see all over websites for comments, listings, and so on. If you are not taking an OOCSS approach you might create custom CSS for the different places this pattern is used, for example creating a class called¬†comment¬†with a bunch of rules for the component parts, then a class called¬†list-item¬†with almost the same rules as the¬†commentclass except for some tiny differences. The differences between these two components is that the list-item has a bottom border, and images in comments have a border whereas list-item images do not. .comment { display: grid; grid-template-columns: 1fr 3fr; } .comment img { border: 1px solid grey; } .comment .content { font-size: .8rem; } .list-item { display: grid; grid-template-columns: 1fr 3fr; border-bottom: 1px solid grey; } .list-item .content { font-size: .8rem; } In OOCSS, you would create one pattern called¬†media¬†that would have all of the common CSS for both patterns ‚Äî a base class for things that are generally the shape of the media object. Then we‚Äôd add an additional class to deal with those tiny differences, thus extending that styling in specific ways. .media { display: grid; grid-template-columns: 1fr 3fr; } .media .content { font-size: .8rem; } .comment img { border: 1px solid grey; } .list-item { border-bottom: 1px solid grey; } In your HTML the comment would need both the¬†media¬†and¬†comment¬†classes applied: The list-item would have¬†media¬†and¬†list-item¬†applied: The work that Nicole Sullivan did in describing this approach and promoting it means that even people who are not strictly following an OOCSS approach today will generally be reusing CSS in this way ‚Äî it has entered our understanding as a good way to approach things in general. BEM BEM stands for Block Element Modifier. In BEM a block is a standalone entity such as a button, menu, or logo. An element is something like a list item or a title that is tied to the block it is in. A modifier is a flag on a block or element that changes the styling or behavior. You will be able to recognise code that uses BEM due to the extensive use of dashes and underscores in the CSS classes. For example, look at the classes applied to this HTML from the page about¬†BEM Naming conventions: The additional classes are similar to those used in the OOCSS example, however they use the strict naming conventions of BEM. BEM is widely used in larger web projects and many people write their CSS in this way. It is likely that you will come across examples, even in tutorials, that use BEM syntax, without mentioning why the CSS is structured in such a way. To read more about the system read¬†BEM 101¬†on CSS Tricks. Other common systems There are a large number of these systems in use. Other popular approaches include¬†Scalable and Modular Architecture for CSS (SMACSS), created by Jonathan Snook,¬†ITCSS¬†from Harry Roberts, and¬†Atomic CSS (ACSS), originally created by Yahoo!. If you come across a project that uses one of these approaches then the advantage is that you will be able to search and find many articles and guides to help you understand how to code in the same style. The disadvantage of using such a system is that they can seem overly complex, especially for smaller projects. Build systems for CSS Another way to organise CSS is to take advantage of some of the tooling that is available for front-end developers, which allows you to take a slightly more programmatic approach to writing CSS. There are a number of tools which we refer to as¬†pre-processors¬†and¬†post-processors. A pre-processor runs over your raw files and turns them into a stylesheet, whereas a post-processor takes your finished stylesheet and does something to it ‚Äî perhaps to optimize it in order that it will load faster. Using any of these tools will require that your development environment can run the scripts that do the pre and post-processing. Many code editors can do this for you, or you can install command line tools to help. The most popular pre-processor is¬†Sass. This is not a Sass tutorial, so I will briefly explain a couple of the things that Sass can do, which are really helpful in terms of organisation, even if you don‚Äôt use any of the other Sass features. Defining variables CSS now has native¬†custom properties, making this feature increasingly less important, however one of the reasons you might use Sass is to be able to define all of the colors and fonts used in a project as settings, then use that variable around the project. This means that if you realise you have used the wrong shade of blue, you only need change it in one place. If we created a variable called¬†$base-color¬†as in the first line below, we could then use it through the stylesheet anywhere that required that color. $base-color: #c6538c; .alert { border: 1px solid $base-color; } Once compiled to CSS, you would end up with the following CSS in the final stylesheet. .alert { ¬† border: 1px solid #c6538c; } Compiling component stylesheets I mentioned above that one way to organise CSS is to break down stylesheets into smaller stylesheets. When using Sass you can take this to another level and have lots of very small stylesheets ‚Äî even going as far as having a separate stylesheet for each component. By using the include functionality in Sass these can then all be compiled together into one, or a small number of stylesheets to actually link into your website. You can see how one developer approaches the problem in¬†this blog post. Note: A simple way to try out Sass is to use¬†CodePen¬†‚Äî you can enable Sass for your CSS in the Settings for a Pen, and CodePen will then run the Sass parser for you, in order that you can see the resulting webpage with regular CSS applied. Sometimes you will find that CSS tutorials have used Sass rather than plain CSS in their CodePen demos, so it is handy to know a little bit about it. Post-processing for optimization If you are concerned about adding size to your stylesheets by adding a lot of additional comments and whitespace for example, then a post-processing step could be to optimize the CSS by stripping out anything unneccessary in the production version. An example of a post-processor solution for doing this would be¬†cssnano."},{"title":"Overflowing content","url":"//css/overflowing-content/","tags":["css","overflow"],"body":"Overflowing content What is overflow? We already know that everything in CSS is a box, and that we can constrain the size of these boxes by giving them values of¬†[width](https://developer.mozilla.org/en-US/docs/Web/CSS/width)¬†and¬†[height](https://developer.mozilla.org/en-US/docs/Web/CSS/height)¬†(or¬†[inline-size](https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size)¬†and¬†[block-size](https://developer.mozilla.org/en-US/docs/Web/CSS/block-size)). Overflow is what happens when you have too much content in a box, so it won‚Äôt fit inside it comfortably. CSS gives you various tools to manage this overflow, and it is also a useful concept to understand at this early stage. You will come across overflow situations quite often when writing CSS, especially when you get deeper into CSS layout. CSS tries to avoid ‚Äúdata loss‚Äù Let‚Äôs start off by looking at two examples that demonstrate how CSS behaves by default when you have overflow. The first is a box that has been restricted in the block dimension by giving it a¬†height. We have then added more content than there is space for in this box. The content is overflowing the box and laying itself rather messily over the paragraph below the box. The second is a word in a box that is restricted in the inline dimension. The box has been made too small for that word to fit and so it breaks out of the box. You might wonder why CSS has by default taken the rather untidy approach of causing the content to overflow messily? Why not hide the additional content, or cause the box to grow? Wherever possible CSS does not hide your content; to do so would cause data loss, which is usually a problem. In CSS terms, this means some content vanishing. The problem with content vanishing is that you might not notice it has vanished. Your visitors may not notice it has vanished. If it is the submit button on a form that disappears, and no-one can complete the form, that‚Äôs a big problem! So instead, CSS tends to overflow in a visible way. It is likely you will see the mess, or at worst a visitor to your site will let you know that some content is overlapping so it needs fixing. If you have restricted a box with a¬†width¬†or a¬†height, CSS assumes you know what you are doing, and that you are managing the potential for overflow. In general, restricting the block dimension is problematic when text is going to be put in a box, as there may be more text than you expected when designing the site or the text may be bigger ‚Äî for example if the user has increased their font size. In the next couple of lessons we will look at different ways to control sizing that might be less prone to overflow. However, if you need a fixed size you can also control how the overflow behaves. Let‚Äôs read on! The overflow property The¬†[overflow](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow)¬†property is how you take control of an element‚Äôs overflow and tell the browser how you want it to behave. The default value of overflow is¬†visible, which is why by default we can see our content when it overflows. If you want to crop the content when it overflows you can set¬†overflow: hidden¬†on your box. This will do exactly what it says ‚Äî hide the overflow. This may well cause things to vanish so you should only ever do this if hiding content is not going to cause a problem. Perhaps you would instead like to add scrollbars when content overflows? If you use¬†overflow: scroll¬†then your browser will always display scrollbars ‚Äî even if there is not enough content to overflow. You may want this, as it prevents scrollbars appearing and disappearing depending on content. If you remove some of the content from the box below, you‚Äôll see that the scrollbars still remain even with nothing to scroll (or at least just the scrollbar tracks). In the above example we only need to scroll on the¬†y¬†axis, however we get scrollbars in both axes. You could instead use the¬†[overflow-y](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y)¬†property, setting¬†overflow-y: scroll¬†to only scroll on the¬†y¬†axis. You could also scroll on the x axis using¬†[overflow-x](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x), although this is not a recommended way to deal with long words! If you do need to deal with a long word in a small box then you could look at the¬†[word-break](https://developer.mozilla.org/en-US/docs/Web/CSS/word-break)¬†or¬†[overflow-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap)¬†properties. In addition some of the methods discussed in the¬†Sizing items in CSS¬†lesson may help you to create boxes that cope better with varying amounts of content. As with¬†scroll, you will get a scrollbar in the scrolling dimension whether or not there is enough content to cause a scrollbar. Note: that you can specify x and y scrolling using the¬†overflow¬†property and passing in two values. If two keywords are specified, the first applies to¬†overflow-x¬†and the second to¬†overflow-y. Otherwise, both¬†overflow-x¬†and¬†overflow-y¬†are set to the same value. For example,¬†overflow: scroll hidden¬†would set¬†overflow-x¬†to¬†scrolland¬†overflow-y¬†to¬†hidden. If you only want scrollbars to appear if there is more content than can fit in the box, then use¬†overflow: auto. In this case it is left up to the browser to decide whether to display scrollbars. Desktop browsers will typically only do so once there is enough content to cause overflow. In the below example, remove some of the content until it fits into the box and you should see the scrollbars disappear. Overflow establishes a Block Formatting Context There is a concept in CSS of the¬†Block Formatting Context¬†(BFC). This isn‚Äôt something you need to worry too much about right now, but it is useful to know that when you use a value of overflow such as¬†scroll¬†or¬†auto¬†you create a BFC. The result is that the content of the box you have changed the value of¬†overflow¬†for becomes a mini layout of its own. Things outside the container cannot poke into the container, and nothing can poke out of that box into the surrounding layout. This is to enable the scrolling behavior, as all content of your box will need to be contained and not overlap other items on the page, in order to create a consistent scrolling experience. Unwanted overflow in web design Modern layout methods (as covered in the¬†CSS layout¬†module) manage overflow very well. They have been designed to cope with the fact that we tend not to be able to predict how much content we have on the web. In the past however, developers would often use fixed heights to try to line up the bottoms of boxes that really had no relationship to each other. This was fragile, and in a legacy application you may occasionally come across a box where the content is overlaying other content on the page. If you see this you now know that what is happening is overflow; ideally you would refactor the layout to not rely on fixing the box size. When developing a site you should always keep overflow issues in mind. You should test designs with large and small amounts of content, increase the font size of text and ensure that your CSS can cope in a robust way. Changing the value of overflow to hide content or add scrollbars is likely to be something you reserve only for a few special cases ‚Äî where you really do want a scrolling box for example."},{"title":"Handling different text directions","url":"//css/handling-different-text-directions/","tags":["css","rtl","ltr"],"body":"Handling different text directions What are writing modes? A writing mode in CSS refers to whether the text is running horizontally or vertically. The¬†[writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode)¬†property lets us switch from one writing mode to another. You don‚Äôt need to be working in a language which uses a vertical writing mode to want to do this ‚Äî you could also change the writing mode of parts of your layout for creative purposes. In the example below we have a heading displayed using¬†writing-mode: vertical-rl. The text now runs vertically. Vertical text is common in graphic design, and can be a way to add a more interesting look and feel to your web design. The three possible values for the¬†[writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode)¬†property are: horizontal-tb: Top-to-bottom block flow direction. Sentences run horizontally. vertical-rl: Right-to-left block flow direction. Sentences run vertically. vertical-lr: Left-to-right block flow direction. Sentences run vertically. So the¬†writing-mode¬†property is in reality setting the direction in which block-level elements are displayed on the page ‚Äî either from top-to-bottom, right-to-left, or left-to-right. This then dictates the direction text flows in sentences. Writing modes and block and inline layout We have already discussed¬†block and inline layout, and the fact that some things display as block elements and others as inline elements. As we have seen described above, block and inline is tied to the writing mode of the document, and not the physical screen. Blocks are only displayed from the top to the bottom of the page if you are using a writing mode that displays text horizontally, such as English. If we look at an example this will become clearer. In this next example I have two boxes that contain a heading and a paragraph. The first uses¬†writing-mode: horizontal-tb, a writing mode that is written horizontally and from the top of the page to the bottom. The second uses¬†writing-mode: vertical-rl; this is a writing mode that is written vertically and from right to left. When we switch the writing mode, we are changing which direction is block and which is inline. In a¬†horizontal-tb¬†writing mode the block direction runs from top to bottom; in a¬†vertical-rl¬†writing mode the block direction runs right-to-left horizontally. So the¬†block dimension¬†is always the direction blocks are displayed on the page in the writing mode in use. The¬†inline dimension¬†is always the direction a sentence flows. This figure shows the two dimensions when in a horizontal writing mode. This figure shows the two dimensions in a vertical writing mode. Once you start to look at CSS layout, and in particular the newer layout methods, this idea of block and inline becomes very important. We will revisit it later on. Direction In addition to writing mode we also have text direction. As mentioned above, some languages such as Arabic are written horizontally, but right-to-left. This is not something you are likely to use in a creative sense ‚Äî if you simply want to line something up on the right there are other ways to do so ‚Äî however it is important to understand this as part of the nature of CSS. The web is not just for languages that are displayed left-to-right! Due to the fact that writing mode and direction of text can change, newer CSS layout methods do not refer to left and right, and top and bottom. Instead they will talk about¬†start¬†and¬†endalong with this idea of inline and block. Don‚Äôt worry too much about that right now, but keep these ideas in mind as you start to look at layout; you will find it really helpful in your understanding of CSS. Logical properties and values The reason to talk about writing modes and direction at this point in your learning however, is because of the fact we have already looked at a lot of properties which are tied to the physical dimensions of the screen, and make most sense when in a horizontal writing mode. Let‚Äôs take a look at our two boxes again ‚Äî one with a¬†horizontal-tb¬†writing mode and one with¬†vertical-rl. I have given both of these boxes a¬†[width](https://developer.mozilla.org/en-US/docs/Web/CSS/width). You can see that when the box is in the vertical writing mode, it still has a width, and this is causing the text to overflow. What we really want in this scenario, is to essentially swap height and width along with the writing mode. When we‚Äôre in a vertical writing mode we want the box to expand in the block dimension just like it does in the horizontal mode. To make this easier, CSS has recently developed a set of mapped properties. These essentially replace physical properties ‚Äî things like¬†width¬†and¬†height¬†‚Äî with¬†logical, or¬†flow relativeversions. The property mapped to¬†width¬†when in a horizontal writing mode is called¬†[inline-size](https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size)¬†‚Äî it refers to the size in the inline dimension. The property for¬†height¬†is named¬†[block-size](https://developer.mozilla.org/en-US/docs/Web/CSS/block-size)and is the size in the block dimension. You can see how this works in the example below where we have replaced¬†width¬†with¬†inline-size. Logical margin, border, and padding properties In the last two lessons we have learned about the CSS box model, and CSS borders. In the margin, border, and padding properties you will find many instances of physical properties, for example¬†[margin-top](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top),¬†[padding-left](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left), and¬†[border-bottom](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom). In the same way that we have mappings for width and height there are mappings for these properties. The¬†margin-top¬†property is mapped to¬†[margin-block-start](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start)¬†‚Äî this will always refer to the margin at the start of the block dimension. The¬†[padding-left](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left)¬†property maps to¬†[padding-inline-start](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start), the padding that is applied to the start of the inline direction. This will be where sentences start in that writing mode. The¬†[border-bottom](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)¬†property maps to¬†[border-block-end](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end), which is the border at the end of the block dimension. You can see a comparison between physical and logical properties below. If you change the writing mode of the boxes by switching the¬†writing-mode¬†property on¬†.box¬†to¬†vertical-rl, you will see how the physical properties stay tied to their physical direction, whereas the logical properties switch with the writing mode. You can also see that the¬†[](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2)¬†has a black¬†border-bottom. Can you work out how to make that bottom border always go below the text in both writing modes? There are a huge number of properties when you consider all of the individual border longhands, and you can see all of the mapped properties on the MDN page for¬†Logical Properties and Values. Logical values We have so far looked at logical property names. There are also some properties that take physical values of¬†top,¬†right,¬†bottom, and¬†left. These values also have mappings, to logical values ‚Äî¬†block-start,¬†inline-end,¬†block-end, and¬†inline-start. For example, you can float an image left to cause text to wrap round the image. You could replace¬†left¬†with¬†inline-start¬†as shown in the example below. Change the writing mode on this example to¬†vertical-rl¬†to see what happens to the image. Change¬†inline-start¬†to¬†inline-end¬†to change the float. Here we are also using logical margin values to ensure the margin is in the correct place no matter what the writing mode is. Should you use physical or logical properties? The logical properties and values are newer than their physical equivalents, and therefore have only recently been implemented in browsers. You can check any property page on MDN to see how far back the browser support goes. If you are not using multiple writing modes then for now you might prefer to use the physical versions. However, ultimately we expect that people will transition to the logical versions for most things, as they make a lot of sense once you start also dealing with layout methods such as flexbox and grid."},{"title":"Getting Started with SASS","url":"//sass/getting-started-with-sass/","tags":["css","sass"],"body":"Getting Started with SASS Before you can use Sass, you need to set it up on your project. If you want to just browse here, go ahead, but we recommend you go install Sass first. Go here if you want to learn how to get everything setup. Preprocessing CSS on its own can be fun, but stylesheets are getting larger, more complex, and harder to maintain. This is where a preprocessor can help. Sass lets you use features that don‚Äôt exist in CSS yet like variables, nesting, mixins, inheritance and other nifty goodies that make writing CSS fun again. Once you start tinkering with Sass, it will take your preprocessed Sass file and save it as a normal CSS file that you can use in your website. The most direct way to make this happen is in your terminal. Once Sass is installed, you can compile your Sass to CSS using the sass command. You‚Äôll need to tell Sass which file to build from, and where to output CSS to. For example, running sass input.scss output.css from your terminal would take a single Sass file, input.scss, and compile that file to output.css. You can also watch individual files or directories with the ‚Äìwatch flag. The watch flag tells Sass to watch your source files for changes, and re-compile CSS each time you save your Sass. If you wanted to watch (instead of manually build) your input.scss file, you‚Äôd just add the watch flag to your command, like so: sass ‚Äìwatch input.scss output.css You can watch and output to directories by using folder paths as your input and output, and separating them with a colon. In this example: sass ‚Äìwatch app/sass:public/stylesheets Sass would watch all files in the app/sass folder for changes, and compile CSS to the public/stylesheets folder. Variables Think of variables as a way to store information that you want to reuse throughout your stylesheet. You can store things like colors, font stacks, or any CSS value you think you‚Äôll want to reuse. Sass uses the $ symbol to make something a variable. Here‚Äôs an example: SCSSSassCSS SCSS SYNTAX $font-stack: Helvetica, sans-serif; $primary-color: #333; body { font: 100% $font-stack; color: $primary-color; } CSS OUTPUT body { font: 100% Helvetica, sans-serif; color: #333; } When the Sass is processed, it takes the variables we define for the $font-stack and $primary-color and outputs normal CSS with our variable values placed in the CSS. This can be extremely powerful when working with brand colors and keeping them consistent throughout the site. Nesting When writing HTML you‚Äôve probably noticed that it has a clear nested and visual hierarchy. CSS, on the other hand, doesn‚Äôt. Sass will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. Be aware that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice. With that in mind, here‚Äôs an example of some typical styles for a site‚Äôs navigation: SCSSSassCSS SCSS SYNTAX nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } CSS OUTPUT nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } You‚Äôll notice that the ul, li, and a selectors are nested inside the nav selector. This is a great way to organize your CSS and make it more readable. Partials You can create partial Sass files that contain little snippets of CSS that you can include in other Sass files. This is a great way to modularize your CSS and help keep things easier to maintain. A partial is a Sass file named with a leading underscore. You might name it something like _partial.scss. The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file. Sass partials are used with the @use rule. Modules Compatibility: Dart Sass since 1.23.0 LibSass ‚úó Ruby Sass ‚úó ‚ñ∂ You don‚Äôt have to write all your Sass in a single file. You can split it up however you want with the @use rule. This rule loads another Sass file as a module, which means you can refer to its variables, mixins, and functions in your Sass file with a namespace based on the filename. Using a file will also include the CSS it generates in your compiled output! SCSSSassCSS SCSS SYNTAX // _base.scss $font-stack: Helvetica, sans-serif; $primary-color: #333; body { font: 100% $font-stack; color: $primary-color; } // styles.scss @use 'base'; .inverse { background-color: base.$primary-color; color: white; } CSS OUTPUT body { font: 100% Helvetica, sans-serif; color: #333; } .inverse { background-color: #333; color: white; } Notice we‚Äôre using @use ‚Äòbase‚Äô; in the styles.scss file. When you use a file you don‚Äôt need to include the file extension. Sass is smart and will figure it out for you. Mixins Some things in CSS are a bit tedious to write, especially with CSS3 and the many vendor prefixes that exist. A mixin lets you make groups of CSS declarations that you want to reuse throughout your site. You can even pass in values to make your mixin more flexible. A good use of a mixin is for vendor prefixes. Here‚Äôs an example for transform. SCSSSassCSS SCSS SYNTAX @mixin transform($property) { -webkit-transform: $property; -ms-transform: $property; transform: $property; } .box { @include transform(rotate(30deg)); } CSS OUTPUT .box { -webkit-transform: rotate(30deg); -ms-transform: rotate(30deg); transform: rotate(30deg); } To create a mixin you use the @mixin directive and give it a name. We‚Äôve named our mixin transform. We‚Äôre also using the variable $property inside the parentheses so we can pass in a transform of whatever we want. After you create your mixin, you can then use it as a CSS declaration starting with @include followed by the name of the mixin. Extend/Inheritance This is one of the most useful features of Sass. Using @extend lets you share a set of CSS properties from one selector to another. It helps keep your Sass very DRY. In our example we‚Äôre going to create a simple series of messaging for errors, warnings and successes using another feature which goes hand in hand with extend, placeholder classes. A placeholder class is a special type of class that only prints when it is extended, and can help keep your compiled CSS neat and clean. SCSSSassCSS SCSS SYNTAX /* This CSS will print because %message-shared is extended. */ %message-shared { border: 1px solid #ccc; padding: 10px; color: #333; } // This CSS won't print because %equal-heights is never extended. %equal-heights { display: flex; flex-wrap: wrap; } .message { @extend %message-shared; } .success { @extend %message-shared; border-color: green; } .error { @extend %message-shared; border-color: red; } .warning { @extend %message-shared; border-color: yellow; } What the above code does is tells .message, .success, .error, and .warning to behave just like %message-shared. That means anywhere that %message-shared shows up, .message, .success, .error, & .warning will too. The magic happens in the generated CSS, where each of these classes will get the same CSS properties as %message-shared. This helps you avoid having to write multiple class names on HTML elements. You can extend most simple CSS selectors in addition to placeholder classes in Sass, but using placeholders is the easiest way to make sure you aren‚Äôt extending a class that‚Äôs nested elsewhere in your styles, which can result in unintended selectors in your CSS. Note that the CSS in %equal-heights isn‚Äôt generated, because %equal-heights is never extended. Operators Doing math in your CSS is very helpful. Sass has a handful of standard math operators like +, -, *, /, and %. In our example we‚Äôre going to do some simple math to calculate widths for an aside & article. SCSSSassCSS SCSS SYNTAX .container { width: 100%; } article[role=\"main\"] { float: left; width: 600px / 960px * 100%; } aside[role=\"complementary\"] { float: right; width: 300px / 960px * 100%; } CSS OUTPUT .container { width: 100%; } article[role=\"main\"] { float: left; width: 62.5%; } aside[role=\"complementary\"] { float: right; width: 31.25%; } We‚Äôve created a very simple fluid grid, based on 960px. Operations in Sass let us do something like take pixel values and convert them to percentages without much hassle."},{"title":"Content Management with Jekyll","url":"//categories:
200/jekyll/intro-to-dev-biz/","tags":[],"body":"Assigned Prep Cheatsheet: Markdown Basic Syntax Article: Web design workflow: What to expect when starting a website project Video: Storyboarding For People Who Can‚Äôt Draw Article: Agile philosophy: A summary Video: AARRR Video: Design Sprint Introduction Article: Lean Methodology Video: Lean Canvas Tool Time: Git and Cmder Install Git and Commandr onto your system if you already haven‚Äôt. We‚Äôll need these tomorrow. Search Tips Reviewed convergent searches Be brief: try to reduce your search query to four words or less. Note: there are many times you will break this rule such as when you search an error (you‚Äôre searching errors, right?) or when you need extra terms to make your query domain-specific (see next step!). Make your search domain-specific (aka industry specific). ‚Äúheading‚Äù could mean a number of different things, depending on context. ‚Äúhtml heading‚Äù focuses your search to the web design domain. Qualify your search with terms specific to your needs and skill level. These terms are often reused for many searches. Examples: tutorial cheatsheet checklist review documentation divergent searches Access your engine‚Äôs suggestion results by appending ‚Äúvs‚Äù the end of your query. This is handy for finding alternatives to a specific tool/technique/philosophy. If suggestions exist (ie you‚Äôre using Google) but the results disappear for a search, you probably used too many words; Google seems to only index simple phrases. Waterfall The article Web design workflow: What to expect when starting a website project is one of maaaany that breakdown the steps in a waterfall development workflow: First contact Discovery Are we supporting IE? Do you have analytics? Content design content inventory Information Architecture Site map Wireframing Two methods: full page wireframe storyboard wireframe (wireframing only what‚Äôs in the viewport). See Designing for a Viewport for the inspiration behind this method. Mockups Prototyping Development Testing Launch Fires Long-term support The 3 Elephants in the Room Budget Timeline Milestones Assignment 2: Homepage wireframes See the Assignment 2 readme for details. Due Friday @ 8PM Tool Time: Wireframe editor Assignment 2 is a research and self-learning assignment. This course is mostly tool agnostic. For example, you don‚Äôt have to use VS Code; there are many professional alternatives available. The current industry-standard wireframe and mockup software package is Sketch (which as only recently had a Windows version, kinda) BUT there are two or three signifcant competitors. Using your razor-sharp search skills, find the top three free-ish Sketch alternatives. Find system requirements, reviews and comparison articles to decide which you‚Äôll install and play around with (all of them?). Top Alternatives Figma Adobe XD Framer X agile A professional alternative to waterfall development workflows. Core Principles Individuals and Interactions over processes and tools Working Software over comprehensive documentation Customer Collaboration over contract negotiation Responding to Change over following a plan Agile comes in many flavours but here are three we‚Äôll talk about: Scrum Core Principles Transparency Inspection Adaptation In practice Cycles are sprints Standup meetings Product Ownership Kanban Core Principles Understanding Agreement Respect Leadership Flow Customer Focus Transparency Balance Collaboration In practice: Each process issues requests (kanban) to its suppliers when it consumes its supplies. Each process produces according to the quantity and sequence of incoming requests. No items are made or transported without a request. The request associated with an item is always attached to it. Processes must not send out defective items, to ensure that the finished products will be defect-free. Limiting the number of pending requests makes the process more sensitive and reveals inefficiencies. Lean Core Principles Define Learn Experiment In practice: Document your Plan A Identify the riskiest parts of your plan Systematically test your plan Prep for Tomorrow Article: Git: forking vs cloning Article: The CSS Box Model Video: Reading Colour Hexcodes"},{"title":"Content Management with Jekyll","url":"//categories:
200/jekyll/content-management-with-jekyll/","tags":[],"body":"Content Management with Jekyll Assignment 1 See Winter 2020 Assignments Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Ruby DevOps Ruby/Jekyll terms: see Setup Ruby Gem and RubyGem Gemfile Bundler/bundle Options for installing bare metal rbv: Ruby version manager docker Questions to ask How often do you use Ruby? Do you have multiple Ruby projects to maintain? Is your laptop close to death? installation Mac Windows CRUD of content Hagrid and Hermoine Hagrid CRUD Creating and Retrieve: Request comes in Hagrid will assemble index.html using views and db info Respond with finished HTML Hermoine CRUD Create: parse markdown of the site from file database create every possible static page of the site ONCE Retrieve: finds index.html in the file system returns it. differences between WP and Jekyll (there are lots more) database WP -> mysql Jekyll -> file database Live code: vanilla jekyll Jekyll Documentation Basic jekyll structure Great Jekyll Summary YAML [20 min break] Live code: try a couple Top 10 installs pagination headaches localization skins Afternoon Check-in How far did we get installing Jekyll? Update from Kim/Karen meeting Overview of minimal mistakes theme Anything else? Q&A Q: A: Jekyll Requirements Ruby version 2.4.0 or above, including all development headers (ruby version can be checked by running ruby -v) RubyGems (which you can check by running gem -v) GCC and Make (in case your system doesn‚Äôt have them installed, which you can check by running gcc -v,g++ -v and make -v in your system‚Äôs command line interface) Installation macOS Ubuntu Linux Other Linux distros Windows Docker README.md Getting Started Jekyll Documentation Step-by-step Tutorial Great Jekyll Summary Jekyll Example Sites Jekyll on GitHub Pages GitHub Setting up a GitHub Pages site with Jekyll Remote Themes on GitHub Pages Search: github pages jekyll Activity 1: Jekyll Setup Install Ruby, RubyGems (and possibly GCC and Make) on your system (See Installation Guide) Install Jekyll Create Hello World site Optional: Continue with Jekyll Step-by-step Activity 2: Try installing one or more 3rd party themes Search: top jekyll themes Top 10 Free Themes on Jekyll Themes Pick a theme that speaks to you as a person. Install theme according to the theme‚Äôs instructions (sometimes a bumpy road). Customize site as needed (hint: Assignment 1). Activity 3: Install Jekyll Using the GitHub Pages Theme Chooser Theme Chooser Step-by-Step List of all default GH Jekyll Themes"},{"title":"Introduction to E-commerce","url":"//jekyll/intro-to-ecommerce/","tags":[],"body":"Relevant Resources Articles by Steve Chou Private Label vs Retail Arbitrage vs Dropshipping vs Wholesale ‚Äì 8 Ecommerce Business Models Compared by Steve Chou AliExpress Dropshipping & Oberlo Are Officially Dead ‚Äì Here‚Äôs Why Shopify dropshipping Wholesale Ted Create a Dropshipping Store with Shopify & Aliexpress (UPDATED Shopify Tutorial for 2019) Sebastian Ghiorghiu [Dropshipping In 2019 - 2020 Everything You Should Know](https://www.youtube.com/watch?v=7hpIRP8Nph8) Justin Painter shortcut: Meme page and Influencer MArketing print on demand Shortcut: T-shirt dropship breakdown by Joe Roberts cost of FB ads: $10/sale (very anecdotal stat) 10 Things To Do BEFORE You Start A Print On Demand Store‚Ä¶ (Beginner Mistakes to AVOID) 120: Amazon Merch - darker shades (t-shirts) usually perform better with black being top selling colour 645: Placeit - lifestyle photo generator 750: Don‚Äôt just opt for selling t-shirts 795: Principle of price anchoring 1095: Principle of illusory superiority digital downloads SHOPIFY - How To Make $1,000 A DAY With Digital Products Keder Cormier 195: Hire a designer (and get yourself out of the picture) 490: e-books Etsy [Etsy vs Shopify Pros and Cons Which is right for you?](https://www.youtube.com/watch?v=_nMrGWkchgs) by Merch Lifestyle Buying and selling products or services online Web Email Mobile applications Products include physical or digital products, or services Can involve complex chain of inventory control, warehouses, shipping, receiving, couriers, etc. Or can be as simple as online payment and download of digital files. E-commerce vs E-business Ecommerce is the sales subset of Ebusiness Ebusiness covers all aspects of using electronic systems to conduct business Purchasing Receiving Shipping Order processing Customer service Accounting more Brick and Mortar Businesses Existing business starting online sales Has physical locations, infrastructure, customer, and supplier relationships Questions to Ask Will it improve customer support, or get good publicity? Will it bring more customers or sales? Does the site support business goals or hurt them? Online Entrepreneur New venture, strictly online Doesn‚Äôt need store-front locations and most infrastructure What is needed depends on type of product/service Questions to Ask How can we differentiate from competitors? How should we handle orders, payments, returns, warranties, service, support? Will suppliers be up to the job? Is product easy/economical to deliver? How will we build it? What size site? What will it cost? Advantages of Ecommerce Market research indicates that it is needed Customers want it! Makes businesses more efficient, profitable, etc. Makes the customer experience better Helps to provide information/support to customers Products and services can reach a wider audience Disadvantages of Ecommerce Not all business plans support it Products can be too difficult or expensive to ship globally Customers may prefer physical interaction with the product when shopping Not useful for businesses that are locally focused Need the staff, resources, and knowledge to do Ecommerce properly Not useful for a customer demographic that isn‚Äôt online Site Essentials You can‚Äôt just open an online store and expect customers to flock to it. You must have: Products and services that customers need and want a solid delivery infrastructure Order tracking Customer service Customer loyalty rewards Relationship management Support (files, technical help, information, etc.) Ecommerce Models There are 8 basic ecommerce models. Many websites combine several models. Each of the 8 basic models has unique characteristics that distinguish it from the other models. Brochureware Site a marketing site that electronically aids in the buying and selling process Sometimes provides additional information to support customers online documentation software downloads FAQ Generates revenue indirectly by creating awareness of the business‚Äô products and services Transactions occur offline. Online Store A website where customers can buy products or services. Customers browse an online catalog You can add products to an online shopping cart Checkout process Payment processing Inventory update Shipping notification Capture customer information Subscription Site Targets a specific niche market that places a value on expert information, service, or a digital product delivered in a timely manner. Technical newsletters Access to research information Graphics Music Computer game downloads, etc. Removing ads Selling for a monthly fee, an annual subscription, or a small per transation fee An account login is important Advertising Site Content-heavy site that gets revenue from banners, sponsorships, ads, and other advertising methods. Traffic to the site is the measure of its value. Very few sites can be supported entirely through advertising dollars. Google and Facebook use an advertising model Online Store Ecosystem Etsy, for example. Simple and easy way to sell products/services online, especially when you‚Äôre starting out Offers turnkey solutions for store creation, payment processing, and site management. The platform handles the marketing and all the technical requirements Business-to-Business Built to serve other businesses Selling directly to other businesses (wholesale operations) Integrating systems with vendors/suppliers for automated ordering Auction Sites Person offers an item for sale and potential buyers bid on the item. Bidder willing to pay the highest price for the item wins. Can create your own auction site or use another to build a business If you use an established auction site, they provide the site infrastructure, reputation tracking, notifications, etc. Blogging Provides a news/editorial service to draw in customers May be integrated with other models as a ‚Äúvalue added‚Äù service May have advertising revenue Could have a Patreon (or similar) component Implementing Your Website Ecommerce Details We‚Äôve already covered designing websites, but lets talk about features needed for ecommerce Domain Name Digital Certificates Merchant Account Domain Name Catchy easy-to-remember name that makes people remember your business Make sure it‚Äôs actually available Register your domain Domain Name Registry Governed by Internet Corporation for Assigned Names and Numbers (ICANN) Registration conducted by registrars for an annual fee (1 to 10 years at a time) For business use, choose a .com domain but also register the other top-level domains Prevents competitors or disreputable parties from hijacking your company name Digital Certificates aka SSL certificates Key to providing customer transaction security Obtain a digital certificate from a ‚ÄúCertificate Authority‚Äù SSL Secure Socket Layer Standardizes the way web browsers and web servers communicate with each other using encrypted data Digital certificate is used to authenticate the server and initiate the encryption process You can get certificates through your web hosting or obtain one directly through a certification authority Must be installed on your server Options include Verisign (paid) and Let‚Äôs Encrypt (free) Merchant Account Allows you to process a credit card A business account at a financial institution that functions as a clearing account for credit card transactions. Transfers money to business bank account May involve physical credit-card readers (Point-of-Sale ‚Äì POS) and/or online payment gateway Online Merchant Account Requires: Application for account Proof of the establishment of your company Setup fee Transaction fees (depends on volume) Monthly and possibly annual fees Paypal offers some services that avoid the need for a merchant account as they are accepting the CC payment (however, you need a PayPal Business account instead) Issues to watch for: Authorization fees Transaction fees Monthly fees Annual fees Equipment rental fees Chargeback or Bill Backs Customer cancels credit card transaction Customer claims goods or service not provided Merchant account provider takes money back from vendor Six months in U.S., 3 months in Canada"},{"title":"Jekyll from Scratch","url":"//categories:
200/jekyll/jekyll-from-scratch/","tags":[],"body":"Jekyll from Scratch Morning Live Stream Agenda Reminders for Tony Hit Record Turn on Chat Put on mic Static website Live code: What happens if we jekyll build inside a vanilla html web directory? Pages Stack Overflow: posts vs pages We‚Äôll be covering posts tomorrow. Live code: Converting index.html to index.md using Jekyll Layouts Front Matter and Liquid See Resources below We‚Äôll be looking for at liquid tomorrow. Recommended Practice: Installing Jekyll with Bundler Live code: Generate base scaffolded boilerplate, using this tutorial: Using Jekyll with Bundler Pro tip: use the --blank flag with bundle exec jekyll new . to generate an empty jekyll site with all the directories and minimal content. Afternoon Check-in Recap Show and Tell 5 minutes for you to show off Anything else? Jekyll Best Practices READ THIS: An opinionated style guide by Ben Balter Using Jekyll with Bundler FAQ: Working with Github Pages Jekyll Deep Dive See: Day 1 README for basic tutorials and reference links Command Line Usage Configuration Resources Official Tutorials Front Matter and Liquid Front Matter Docs Official Liquid Docs Activity 1: Finish converting the other Character Classes in the hello-jekyll example Using the finished index.md and _layouts code, convert the other pages to Jekyll pages. Activity 2: Read this article beginning to end An opinionated style guide by Ben Balter Activity 3: Includes Using the finished index.md and _layouts code, further separate repeated page elements into individual includes. See: Official Include Docs ‚ÄúIncludes‚Äù tutorial on the official Video Tutorials list"},{"title":"Jekyll Quickstart","url":"//jekyll/jekyllquick/","tags":["jekyll","quickstart"],"body":"Jekyll Quickstart Jekyll is a static site generator. You give it text written in your favorite markup language and it uses layouts to create a static website. You can tweak how you want the site URLs to look, what data gets displayed on the site, and more. PrerequisitesPermalink See requirements. Instructions Permalink Install a full Ruby development environment. Install Jekyll and bundler gems. gem install jekyll bundler Create a new Jekyll site at ./myblog. jekyll new myblog Change into your new directory. cd myblog Build the site and make it available on a local server. bundle exec jekyll serve Browse to http://localhost:4000 If you encounter any errors during this process, see the troubleshooting page. Also, make sure you‚Äôve installed the development headers and other prerequisites as mentioned on the requirements page."},{"title":"README","url":"//readme/","tags":[],"body":"The Dev Bible The dev bible is a Jekyll powered knowledge base and API for web developers. I came up with the idea when learning web dev and trying to find resources all over the internet. I started by creating my own database in notion. This soon became my idea for my final project while taking the Web Developer prgoram at SAIT Features A dedicated blog with notes from SAIT Everything I‚Äôve learned about web dev so far Cheat sheets Quick reference search Coming Soon The API! The page is created with most recent JAMSTACK principles and uses Jekyll and serverless technology to deliver information quickly and efficiantly. Dependencies Jekyll Minimal Mistakes Theme Installation This App is still in development"},{"title":"Middleman Quickstart","url":"//middleman-quickstart/","tags":[],"body":"Middle Man Getting Started Installing Ruby and Middle Man macOS comes prepackaged with both Ruby and RubyGems, however, some of the Middleman‚Äôs dependencies need to be compiled during installation and on macOS that requires Xcode Command Line Tools. Xcode can be installed from the terminal: xcode-select --install Once you have Ruby and RubyGems up and running, execute the following from the command line: gem install middleman This will install Middleman, its dependencies and the command-line tools for using Middleman. The installation process will add one new command to your environment, with three useful features: $ middleman init $ middleman server middleman build The uses of each of these commands will be covered in the next section, Start a New Site. Setting up a new file To get started we will need to create a project folder for Middleman to work out of. You can do this using an existing folder or have Middleman create one for you using the middleman init command. middleman init builds a Middleman skeleton project in your current folder. middleman init my_new_project creates a subfolder my_new_project with the Middleman skeleton project. The Skeleton Every new project creates a basic web development skeleton for you. This automates the construction of a standard hierarchy of folders and files that you can use in all of your projects. A brand-new project will contain a source folder and a config.rb file. The source folder is where you will build your website. The skeleton project contains folders for JavaScript, CSS and images, but you can change these to match your own personal preferences. The config.rb file contains settings for Middleman. Gemfile Middleman will respect a Bundler Gemfile for specifying and controlling your gem dependencies. When creating a new project, Middleman will generate a Gemfile for you which specifies the same version of Middleman you are using. This will lock Middleman to this specific release series (the 4.0.x series, for example). All plugins and extra libraries you use in your project should be listed in your Gemfile, and Middleman will automatically require all of them when it starts. config.ru A config.ru file describes how the site should be loaded by a Rack-enabled web server. If you‚Äôd like to host your Middleman site in development mode on a Rack-based host such as Heroku, you can add a config.ru file at the root of your project with the following contents: require 'middleman/rack' run Middleman.server Remember that Middleman is built to generate static sites, though. This scenario is not a primary use-case. Directory Structure The default Middleman installation consists of a directory structure which looks like this: mymiddlemansite/ +‚Äì .gitignore +‚Äì Gemfile +‚Äì Gemfile.lock +‚Äì config.rb +‚Äì source +‚Äì images ¬¶ +‚Äì background.png ¬¶ +‚Äì middleman.png +‚Äì index.html.erb +‚Äì javascripts ¬¶ +‚Äì all.js +‚Äì layouts ¬¶ +‚Äì layout.erb +‚Äì stylesheets +‚Äì all.css +‚Äì normalize.css Main Directories Middleman makes use of the source, build, data and lib directories for specific purposes. Each of these directories are children of the main Middleman directory. source Directory The source directory contains your main website source files to be built, including your templates JavaScript, CSS and images. build Directory The build directory is where your static website files will be compiled and exported to. data Directory Local Data allows you to create YAML or JSON files in a folder called data and makes this information available in your templates. The data folder should be placed in the root of your project (i.e. in the same folder as your project‚Äôs source folder). See the Data Files docs for more information. lib Directory The lib directory enables you to include external Ruby modules which contain helpers for building your application. If you use Rails then you will be familiar with this layout. For more information check out the middle man cheatsheet Make sure you watch THESE if you want to master this super fun framework"},{"title":"Intro to web componants","url":"//html/intro-to-web-componants/","tags":["Web Componants","HTML"],"body":"TL;DR With Custom Elements, web developers can create new HTML tags, beef-up existing HTML tags, or extend the components other developers have authored. The API is the foundation of web components. It brings a web standards-based way to create reusable components using nothing more than vanilla JS/HTML/CSS. The result is less code, modular code, and more reuse in our apps. Introduction The browser gives us an excellent tool for structuring web applications. It‚Äôs called HTML. You may have heard of it! It‚Äôs declarative, portable, well supported, and easy to work with. Great as HTML may be, its vocabulary and extensibility are limited. The HTML living standard has always lacked a way to automatically associate JS behavior with your markup‚Ä¶ until now. Custom elements are the answer to modernizing HTML, filling in the missing pieces, and bundling structure with behavior. If HTML doesn‚Äôt provide the solution to a problem, we can create a custom element that does. Custom elements teach the browser new tricks while preserving the benefits of HTML. Defining a new element To define a new HTML element we need the power of JavaScript! The customElements global is used for defining a custom element and teaching the browser about a new tag. Call customElements.define() with the tag name you want to create and a JavaScript class that extends the base HTMLElement. Example - defining a mobile drawer panel, : class AppDrawer extends HTMLElement {...} window.customElements.define('app-drawer', AppDrawer); // Or use an anonymous class if you don't want a named constructor in current scope. window.customElements.define('app-drawer', class extends HTMLElement {...}); Example usage: It‚Äôs important to remember that using a custom element is no different than using a or any other element. Instances can be declared on the page, created dynamically in JavaScript, event listeners can be attached, etc. Keep reading for more examples. Defining an element‚Äôs JavaScript API The functionality of a custom element is defined using an ES2015 class which extends HTMLElement. Extending HTMLElement ensures the custom element inherits the entire DOM API and means any properties/methods that you add to the class become part of the element‚Äôs DOM interface. Essentially, use the class to create a public JavaScript API for your tag. Example - defining the DOM interface of : class AppDrawer extends HTMLElement { // A getter/setter for an open property. get open() { return this.hasAttribute('open'); } set open(val) { // Reflect the value of the open property as an HTML attribute. if (val) { this.setAttribute('open', ''); } else { this.removeAttribute('open'); } this.toggleDrawer(); } // A getter/setter for a disabled property. get disabled() { return this.hasAttribute('disabled'); } set disabled(val) { // Reflect the value of the disabled property as an HTML attribute. if (val) { this.setAttribute('disabled', ''); } else { this.removeAttribute('disabled'); } } // Can define constructor arguments if you wish. constructor() { // If you define a constructor, always call super() first! // This is specific to CE and required by the spec. super(); // Setup a click listener on itself. this.addEventListener('click', e => { // Don't toggle the drawer if it's disabled. if (this.disabled) { return; } this.toggleDrawer(); }); } toggleDrawer() { ... } } customElements.define('app-drawer', AppDrawer); In this example, we‚Äôre creating a drawer that has an open property, disabled property, and a toggleDrawer() method. It also reflects properties as HTML attributes. A neat feature of custom elements is that this inside a class definition refers to the DOM element itself i.e. the instance of the class. In our example, this refers to . This (üòâ) is how the element can attach a click listener to itself! And you're not limited to event listeners. The entire DOM API is available inside element code. Use this to access the element's properties, inspect its children (this.children), query nodes (this.querySelectorAll('.items')), etc. Rules on creating custom elements The name of a custom element must contain a dash (-). So , , and are all valid names, while and are not. This requirement is so the HTML parser can distinguish custom elements from regular elements. It also ensures forward compatibility when new tags are added to HTML. You can't register the same tag more than once. Attempting to do so will throw a DOMException. Once you've told the browser about a new tag, that's it. No take backs. Custom elements cannot be self-closing because HTML only allows a few elements to be self-closing. Always write a closing tag (). Custom element reactions A custom element can define special lifecycle hooks for running code during interesting times of its existence. These are called custom element reactions. https://www.webcomponents.org/element/vanillawc/wc-social-link"}]}